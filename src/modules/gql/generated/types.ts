/* eslint-disable */

/** 
* ФАЙЛ ГЕНЕРИРУЕТСЯ АВТОМАТИЧЕСКИ, ПРАВИТЬ ЕГО НЕ НУЖНО 
* Команда для генерирования этого файла: "yarn generate:types" 
*/


export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  DateTime: globalThis.Date;
  Decimal: any;
  /** Контент для фронт-редактора */
  EditorComponentObject: any;
  JSON: any;
  /** desc */
  Upload: globalThis.File;
  /** UserTechnologyLevel from 1 to 5 */
  UserTechnologyLevel: any;
};

/** Объект ответа мутации пользователя */
export interface AuthPayload {
  __typename?: 'AuthPayload';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  errors: Array<RequestError>;
  data?: Maybe<User>;
}

export interface BlockCreateManyWorldInput {
  id?: Maybe<Scalars['String']>;
  representation: Scalars['String'];
  type: Scalars['Int'];
  x: Scalars['Int'];
  y: Scalars['Int'];
  z: Scalars['Int'];
}

export interface BlockCreateManyWorldInputEnvelope {
  data?: Maybe<Array<BlockCreateManyWorldInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface BlockCreateNestedManyWithoutWorldInput {
  create?: Maybe<Array<BlockCreateWithoutWorldInput>>;
  connectOrCreate?: Maybe<Array<BlockCreateOrConnectWithoutWorldInput>>;
  createMany?: Maybe<BlockCreateManyWorldInputEnvelope>;
  connect?: Maybe<Array<BlockWhereUniqueInput>>;
}

export interface BlockCreateOrConnectWithoutWorldInput {
  where: BlockWhereUniqueInput;
  create: BlockCreateWithoutWorldInput;
}

export interface BlockCreateWithoutWorldInput {
  id?: Maybe<Scalars['String']>;
  representation: Scalars['String'];
  type: Scalars['Int'];
  x: Scalars['Int'];
  y: Scalars['Int'];
  z: Scalars['Int'];
}

export interface BlockListRelationFilter {
  every?: Maybe<BlockWhereInput>;
  some?: Maybe<BlockWhereInput>;
  none?: Maybe<BlockWhereInput>;
}

export interface BlockWhereInput {
  AND?: Maybe<Array<BlockWhereInput>>;
  OR?: Maybe<Array<BlockWhereInput>>;
  NOT?: Maybe<Array<BlockWhereInput>>;
  id?: Maybe<StringFilter>;
  representation?: Maybe<StringFilter>;
  type?: Maybe<IntFilter>;
  x?: Maybe<IntFilter>;
  y?: Maybe<IntFilter>;
  z?: Maybe<IntFilter>;
  world?: Maybe<StringNullableFilter>;
  World?: Maybe<WorldWhereInput>;
}

export interface BlockWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface BlogCreateInput {
  name?: Scalars['String'];
  content?: Maybe<Scalars['JSON']>;
}

export interface BlogUpdateInput {
  name?: Scalars['String'];
  content?: Maybe<Scalars['JSON']>;
}

export interface BoolFilter {
  equals?: Maybe<Scalars['Boolean']>;
  not?: Maybe<NestedBoolFilter>;
}

export interface BoolNullableFilter {
  equals?: Maybe<Scalars['Boolean']>;
  not?: Maybe<NestedBoolNullableFilter>;
}

export interface CallRequestCreateManyChatRoomInput {
  id?: Maybe<Scalars['String']>;
  called_descriptions: JsonNullValueInput;
  caller_descriptions: JsonNullValueInput;
  status?: Maybe<CallRequestStatus>;
  startedAt?: Maybe<Scalars['DateTime']>;
  endedAt?: Maybe<Scalars['DateTime']>;
  Called?: Maybe<Scalars['String']>;
  Caller?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface CallRequestCreateManyChatRoomInputEnvelope {
  data?: Maybe<Array<CallRequestCreateManyChatRoomInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface CallRequestCreateManyUserCallRequestCalledToUserInput {
  id?: Maybe<Scalars['String']>;
  called_descriptions: JsonNullValueInput;
  caller_descriptions: JsonNullValueInput;
  status?: Maybe<CallRequestStatus>;
  startedAt?: Maybe<Scalars['DateTime']>;
  endedAt?: Maybe<Scalars['DateTime']>;
  Room?: Maybe<Scalars['String']>;
  Caller?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface CallRequestCreateManyUserCallRequestCalledToUserInputEnvelope {
  data?: Maybe<Array<CallRequestCreateManyUserCallRequestCalledToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface CallRequestCreateManyUserCallRequestCallerToUserInput {
  id?: Maybe<Scalars['String']>;
  called_descriptions: JsonNullValueInput;
  caller_descriptions: JsonNullValueInput;
  status?: Maybe<CallRequestStatus>;
  startedAt?: Maybe<Scalars['DateTime']>;
  endedAt?: Maybe<Scalars['DateTime']>;
  Room?: Maybe<Scalars['String']>;
  Called?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface CallRequestCreateManyUserCallRequestCallerToUserInputEnvelope {
  data?: Maybe<Array<CallRequestCreateManyUserCallRequestCallerToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface CallRequestCreateNestedManyWithoutChatRoomInput {
  create?: Maybe<Array<CallRequestCreateWithoutChatRoomInput>>;
  connectOrCreate?: Maybe<Array<CallRequestCreateOrConnectWithoutChatRoomInput>>;
  createMany?: Maybe<CallRequestCreateManyChatRoomInputEnvelope>;
  connect?: Maybe<Array<CallRequestWhereUniqueInput>>;
}

export interface CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput {
  create?: Maybe<Array<CallRequestCreateWithoutUserCallRequestCalledToUserInput>>;
  connectOrCreate?: Maybe<Array<CallRequestCreateOrConnectWithoutUserCallRequestCalledToUserInput>>;
  createMany?: Maybe<CallRequestCreateManyUserCallRequestCalledToUserInputEnvelope>;
  connect?: Maybe<Array<CallRequestWhereUniqueInput>>;
}

export interface CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput {
  create?: Maybe<Array<CallRequestCreateWithoutUserCallRequestCallerToUserInput>>;
  connectOrCreate?: Maybe<Array<CallRequestCreateOrConnectWithoutUserCallRequestCallerToUserInput>>;
  createMany?: Maybe<CallRequestCreateManyUserCallRequestCallerToUserInputEnvelope>;
  connect?: Maybe<Array<CallRequestWhereUniqueInput>>;
}

export interface CallRequestCreateOrConnectWithoutChatRoomInput {
  where: CallRequestWhereUniqueInput;
  create: CallRequestCreateWithoutChatRoomInput;
}

export interface CallRequestCreateOrConnectWithoutUserCallRequestCalledToUserInput {
  where: CallRequestWhereUniqueInput;
  create: CallRequestCreateWithoutUserCallRequestCalledToUserInput;
}

export interface CallRequestCreateOrConnectWithoutUserCallRequestCallerToUserInput {
  where: CallRequestWhereUniqueInput;
  create: CallRequestCreateWithoutUserCallRequestCallerToUserInput;
}

export interface CallRequestCreateWithoutChatRoomInput {
  id?: Maybe<Scalars['String']>;
  called_descriptions: JsonNullValueInput;
  caller_descriptions: JsonNullValueInput;
  status?: Maybe<CallRequestStatus>;
  startedAt?: Maybe<Scalars['DateTime']>;
  endedAt?: Maybe<Scalars['DateTime']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User_CallRequest_CalledToUser?: Maybe<UserCreateNestedOneWithoutCallRequestsCallRequestCalledToUserInput>;
  User_CallRequest_CallerToUser?: Maybe<UserCreateNestedOneWithoutCallRequestsCallRequestCallerToUserInput>;
}

export interface CallRequestCreateWithoutUserCallRequestCalledToUserInput {
  id?: Maybe<Scalars['String']>;
  called_descriptions: JsonNullValueInput;
  caller_descriptions: JsonNullValueInput;
  status?: Maybe<CallRequestStatus>;
  startedAt?: Maybe<Scalars['DateTime']>;
  endedAt?: Maybe<Scalars['DateTime']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User_CallRequest_CallerToUser?: Maybe<UserCreateNestedOneWithoutCallRequestsCallRequestCallerToUserInput>;
  ChatRoom?: Maybe<ChatRoomCreateNestedOneWithoutCallRequestsInput>;
}

export interface CallRequestCreateWithoutUserCallRequestCallerToUserInput {
  id?: Maybe<Scalars['String']>;
  called_descriptions: JsonNullValueInput;
  caller_descriptions: JsonNullValueInput;
  status?: Maybe<CallRequestStatus>;
  startedAt?: Maybe<Scalars['DateTime']>;
  endedAt?: Maybe<Scalars['DateTime']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User_CallRequest_CalledToUser?: Maybe<UserCreateNestedOneWithoutCallRequestsCallRequestCalledToUserInput>;
  ChatRoom?: Maybe<ChatRoomCreateNestedOneWithoutCallRequestsInput>;
}

export interface CallRequestListRelationFilter {
  every?: Maybe<CallRequestWhereInput>;
  some?: Maybe<CallRequestWhereInput>;
  none?: Maybe<CallRequestWhereInput>;
}

export interface CallRequestOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export enum CallRequestStatus {
  CREATED = 'Created',
  REJECTED = 'Rejected',
  ACCEPTED = 'Accepted',
  STARTED = 'Started',
  CANCELED = 'Canceled',
  MISSED = 'Missed',
  ENDED = 'Ended',
  ERROR = 'Error',
  BILLED = 'Billed'
}

export interface CallRequestWhereInput {
  AND?: Maybe<Array<CallRequestWhereInput>>;
  OR?: Maybe<Array<CallRequestWhereInput>>;
  NOT?: Maybe<Array<CallRequestWhereInput>>;
  id?: Maybe<StringFilter>;
  status?: Maybe<EnumCallRequestStatusFilter>;
  startedAt?: Maybe<DateTimeNullableFilter>;
  endedAt?: Maybe<DateTimeNullableFilter>;
  Room?: Maybe<StringNullableFilter>;
  Called?: Maybe<StringNullableFilter>;
  Caller?: Maybe<StringNullableFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  User_CallRequest_CalledToUser?: Maybe<UserWhereInput>;
  User_CallRequest_CallerToUser?: Maybe<UserWhereInput>;
  ChatRoom?: Maybe<ChatRoomWhereInput>;
}

export interface CallRequestWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface CareerCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
}

export interface CareerCreateManyUserInputEnvelope {
  data?: Maybe<Array<CareerCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface CareerCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<CareerCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<CareerCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<CareerCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<CareerWhereUniqueInput>>;
}

export interface CareerCreateOrConnectWithoutUserInput {
  where: CareerWhereUniqueInput;
  create: CareerCreateWithoutUserInput;
}

export interface CareerCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
}

export interface CareerListRelationFilter {
  every?: Maybe<CareerWhereInput>;
  some?: Maybe<CareerWhereInput>;
  none?: Maybe<CareerWhereInput>;
}

export interface CareerOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface CareerWhereInput {
  AND?: Maybe<Array<CareerWhereInput>>;
  OR?: Maybe<Array<CareerWhereInput>>;
  NOT?: Maybe<Array<CareerWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  name?: Maybe<StringNullableFilter>;
  description?: Maybe<StringNullableFilter>;
  start_date?: Maybe<DateTimeNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  User?: Maybe<UserWhereInput>;
}

export interface CareerWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface ChatMessage {
  __typename?: 'ChatMessage';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  content?: Maybe<Scalars['JSON']>;
  contentText?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<User>;
  Room?: Maybe<ChatRoom>;
}

export interface ChatMessageCreateInput {
  content?: Maybe<Scalars['JSON']>;
  Room?: Maybe<ChatRoomCreateOneWithoutMessagesInput>;
}

export interface ChatMessageCreateManyChatRoomInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
}

export interface ChatMessageCreateManyChatRoomInputEnvelope {
  data?: Maybe<Array<ChatMessageCreateManyChatRoomInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ChatMessageCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  Room?: Maybe<Scalars['String']>;
}

export interface ChatMessageCreateManyUserInputEnvelope {
  data?: Maybe<Array<ChatMessageCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ChatMessageCreateNestedManyWithoutChatRoomInput {
  create?: Maybe<Array<ChatMessageCreateWithoutChatRoomInput>>;
  connectOrCreate?: Maybe<Array<ChatMessageCreateOrConnectWithoutChatRoomInput>>;
  createMany?: Maybe<ChatMessageCreateManyChatRoomInputEnvelope>;
  connect?: Maybe<Array<ChatMessageWhereUniqueInput>>;
}

export interface ChatMessageCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<ChatMessageCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<ChatMessageCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<ChatMessageCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<ChatMessageWhereUniqueInput>>;
}

export interface ChatMessageCreateNestedOneWithoutChatMessagesReadedInput {
  create?: Maybe<ChatMessageCreateWithoutChatMessagesReadedInput>;
  connectOrCreate?: Maybe<ChatMessageCreateOrConnectWithoutChatMessagesReadedInput>;
  connect?: Maybe<ChatMessageWhereUniqueInput>;
}

export interface ChatMessageCreateNestedOneWithoutNoticesInput {
  create?: Maybe<ChatMessageCreateWithoutNoticesInput>;
  connectOrCreate?: Maybe<ChatMessageCreateOrConnectWithoutNoticesInput>;
  connect?: Maybe<ChatMessageWhereUniqueInput>;
}

export interface ChatMessageCreateOrConnectWithoutChatMessagesReadedInput {
  where: ChatMessageWhereUniqueInput;
  create: ChatMessageCreateWithoutChatMessagesReadedInput;
}

export interface ChatMessageCreateOrConnectWithoutChatRoomInput {
  where: ChatMessageWhereUniqueInput;
  create: ChatMessageCreateWithoutChatRoomInput;
}

export interface ChatMessageCreateOrConnectWithoutNoticesInput {
  where: ChatMessageWhereUniqueInput;
  create: ChatMessageCreateWithoutNoticesInput;
}

export interface ChatMessageCreateOrConnectWithoutUserInput {
  where: ChatMessageWhereUniqueInput;
  create: ChatMessageCreateWithoutUserInput;
}

export interface ChatMessageCreateWithoutChatMessagesReadedInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  User?: Maybe<UserCreateNestedOneWithoutChatMessagesInput>;
  ChatRoom?: Maybe<ChatRoomCreateNestedOneWithoutChatMessagesInput>;
  Notices?: Maybe<NoticeCreateNestedManyWithoutChatMessageChatMessageToNoticeInput>;
}

export interface ChatMessageCreateWithoutChatRoomInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  User?: Maybe<UserCreateNestedOneWithoutChatMessagesInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutChatMessageInput>;
  Notices?: Maybe<NoticeCreateNestedManyWithoutChatMessageChatMessageToNoticeInput>;
}

export interface ChatMessageCreateWithoutNoticesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  User?: Maybe<UserCreateNestedOneWithoutChatMessagesInput>;
  ChatRoom?: Maybe<ChatRoomCreateNestedOneWithoutChatMessagesInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutChatMessageInput>;
}

export interface ChatMessageCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  ChatRoom?: Maybe<ChatRoomCreateNestedOneWithoutChatMessagesInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutChatMessageInput>;
  Notices?: Maybe<NoticeCreateNestedManyWithoutChatMessageChatMessageToNoticeInput>;
}

export interface ChatMessageListRelationFilter {
  every?: Maybe<ChatMessageWhereInput>;
  some?: Maybe<ChatMessageWhereInput>;
  none?: Maybe<ChatMessageWhereInput>;
}

export interface ChatMessageOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface ChatMessageOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  content?: Maybe<SortOrder>;
  contentText?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  Room?: Maybe<SortOrder>;
  User?: Maybe<UserOrderByWithRelationInput>;
  ChatRoom?: Maybe<ChatRoomOrderByWithRelationInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedOrderByRelationAggregateInput>;
  Notices?: Maybe<NoticeOrderByRelationAggregateInput>;
}

export interface ChatMessageReadedCreateManyChatMessageInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User?: Maybe<Scalars['String']>;
}

export interface ChatMessageReadedCreateManyChatMessageInputEnvelope {
  data?: Maybe<Array<ChatMessageReadedCreateManyChatMessageInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ChatMessageReadedCreateManyUserChatMessageReadedToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  Message?: Maybe<Scalars['String']>;
}

export interface ChatMessageReadedCreateManyUserChatMessageReadedToUserInputEnvelope {
  data?: Maybe<Array<ChatMessageReadedCreateManyUserChatMessageReadedToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ChatMessageReadedCreateNestedManyWithoutChatMessageInput {
  create?: Maybe<Array<ChatMessageReadedCreateWithoutChatMessageInput>>;
  connectOrCreate?: Maybe<Array<ChatMessageReadedCreateOrConnectWithoutChatMessageInput>>;
  createMany?: Maybe<ChatMessageReadedCreateManyChatMessageInputEnvelope>;
  connect?: Maybe<Array<ChatMessageReadedWhereUniqueInput>>;
}

export interface ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput {
  create?: Maybe<Array<ChatMessageReadedCreateWithoutUserChatMessageReadedToUserInput>>;
  connectOrCreate?: Maybe<Array<ChatMessageReadedCreateOrConnectWithoutUserChatMessageReadedToUserInput>>;
  createMany?: Maybe<ChatMessageReadedCreateManyUserChatMessageReadedToUserInputEnvelope>;
  connect?: Maybe<Array<ChatMessageReadedWhereUniqueInput>>;
}

export interface ChatMessageReadedCreateOrConnectWithoutChatMessageInput {
  where: ChatMessageReadedWhereUniqueInput;
  create: ChatMessageReadedCreateWithoutChatMessageInput;
}

export interface ChatMessageReadedCreateOrConnectWithoutUserChatMessageReadedToUserInput {
  where: ChatMessageReadedWhereUniqueInput;
  create: ChatMessageReadedCreateWithoutUserChatMessageReadedToUserInput;
}

export interface ChatMessageReadedCreateWithoutChatMessageInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User_ChatMessageReadedToUser?: Maybe<UserCreateNestedOneWithoutChatMessagesReadedInput>;
}

export interface ChatMessageReadedCreateWithoutUserChatMessageReadedToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  ChatMessage?: Maybe<ChatMessageCreateNestedOneWithoutChatMessagesReadedInput>;
}

export interface ChatMessageReadedListRelationFilter {
  every?: Maybe<ChatMessageReadedWhereInput>;
  some?: Maybe<ChatMessageReadedWhereInput>;
  none?: Maybe<ChatMessageReadedWhereInput>;
}

export interface ChatMessageReadedOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface ChatMessageReadedWhereInput {
  AND?: Maybe<Array<ChatMessageReadedWhereInput>>;
  OR?: Maybe<Array<ChatMessageReadedWhereInput>>;
  NOT?: Maybe<Array<ChatMessageReadedWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  Message?: Maybe<StringNullableFilter>;
  User?: Maybe<StringNullableFilter>;
  ChatMessage?: Maybe<ChatMessageWhereInput>;
  User_ChatMessageReadedToUser?: Maybe<UserWhereInput>;
}

export interface ChatMessageReadedWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface ChatMessageResponse {
  __typename?: 'ChatMessageResponse';
  success: Scalars['Boolean'];
  message: Scalars['String'];
  errors: Array<RequestError>;
  data?: Maybe<ChatMessage>;
}

export interface ChatMessageWhereInput {
  AND?: Maybe<Array<ChatMessageWhereInput>>;
  OR?: Maybe<Array<ChatMessageWhereInput>>;
  NOT?: Maybe<Array<ChatMessageWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  content?: Maybe<JsonNullableFilter>;
  contentText?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  Room?: Maybe<StringNullableFilter>;
  User?: Maybe<UserWhereInput>;
  ChatRoom?: Maybe<ChatRoomWhereInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedListRelationFilter>;
  Notices?: Maybe<NoticeListRelationFilter>;
}

export interface ChatMessageWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface ChatRoom {
  __typename?: 'ChatRoom';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  Messages?: Maybe<Array<ChatMessage>>;
  CreatedBy?: Maybe<User>;
  Members?: Maybe<Array<User>>;
  Invitations?: Maybe<Array<ChatRoomInvitation>>;
}

export interface ChatRoomCreateManyUserChatRoomToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
}

export interface ChatRoomCreateManyUserChatRoomToUserInputEnvelope {
  data?: Maybe<Array<ChatRoomCreateManyUserChatRoomToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput {
  create?: Maybe<Array<ChatRoomCreateWithoutUserChatRoomToUserInput>>;
  connectOrCreate?: Maybe<Array<ChatRoomCreateOrConnectWithoutUserChatRoomToUserInput>>;
  createMany?: Maybe<ChatRoomCreateManyUserChatRoomToUserInputEnvelope>;
  connect?: Maybe<Array<ChatRoomWhereUniqueInput>>;
}

export interface ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput {
  create?: Maybe<Array<ChatRoomCreateWithoutUserChatRoomsMembersInput>>;
  connectOrCreate?: Maybe<Array<ChatRoomCreateOrConnectWithoutUserChatRoomsMembersInput>>;
  connect?: Maybe<Array<ChatRoomWhereUniqueInput>>;
}

export interface ChatRoomCreateNestedOneWithoutCallRequestsInput {
  create?: Maybe<ChatRoomCreateWithoutCallRequestsInput>;
  connectOrCreate?: Maybe<ChatRoomCreateOrConnectWithoutCallRequestsInput>;
  connect?: Maybe<ChatRoomWhereUniqueInput>;
}

export interface ChatRoomCreateNestedOneWithoutChatMessagesInput {
  create?: Maybe<ChatRoomCreateWithoutChatMessagesInput>;
  connectOrCreate?: Maybe<ChatRoomCreateOrConnectWithoutChatMessagesInput>;
  connect?: Maybe<ChatRoomWhereUniqueInput>;
}

export interface ChatRoomCreateNestedOneWithoutChatRoomInvitationsInput {
  create?: Maybe<ChatRoomCreateWithoutChatRoomInvitationsInput>;
  connectOrCreate?: Maybe<ChatRoomCreateOrConnectWithoutChatRoomInvitationsInput>;
  connect?: Maybe<ChatRoomWhereUniqueInput>;
}

export interface ChatRoomCreateNestedOneWithoutProjectsInput {
  create?: Maybe<ChatRoomCreateWithoutProjectsInput>;
  connectOrCreate?: Maybe<ChatRoomCreateOrConnectWithoutProjectsInput>;
  connect?: Maybe<ChatRoomWhereUniqueInput>;
}

export interface ChatRoomCreateNestedOneWithoutTasksInput {
  create?: Maybe<ChatRoomCreateWithoutTasksInput>;
  connectOrCreate?: Maybe<ChatRoomCreateOrConnectWithoutTasksInput>;
  connect?: Maybe<ChatRoomWhereUniqueInput>;
}

export interface ChatRoomCreateOneWithoutMessagesInput {
  to?: Maybe<Scalars['ID']>;
  connect?: Maybe<ChatRoomWhereUniqueInput>;
}

export interface ChatRoomCreateOrConnectWithoutCallRequestsInput {
  where: ChatRoomWhereUniqueInput;
  create: ChatRoomCreateWithoutCallRequestsInput;
}

export interface ChatRoomCreateOrConnectWithoutChatMessagesInput {
  where: ChatRoomWhereUniqueInput;
  create: ChatRoomCreateWithoutChatMessagesInput;
}

export interface ChatRoomCreateOrConnectWithoutChatRoomInvitationsInput {
  where: ChatRoomWhereUniqueInput;
  create: ChatRoomCreateWithoutChatRoomInvitationsInput;
}

export interface ChatRoomCreateOrConnectWithoutProjectsInput {
  where: ChatRoomWhereUniqueInput;
  create: ChatRoomCreateWithoutProjectsInput;
}

export interface ChatRoomCreateOrConnectWithoutTasksInput {
  where: ChatRoomWhereUniqueInput;
  create: ChatRoomCreateWithoutTasksInput;
}

export interface ChatRoomCreateOrConnectWithoutUserChatRoomToUserInput {
  where: ChatRoomWhereUniqueInput;
  create: ChatRoomCreateWithoutUserChatRoomToUserInput;
}

export interface ChatRoomCreateOrConnectWithoutUserChatRoomsMembersInput {
  where: ChatRoomWhereUniqueInput;
  create: ChatRoomCreateWithoutUserChatRoomsMembersInput;
}

export interface ChatRoomCreateWithoutCallRequestsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  User_ChatRoomToUser?: Maybe<UserCreateNestedOneWithoutChatRoomsChatRoomToUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutChatRoomInput>;
  ChatRoomInvitations?: Maybe<ChatRoomInvitationCreateNestedManyWithoutChatRoomChatRoomToChatRoomInvitationInput>;
  Projects?: Maybe<ProjectCreateNestedManyWithoutChatRoomChatRoomToProjectInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutChatRoomChatRoomToTaskInput>;
  User_ChatRoomsMembers?: Maybe<UserCreateNestedManyWithoutChatRoomsChatRoomsMembersInput>;
}

export interface ChatRoomCreateWithoutChatMessagesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  User_ChatRoomToUser?: Maybe<UserCreateNestedOneWithoutChatRoomsChatRoomToUserInput>;
  CallRequests?: Maybe<CallRequestCreateNestedManyWithoutChatRoomInput>;
  ChatRoomInvitations?: Maybe<ChatRoomInvitationCreateNestedManyWithoutChatRoomChatRoomToChatRoomInvitationInput>;
  Projects?: Maybe<ProjectCreateNestedManyWithoutChatRoomChatRoomToProjectInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutChatRoomChatRoomToTaskInput>;
  User_ChatRoomsMembers?: Maybe<UserCreateNestedManyWithoutChatRoomsChatRoomsMembersInput>;
}

export interface ChatRoomCreateWithoutChatRoomInvitationsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  User_ChatRoomToUser?: Maybe<UserCreateNestedOneWithoutChatRoomsChatRoomToUserInput>;
  CallRequests?: Maybe<CallRequestCreateNestedManyWithoutChatRoomInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutChatRoomInput>;
  Projects?: Maybe<ProjectCreateNestedManyWithoutChatRoomChatRoomToProjectInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutChatRoomChatRoomToTaskInput>;
  User_ChatRoomsMembers?: Maybe<UserCreateNestedManyWithoutChatRoomsChatRoomsMembersInput>;
}

export interface ChatRoomCreateWithoutProjectsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  User_ChatRoomToUser?: Maybe<UserCreateNestedOneWithoutChatRoomsChatRoomToUserInput>;
  CallRequests?: Maybe<CallRequestCreateNestedManyWithoutChatRoomInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutChatRoomInput>;
  ChatRoomInvitations?: Maybe<ChatRoomInvitationCreateNestedManyWithoutChatRoomChatRoomToChatRoomInvitationInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutChatRoomChatRoomToTaskInput>;
  User_ChatRoomsMembers?: Maybe<UserCreateNestedManyWithoutChatRoomsChatRoomsMembersInput>;
}

export interface ChatRoomCreateWithoutTasksInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  User_ChatRoomToUser?: Maybe<UserCreateNestedOneWithoutChatRoomsChatRoomToUserInput>;
  CallRequests?: Maybe<CallRequestCreateNestedManyWithoutChatRoomInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutChatRoomInput>;
  ChatRoomInvitations?: Maybe<ChatRoomInvitationCreateNestedManyWithoutChatRoomChatRoomToChatRoomInvitationInput>;
  Projects?: Maybe<ProjectCreateNestedManyWithoutChatRoomChatRoomToProjectInput>;
  User_ChatRoomsMembers?: Maybe<UserCreateNestedManyWithoutChatRoomsChatRoomsMembersInput>;
}

export interface ChatRoomCreateWithoutUserChatRoomToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  CallRequests?: Maybe<CallRequestCreateNestedManyWithoutChatRoomInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutChatRoomInput>;
  ChatRoomInvitations?: Maybe<ChatRoomInvitationCreateNestedManyWithoutChatRoomChatRoomToChatRoomInvitationInput>;
  Projects?: Maybe<ProjectCreateNestedManyWithoutChatRoomChatRoomToProjectInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutChatRoomChatRoomToTaskInput>;
  User_ChatRoomsMembers?: Maybe<UserCreateNestedManyWithoutChatRoomsChatRoomsMembersInput>;
}

export interface ChatRoomCreateWithoutUserChatRoomsMembersInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  User_ChatRoomToUser?: Maybe<UserCreateNestedOneWithoutChatRoomsChatRoomToUserInput>;
  CallRequests?: Maybe<CallRequestCreateNestedManyWithoutChatRoomInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutChatRoomInput>;
  ChatRoomInvitations?: Maybe<ChatRoomInvitationCreateNestedManyWithoutChatRoomChatRoomToChatRoomInvitationInput>;
  Projects?: Maybe<ProjectCreateNestedManyWithoutChatRoomChatRoomToProjectInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutChatRoomChatRoomToTaskInput>;
}

export interface ChatRoomInvitation {
  __typename?: 'ChatRoomInvitation';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  User?: Maybe<User>;
  CreatedBy?: Maybe<User>;
  ChatRoom?: Maybe<ChatRoom>;
}

export interface ChatRoomInvitationCreateManyChatRoomChatRoomToChatRoomInvitationInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
  Notice?: Maybe<Scalars['String']>;
}

export interface ChatRoomInvitationCreateManyChatRoomChatRoomToChatRoomInvitationInputEnvelope {
  data?: Maybe<Array<ChatRoomInvitationCreateManyChatRoomChatRoomToChatRoomInvitationInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ChatRoomInvitationCreateManyNoticeChatRoomInvitationToNoticeInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
  ChatRoom?: Maybe<Scalars['String']>;
}

export interface ChatRoomInvitationCreateManyNoticeChatRoomInvitationToNoticeInputEnvelope {
  data?: Maybe<Array<ChatRoomInvitationCreateManyNoticeChatRoomInvitationToNoticeInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ChatRoomInvitationCreateManyUserChatRoomInvitationCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User?: Maybe<Scalars['String']>;
  ChatRoom?: Maybe<Scalars['String']>;
  Notice?: Maybe<Scalars['String']>;
}

export interface ChatRoomInvitationCreateManyUserChatRoomInvitationCreatedByToUserInputEnvelope {
  data?: Maybe<Array<ChatRoomInvitationCreateManyUserChatRoomInvitationCreatedByToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ChatRoomInvitationCreateManyUserChatRoomInvitationUserToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<Scalars['String']>;
  ChatRoom?: Maybe<Scalars['String']>;
  Notice?: Maybe<Scalars['String']>;
}

export interface ChatRoomInvitationCreateManyUserChatRoomInvitationUserToUserInputEnvelope {
  data?: Maybe<Array<ChatRoomInvitationCreateManyUserChatRoomInvitationUserToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ChatRoomInvitationCreateNestedManyWithoutChatRoomChatRoomToChatRoomInvitationInput {
  create?: Maybe<Array<ChatRoomInvitationCreateWithoutChatRoomChatRoomToChatRoomInvitationInput>>;
  connectOrCreate?: Maybe<Array<ChatRoomInvitationCreateOrConnectWithoutChatRoomChatRoomToChatRoomInvitationInput>>;
  createMany?: Maybe<ChatRoomInvitationCreateManyChatRoomChatRoomToChatRoomInvitationInputEnvelope>;
  connect?: Maybe<Array<ChatRoomInvitationWhereUniqueInput>>;
}

export interface ChatRoomInvitationCreateNestedManyWithoutNoticeChatRoomInvitationToNoticeInput {
  create?: Maybe<Array<ChatRoomInvitationCreateWithoutNoticeChatRoomInvitationToNoticeInput>>;
  connectOrCreate?: Maybe<Array<ChatRoomInvitationCreateOrConnectWithoutNoticeChatRoomInvitationToNoticeInput>>;
  createMany?: Maybe<ChatRoomInvitationCreateManyNoticeChatRoomInvitationToNoticeInputEnvelope>;
  connect?: Maybe<Array<ChatRoomInvitationWhereUniqueInput>>;
}

export interface ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput {
  create?: Maybe<Array<ChatRoomInvitationCreateWithoutUserChatRoomInvitationCreatedByToUserInput>>;
  connectOrCreate?: Maybe<Array<ChatRoomInvitationCreateOrConnectWithoutUserChatRoomInvitationCreatedByToUserInput>>;
  createMany?: Maybe<ChatRoomInvitationCreateManyUserChatRoomInvitationCreatedByToUserInputEnvelope>;
  connect?: Maybe<Array<ChatRoomInvitationWhereUniqueInput>>;
}

export interface ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput {
  create?: Maybe<Array<ChatRoomInvitationCreateWithoutUserChatRoomInvitationUserToUserInput>>;
  connectOrCreate?: Maybe<Array<ChatRoomInvitationCreateOrConnectWithoutUserChatRoomInvitationUserToUserInput>>;
  createMany?: Maybe<ChatRoomInvitationCreateManyUserChatRoomInvitationUserToUserInputEnvelope>;
  connect?: Maybe<Array<ChatRoomInvitationWhereUniqueInput>>;
}

export interface ChatRoomInvitationCreateOrConnectWithoutChatRoomChatRoomToChatRoomInvitationInput {
  where: ChatRoomInvitationWhereUniqueInput;
  create: ChatRoomInvitationCreateWithoutChatRoomChatRoomToChatRoomInvitationInput;
}

export interface ChatRoomInvitationCreateOrConnectWithoutNoticeChatRoomInvitationToNoticeInput {
  where: ChatRoomInvitationWhereUniqueInput;
  create: ChatRoomInvitationCreateWithoutNoticeChatRoomInvitationToNoticeInput;
}

export interface ChatRoomInvitationCreateOrConnectWithoutUserChatRoomInvitationCreatedByToUserInput {
  where: ChatRoomInvitationWhereUniqueInput;
  create: ChatRoomInvitationCreateWithoutUserChatRoomInvitationCreatedByToUserInput;
}

export interface ChatRoomInvitationCreateOrConnectWithoutUserChatRoomInvitationUserToUserInput {
  where: ChatRoomInvitationWhereUniqueInput;
  create: ChatRoomInvitationCreateWithoutUserChatRoomInvitationUserToUserInput;
}

export interface ChatRoomInvitationCreateWithoutChatRoomChatRoomToChatRoomInvitationInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User_ChatRoomInvitation_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutChatRoomInvitationsChatRoomInvitationCreatedByToUserInput>;
  Notice_ChatRoomInvitationToNotice?: Maybe<NoticeCreateNestedOneWithoutChatRoomInvitationsInput>;
  User_ChatRoomInvitation_UserToUser?: Maybe<UserCreateNestedOneWithoutChatRoomInvitationsChatRoomInvitationUserToUserInput>;
}

export interface ChatRoomInvitationCreateWithoutNoticeChatRoomInvitationToNoticeInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  ChatRoom_ChatRoomToChatRoomInvitation?: Maybe<ChatRoomCreateNestedOneWithoutChatRoomInvitationsInput>;
  User_ChatRoomInvitation_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutChatRoomInvitationsChatRoomInvitationCreatedByToUserInput>;
  User_ChatRoomInvitation_UserToUser?: Maybe<UserCreateNestedOneWithoutChatRoomInvitationsChatRoomInvitationUserToUserInput>;
}

export interface ChatRoomInvitationCreateWithoutUserChatRoomInvitationCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  ChatRoom_ChatRoomToChatRoomInvitation?: Maybe<ChatRoomCreateNestedOneWithoutChatRoomInvitationsInput>;
  Notice_ChatRoomInvitationToNotice?: Maybe<NoticeCreateNestedOneWithoutChatRoomInvitationsInput>;
  User_ChatRoomInvitation_UserToUser?: Maybe<UserCreateNestedOneWithoutChatRoomInvitationsChatRoomInvitationUserToUserInput>;
}

export interface ChatRoomInvitationCreateWithoutUserChatRoomInvitationUserToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  ChatRoom_ChatRoomToChatRoomInvitation?: Maybe<ChatRoomCreateNestedOneWithoutChatRoomInvitationsInput>;
  User_ChatRoomInvitation_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutChatRoomInvitationsChatRoomInvitationCreatedByToUserInput>;
  Notice_ChatRoomInvitationToNotice?: Maybe<NoticeCreateNestedOneWithoutChatRoomInvitationsInput>;
}

export interface ChatRoomInvitationListRelationFilter {
  every?: Maybe<ChatRoomInvitationWhereInput>;
  some?: Maybe<ChatRoomInvitationWhereInput>;
  none?: Maybe<ChatRoomInvitationWhereInput>;
}

export interface ChatRoomInvitationOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface ChatRoomInvitationWhereInput {
  AND?: Maybe<Array<ChatRoomInvitationWhereInput>>;
  OR?: Maybe<Array<ChatRoomInvitationWhereInput>>;
  NOT?: Maybe<Array<ChatRoomInvitationWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  User?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  ChatRoom?: Maybe<StringNullableFilter>;
  Notice?: Maybe<StringNullableFilter>;
  ChatRoom_ChatRoomToChatRoomInvitation?: Maybe<ChatRoomWhereInput>;
  User_ChatRoomInvitation_CreatedByToUser?: Maybe<UserWhereInput>;
  Notice_ChatRoomInvitationToNotice?: Maybe<NoticeWhereInput>;
  User_ChatRoomInvitation_UserToUser?: Maybe<UserWhereInput>;
}

export interface ChatRoomInvitationWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface ChatRoomListRelationFilter {
  every?: Maybe<ChatRoomWhereInput>;
  some?: Maybe<ChatRoomWhereInput>;
  none?: Maybe<ChatRoomWhereInput>;
}

export interface ChatRoomOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface ChatRoomOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  description?: Maybe<SortOrder>;
  image?: Maybe<SortOrder>;
  code?: Maybe<SortOrder>;
  isPublic?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  allowAnonymous?: Maybe<SortOrder>;
  sandbox?: Maybe<SortOrder>;
  User_ChatRoomToUser?: Maybe<UserOrderByWithRelationInput>;
  CallRequests?: Maybe<CallRequestOrderByRelationAggregateInput>;
  ChatMessages?: Maybe<ChatMessageOrderByRelationAggregateInput>;
  ChatRoomInvitations?: Maybe<ChatRoomInvitationOrderByRelationAggregateInput>;
  Projects?: Maybe<ProjectOrderByRelationAggregateInput>;
  Tasks?: Maybe<TaskOrderByRelationAggregateInput>;
  User_ChatRoomsMembers?: Maybe<UserOrderByRelationAggregateInput>;
}

export interface ChatRoomWhereInput {
  AND?: Maybe<Array<ChatRoomWhereInput>>;
  OR?: Maybe<Array<ChatRoomWhereInput>>;
  NOT?: Maybe<Array<ChatRoomWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  name?: Maybe<StringFilter>;
  description?: Maybe<StringNullableFilter>;
  image?: Maybe<StringNullableFilter>;
  code?: Maybe<StringNullableFilter>;
  isPublic?: Maybe<BoolNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  allowAnonymous?: Maybe<BoolNullableFilter>;
  sandbox?: Maybe<BoolNullableFilter>;
  User_ChatRoomToUser?: Maybe<UserWhereInput>;
  CallRequests?: Maybe<CallRequestListRelationFilter>;
  ChatMessages?: Maybe<ChatMessageListRelationFilter>;
  ChatRoomInvitations?: Maybe<ChatRoomInvitationListRelationFilter>;
  Projects?: Maybe<ProjectListRelationFilter>;
  Tasks?: Maybe<TaskListRelationFilter>;
  User_ChatRoomsMembers?: Maybe<UserListRelationFilter>;
}

export interface ChatRoomWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
}

export interface CodeChallenge {
  __typename?: 'CodeChallenge';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  externalKey?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  instructions?: Maybe<Scalars['String']>;
  videoUrl?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  rank?: Maybe<Scalars['Int']>;
  translations?: Maybe<Scalars['JSON']>;
  tests?: Maybe<Scalars['JSON']>;
  solutions?: Maybe<Scalars['JSON']>;
  files?: Maybe<Scalars['JSON']>;
  required?: Maybe<Scalars['JSON']>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  CreatedBy?: Maybe<User>;
  Topic?: Maybe<Resource>;
  Block?: Maybe<Scalars['ID']>;
  CodeChallengeBlock?: Maybe<CodeChallengeBlock>;
  CodeChallengeCompletions?: Maybe<Array<CodeChallengeCompletion>>;
}


export type CodeChallengeCodeChallengeCompletionsArgs = {
  orderBy?: Maybe<Array<CodeChallengeCompletionOrderByWithRelationInput>>;
  where?: Maybe<CodeChallengeCompletionWhereInput>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
};

export interface CodeChallengeBlock {
  __typename?: 'CodeChallengeBlock';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  Parent?: Maybe<CodeChallengeBlock>;
  Challenges?: Maybe<Array<CodeChallenge>>;
  Children?: Maybe<Array<CodeChallengeBlock>>;
}


export type CodeChallengeBlockChallengesArgs = {
  orderBy?: Maybe<CodeChallengeOrderByWithRelationInput>;
};


export type CodeChallengeBlockChildrenArgs = {
  orderBy?: Maybe<CodeChallengeBlockOrderByWithRelationInput>;
};

export interface CodeChallengeBlockCreateManyCodeChallengeBlockInput {
  id?: Maybe<Scalars['String']>;
  externalKey?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<Scalars['String']>;
}

export interface CodeChallengeBlockCreateManyCodeChallengeBlockInputEnvelope {
  data?: Maybe<Array<CodeChallengeBlockCreateManyCodeChallengeBlockInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallengeBlockCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  externalKey?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  Parent?: Maybe<Scalars['String']>;
}

export interface CodeChallengeBlockCreateManyUserInputEnvelope {
  data?: Maybe<Array<CodeChallengeBlockCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallengeBlockCreateNestedManyWithoutCodeChallengeBlockInput {
  create?: Maybe<Array<CodeChallengeBlockCreateWithoutCodeChallengeBlockInput>>;
  connectOrCreate?: Maybe<Array<CodeChallengeBlockCreateOrConnectWithoutCodeChallengeBlockInput>>;
  createMany?: Maybe<CodeChallengeBlockCreateManyCodeChallengeBlockInputEnvelope>;
  connect?: Maybe<Array<CodeChallengeBlockWhereUniqueInput>>;
}

export interface CodeChallengeBlockCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<CodeChallengeBlockCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<CodeChallengeBlockCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<CodeChallengeBlockCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<CodeChallengeBlockWhereUniqueInput>>;
}

export interface CodeChallengeBlockCreateNestedOneWithoutCodeChallengeInput {
  create?: Maybe<CodeChallengeBlockCreateWithoutCodeChallengeInput>;
  connectOrCreate?: Maybe<CodeChallengeBlockCreateOrConnectWithoutCodeChallengeInput>;
  connect?: Maybe<CodeChallengeBlockWhereUniqueInput>;
}

export interface CodeChallengeBlockCreateNestedOneWithoutOtherCodeChallengeBlockInput {
  create?: Maybe<CodeChallengeBlockCreateWithoutOtherCodeChallengeBlockInput>;
  connectOrCreate?: Maybe<CodeChallengeBlockCreateOrConnectWithoutOtherCodeChallengeBlockInput>;
  connect?: Maybe<CodeChallengeBlockWhereUniqueInput>;
}

export interface CodeChallengeBlockCreateOrConnectWithoutCodeChallengeBlockInput {
  where: CodeChallengeBlockWhereUniqueInput;
  create: CodeChallengeBlockCreateWithoutCodeChallengeBlockInput;
}

export interface CodeChallengeBlockCreateOrConnectWithoutCodeChallengeInput {
  where: CodeChallengeBlockWhereUniqueInput;
  create: CodeChallengeBlockCreateWithoutCodeChallengeInput;
}

export interface CodeChallengeBlockCreateOrConnectWithoutOtherCodeChallengeBlockInput {
  where: CodeChallengeBlockWhereUniqueInput;
  create: CodeChallengeBlockCreateWithoutOtherCodeChallengeBlockInput;
}

export interface CodeChallengeBlockCreateOrConnectWithoutUserInput {
  where: CodeChallengeBlockWhereUniqueInput;
  create: CodeChallengeBlockCreateWithoutUserInput;
}

export interface CodeChallengeBlockCreateWithoutCodeChallengeBlockInput {
  id?: Maybe<Scalars['String']>;
  externalKey?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutCodeChallengeBlocksInput>;
  CodeChallenge?: Maybe<CodeChallengeCreateNestedManyWithoutCodeChallengeBlockInput>;
  other_CodeChallengeBlock?: Maybe<CodeChallengeBlockCreateNestedManyWithoutCodeChallengeBlockInput>;
}

export interface CodeChallengeBlockCreateWithoutCodeChallengeInput {
  id?: Maybe<Scalars['String']>;
  externalKey?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutCodeChallengeBlocksInput>;
  CodeChallengeBlock?: Maybe<CodeChallengeBlockCreateNestedOneWithoutOtherCodeChallengeBlockInput>;
  other_CodeChallengeBlock?: Maybe<CodeChallengeBlockCreateNestedManyWithoutCodeChallengeBlockInput>;
}

export interface CodeChallengeBlockCreateWithoutOtherCodeChallengeBlockInput {
  id?: Maybe<Scalars['String']>;
  externalKey?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutCodeChallengeBlocksInput>;
  CodeChallengeBlock?: Maybe<CodeChallengeBlockCreateNestedOneWithoutOtherCodeChallengeBlockInput>;
  CodeChallenge?: Maybe<CodeChallengeCreateNestedManyWithoutCodeChallengeBlockInput>;
}

export interface CodeChallengeBlockCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  externalKey?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  CodeChallengeBlock?: Maybe<CodeChallengeBlockCreateNestedOneWithoutOtherCodeChallengeBlockInput>;
  CodeChallenge?: Maybe<CodeChallengeCreateNestedManyWithoutCodeChallengeBlockInput>;
  other_CodeChallengeBlock?: Maybe<CodeChallengeBlockCreateNestedManyWithoutCodeChallengeBlockInput>;
}

export interface CodeChallengeBlockListRelationFilter {
  every?: Maybe<CodeChallengeBlockWhereInput>;
  some?: Maybe<CodeChallengeBlockWhereInput>;
  none?: Maybe<CodeChallengeBlockWhereInput>;
}

export interface CodeChallengeBlockOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface CodeChallengeBlockOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  externalKey?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  rank?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  Parent?: Maybe<SortOrder>;
  User?: Maybe<UserOrderByWithRelationInput>;
  CodeChallengeBlock?: Maybe<CodeChallengeBlockOrderByWithRelationInput>;
  CodeChallenge?: Maybe<CodeChallengeOrderByRelationAggregateInput>;
  other_CodeChallengeBlock?: Maybe<CodeChallengeBlockOrderByRelationAggregateInput>;
}

export interface CodeChallengeBlockWhereInput {
  AND?: Maybe<Array<CodeChallengeBlockWhereInput>>;
  OR?: Maybe<Array<CodeChallengeBlockWhereInput>>;
  NOT?: Maybe<Array<CodeChallengeBlockWhereInput>>;
  id?: Maybe<StringFilter>;
  externalKey?: Maybe<StringNullableFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  name?: Maybe<StringNullableFilter>;
  rank?: Maybe<IntNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  Parent?: Maybe<StringNullableFilter>;
  User?: Maybe<UserWhereInput>;
  CodeChallengeBlock?: Maybe<CodeChallengeBlockWhereInput>;
  CodeChallenge?: Maybe<CodeChallengeListRelationFilter>;
  other_CodeChallengeBlock?: Maybe<CodeChallengeBlockListRelationFilter>;
}

export interface CodeChallengeBlockWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface CodeChallengeCompletion {
  __typename?: 'CodeChallengeCompletion';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  success?: Maybe<Scalars['Boolean']>;
  content?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<User>;
  Task?: Maybe<Task>;
  CodeChallenge?: Maybe<CodeChallenge>;
}

export interface CodeChallengeCompletionCreateInput {
  CodeChallenge: CodeChallengeCreateOneWithoutCompletionsInput;
}

export interface CodeChallengeCompletionCreateManyCodeChallengeCodeChallengeToCodeChallengeCompletionInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  Task?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallengeCompletionCreateManyCodeChallengeCodeChallengeToCodeChallengeCompletionInputEnvelope {
  data?: Maybe<Array<CodeChallengeCompletionCreateManyCodeChallengeCodeChallengeToCodeChallengeCompletionInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallengeCompletionCreateManyTaskCodeChallengeCompletionToTaskInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<Scalars['String']>;
  CodeChallenge?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallengeCompletionCreateManyTaskCodeChallengeCompletionToTaskInputEnvelope {
  data?: Maybe<Array<CodeChallengeCompletionCreateManyTaskCodeChallengeCompletionToTaskInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallengeCompletionCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  Task?: Maybe<Scalars['String']>;
  CodeChallenge?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallengeCompletionCreateManyUserInputEnvelope {
  data?: Maybe<Array<CodeChallengeCompletionCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallengeCompletionCreateNestedManyWithoutCodeChallengeCodeChallengeToCodeChallengeCompletionInput {
  create?: Maybe<Array<CodeChallengeCompletionCreateWithoutCodeChallengeCodeChallengeToCodeChallengeCompletionInput>>;
  connectOrCreate?: Maybe<Array<CodeChallengeCompletionCreateOrConnectWithoutCodeChallengeCodeChallengeToCodeChallengeCompletionInput>>;
  createMany?: Maybe<CodeChallengeCompletionCreateManyCodeChallengeCodeChallengeToCodeChallengeCompletionInputEnvelope>;
  connect?: Maybe<Array<CodeChallengeCompletionWhereUniqueInput>>;
}

export interface CodeChallengeCompletionCreateNestedManyWithoutTaskCodeChallengeCompletionToTaskInput {
  create?: Maybe<Array<CodeChallengeCompletionCreateWithoutTaskCodeChallengeCompletionToTaskInput>>;
  connectOrCreate?: Maybe<Array<CodeChallengeCompletionCreateOrConnectWithoutTaskCodeChallengeCompletionToTaskInput>>;
  createMany?: Maybe<CodeChallengeCompletionCreateManyTaskCodeChallengeCompletionToTaskInputEnvelope>;
  connect?: Maybe<Array<CodeChallengeCompletionWhereUniqueInput>>;
}

export interface CodeChallengeCompletionCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<CodeChallengeCompletionCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<CodeChallengeCompletionCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<CodeChallengeCompletionCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<CodeChallengeCompletionWhereUniqueInput>>;
}

export interface CodeChallengeCompletionCreateOrConnectWithoutCodeChallengeCodeChallengeToCodeChallengeCompletionInput {
  where: CodeChallengeCompletionWhereUniqueInput;
  create: CodeChallengeCompletionCreateWithoutCodeChallengeCodeChallengeToCodeChallengeCompletionInput;
}

export interface CodeChallengeCompletionCreateOrConnectWithoutTaskCodeChallengeCompletionToTaskInput {
  where: CodeChallengeCompletionWhereUniqueInput;
  create: CodeChallengeCompletionCreateWithoutTaskCodeChallengeCompletionToTaskInput;
}

export interface CodeChallengeCompletionCreateOrConnectWithoutUserInput {
  where: CodeChallengeCompletionWhereUniqueInput;
  create: CodeChallengeCompletionCreateWithoutUserInput;
}

export interface CodeChallengeCompletionCreateWithoutCodeChallengeCodeChallengeToCodeChallengeCompletionInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  content?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  User?: Maybe<UserCreateNestedOneWithoutCodeChallengeCompletionsInput>;
  Task_CodeChallengeCompletionToTask?: Maybe<TaskCreateNestedOneWithoutCodeChallengeCompletionsInput>;
}

export interface CodeChallengeCompletionCreateWithoutTaskCodeChallengeCompletionToTaskInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  content?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  CodeChallenge_CodeChallengeToCodeChallengeCompletion?: Maybe<CodeChallengeCreateNestedOneWithoutCodeChallengeCompletionsInput>;
  User?: Maybe<UserCreateNestedOneWithoutCodeChallengeCompletionsInput>;
}

export interface CodeChallengeCompletionCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  content?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  CodeChallenge_CodeChallengeToCodeChallengeCompletion?: Maybe<CodeChallengeCreateNestedOneWithoutCodeChallengeCompletionsInput>;
  Task_CodeChallengeCompletionToTask?: Maybe<TaskCreateNestedOneWithoutCodeChallengeCompletionsInput>;
}

export interface CodeChallengeCompletionListRelationFilter {
  every?: Maybe<CodeChallengeCompletionWhereInput>;
  some?: Maybe<CodeChallengeCompletionWhereInput>;
  none?: Maybe<CodeChallengeCompletionWhereInput>;
}

export interface CodeChallengeCompletionOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface CodeChallengeCompletionOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  Task?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  CodeChallenge?: Maybe<SortOrder>;
  content?: Maybe<SortOrder>;
  success?: Maybe<SortOrder>;
  CodeChallenge_CodeChallengeToCodeChallengeCompletion?: Maybe<CodeChallengeOrderByWithRelationInput>;
  User?: Maybe<UserOrderByWithRelationInput>;
  Task_CodeChallengeCompletionToTask?: Maybe<TaskOrderByWithRelationInput>;
}

export interface CodeChallengeCompletionResponse {
  __typename?: 'CodeChallengeCompletionResponse';
  success: Scalars['Boolean'];
  message: Scalars['String'];
  errors: Array<RequestError>;
  data?: Maybe<CodeChallengeCompletion>;
}

export interface CodeChallengeCompletionUpdateInput {
  content?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallengeCompletionWhereInput {
  AND?: Maybe<Array<CodeChallengeCompletionWhereInput>>;
  OR?: Maybe<Array<CodeChallengeCompletionWhereInput>>;
  NOT?: Maybe<Array<CodeChallengeCompletionWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  Task?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  CodeChallenge?: Maybe<StringNullableFilter>;
  content?: Maybe<StringNullableFilter>;
  success?: Maybe<BoolNullableFilter>;
  CodeChallenge_CodeChallengeToCodeChallengeCompletion?: Maybe<CodeChallengeWhereInput>;
  User?: Maybe<UserWhereInput>;
  Task_CodeChallengeCompletionToTask?: Maybe<TaskWhereInput>;
}

export interface CodeChallengeCompletionWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface CodeChallengeCreateManyCodeChallengeBlockInput {
  id?: Maybe<Scalars['String']>;
  externalKey?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  translations?: Maybe<NullableJsonNullValueInput>;
  tests?: Maybe<NullableJsonNullValueInput>;
  solutions?: Maybe<NullableJsonNullValueInput>;
  instructions?: Maybe<Scalars['String']>;
  files?: Maybe<NullableJsonNullValueInput>;
  videoUrl?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  required?: Maybe<NullableJsonNullValueInput>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<Scalars['String']>;
  Topic?: Maybe<Scalars['String']>;
}

export interface CodeChallengeCreateManyCodeChallengeBlockInputEnvelope {
  data?: Maybe<Array<CodeChallengeCreateManyCodeChallengeBlockInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallengeCreateManyResourceInput {
  id?: Maybe<Scalars['String']>;
  externalKey?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  translations?: Maybe<NullableJsonNullValueInput>;
  tests?: Maybe<NullableJsonNullValueInput>;
  solutions?: Maybe<NullableJsonNullValueInput>;
  instructions?: Maybe<Scalars['String']>;
  files?: Maybe<NullableJsonNullValueInput>;
  videoUrl?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  required?: Maybe<NullableJsonNullValueInput>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  Block?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
}

export interface CodeChallengeCreateManyResourceInputEnvelope {
  data?: Maybe<Array<CodeChallengeCreateManyResourceInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallengeCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  externalKey?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  translations?: Maybe<NullableJsonNullValueInput>;
  tests?: Maybe<NullableJsonNullValueInput>;
  solutions?: Maybe<NullableJsonNullValueInput>;
  instructions?: Maybe<Scalars['String']>;
  files?: Maybe<NullableJsonNullValueInput>;
  videoUrl?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  required?: Maybe<NullableJsonNullValueInput>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  Block?: Maybe<Scalars['String']>;
  Topic?: Maybe<Scalars['String']>;
}

export interface CodeChallengeCreateManyUserInputEnvelope {
  data?: Maybe<Array<CodeChallengeCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallengeCreateNestedManyWithoutCodeChallengeBlockInput {
  create?: Maybe<Array<CodeChallengeCreateWithoutCodeChallengeBlockInput>>;
  connectOrCreate?: Maybe<Array<CodeChallengeCreateOrConnectWithoutCodeChallengeBlockInput>>;
  createMany?: Maybe<CodeChallengeCreateManyCodeChallengeBlockInputEnvelope>;
  connect?: Maybe<Array<CodeChallengeWhereUniqueInput>>;
}

export interface CodeChallengeCreateNestedManyWithoutResourceInput {
  create?: Maybe<Array<CodeChallengeCreateWithoutResourceInput>>;
  connectOrCreate?: Maybe<Array<CodeChallengeCreateOrConnectWithoutResourceInput>>;
  createMany?: Maybe<CodeChallengeCreateManyResourceInputEnvelope>;
  connect?: Maybe<Array<CodeChallengeWhereUniqueInput>>;
}

export interface CodeChallengeCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<CodeChallengeCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<CodeChallengeCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<CodeChallengeCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<CodeChallengeWhereUniqueInput>>;
}

export interface CodeChallengeCreateNestedOneWithoutCodeChallengeCompletionsInput {
  create?: Maybe<CodeChallengeCreateWithoutCodeChallengeCompletionsInput>;
  connectOrCreate?: Maybe<CodeChallengeCreateOrConnectWithoutCodeChallengeCompletionsInput>;
  connect?: Maybe<CodeChallengeWhereUniqueInput>;
}

export interface CodeChallengeCreateOneWithoutCompletionsInput {
  connect?: Maybe<CodeChallengeWhereUniqueInput>;
}

export interface CodeChallengeCreateOneWithoutTopicInput {
  connect?: Maybe<CodeChallengeWhereUniqueInput>;
}

export interface CodeChallengeCreateOrConnectWithoutCodeChallengeBlockInput {
  where: CodeChallengeWhereUniqueInput;
  create: CodeChallengeCreateWithoutCodeChallengeBlockInput;
}

export interface CodeChallengeCreateOrConnectWithoutCodeChallengeCompletionsInput {
  where: CodeChallengeWhereUniqueInput;
  create: CodeChallengeCreateWithoutCodeChallengeCompletionsInput;
}

export interface CodeChallengeCreateOrConnectWithoutResourceInput {
  where: CodeChallengeWhereUniqueInput;
  create: CodeChallengeCreateWithoutResourceInput;
}

export interface CodeChallengeCreateOrConnectWithoutUserInput {
  where: CodeChallengeWhereUniqueInput;
  create: CodeChallengeCreateWithoutUserInput;
}

export interface CodeChallengeCreateWithoutCodeChallengeBlockInput {
  id?: Maybe<Scalars['String']>;
  externalKey?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  translations?: Maybe<NullableJsonNullValueInput>;
  tests?: Maybe<NullableJsonNullValueInput>;
  solutions?: Maybe<NullableJsonNullValueInput>;
  instructions?: Maybe<Scalars['String']>;
  files?: Maybe<NullableJsonNullValueInput>;
  videoUrl?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  required?: Maybe<NullableJsonNullValueInput>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutCodeChallengesInput>;
  Resource?: Maybe<ResourceCreateNestedOneWithoutCodeChallengesInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutCodeChallengeCodeChallengeToCodeChallengeCompletionInput>;
}

export interface CodeChallengeCreateWithoutCodeChallengeCompletionsInput {
  id?: Maybe<Scalars['String']>;
  externalKey?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  translations?: Maybe<NullableJsonNullValueInput>;
  tests?: Maybe<NullableJsonNullValueInput>;
  solutions?: Maybe<NullableJsonNullValueInput>;
  instructions?: Maybe<Scalars['String']>;
  files?: Maybe<NullableJsonNullValueInput>;
  videoUrl?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  required?: Maybe<NullableJsonNullValueInput>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  CodeChallengeBlock?: Maybe<CodeChallengeBlockCreateNestedOneWithoutCodeChallengeInput>;
  User?: Maybe<UserCreateNestedOneWithoutCodeChallengesInput>;
  Resource?: Maybe<ResourceCreateNestedOneWithoutCodeChallengesInput>;
}

export interface CodeChallengeCreateWithoutResourceInput {
  id?: Maybe<Scalars['String']>;
  externalKey?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  translations?: Maybe<NullableJsonNullValueInput>;
  tests?: Maybe<NullableJsonNullValueInput>;
  solutions?: Maybe<NullableJsonNullValueInput>;
  instructions?: Maybe<Scalars['String']>;
  files?: Maybe<NullableJsonNullValueInput>;
  videoUrl?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  required?: Maybe<NullableJsonNullValueInput>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  CodeChallengeBlock?: Maybe<CodeChallengeBlockCreateNestedOneWithoutCodeChallengeInput>;
  User?: Maybe<UserCreateNestedOneWithoutCodeChallengesInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutCodeChallengeCodeChallengeToCodeChallengeCompletionInput>;
}

export interface CodeChallengeCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  externalKey?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  translations?: Maybe<NullableJsonNullValueInput>;
  tests?: Maybe<NullableJsonNullValueInput>;
  solutions?: Maybe<NullableJsonNullValueInput>;
  instructions?: Maybe<Scalars['String']>;
  files?: Maybe<NullableJsonNullValueInput>;
  videoUrl?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  required?: Maybe<NullableJsonNullValueInput>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  CodeChallengeBlock?: Maybe<CodeChallengeBlockCreateNestedOneWithoutCodeChallengeInput>;
  Resource?: Maybe<ResourceCreateNestedOneWithoutCodeChallengesInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutCodeChallengeCodeChallengeToCodeChallengeCompletionInput>;
}

export interface CodeChallengeListRelationFilter {
  every?: Maybe<CodeChallengeWhereInput>;
  some?: Maybe<CodeChallengeWhereInput>;
  none?: Maybe<CodeChallengeWhereInput>;
}

export interface CodeChallengeOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface CodeChallengeOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  externalKey?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  dashedName?: Maybe<SortOrder>;
  localeTitle?: Maybe<SortOrder>;
  description?: Maybe<SortOrder>;
  challengeType?: Maybe<SortOrder>;
  forumTopicId?: Maybe<SortOrder>;
  translations?: Maybe<SortOrder>;
  tests?: Maybe<SortOrder>;
  solutions?: Maybe<SortOrder>;
  instructions?: Maybe<SortOrder>;
  files?: Maybe<SortOrder>;
  videoUrl?: Maybe<SortOrder>;
  order?: Maybe<SortOrder>;
  superOrder?: Maybe<SortOrder>;
  challengeOrder?: Maybe<SortOrder>;
  required?: Maybe<SortOrder>;
  isRequired?: Maybe<SortOrder>;
  isPrivate?: Maybe<SortOrder>;
  isBeta?: Maybe<SortOrder>;
  template?: Maybe<SortOrder>;
  time?: Maybe<SortOrder>;
  rank?: Maybe<SortOrder>;
  Block?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  Topic?: Maybe<SortOrder>;
  CodeChallengeBlock?: Maybe<CodeChallengeBlockOrderByWithRelationInput>;
  User?: Maybe<UserOrderByWithRelationInput>;
  Resource?: Maybe<ResourceOrderByWithRelationInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionOrderByRelationAggregateInput>;
}

export interface CodeChallengeUpdateInput {
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  instructions?: Maybe<Scalars['String']>;
}

export interface CodeChallengeWhereInput {
  AND?: Maybe<Array<CodeChallengeWhereInput>>;
  OR?: Maybe<Array<CodeChallengeWhereInput>>;
  NOT?: Maybe<Array<CodeChallengeWhereInput>>;
  id?: Maybe<StringFilter>;
  externalKey?: Maybe<StringNullableFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  name?: Maybe<StringNullableFilter>;
  dashedName?: Maybe<StringNullableFilter>;
  localeTitle?: Maybe<StringNullableFilter>;
  description?: Maybe<StringNullableFilter>;
  challengeType?: Maybe<IntNullableFilter>;
  forumTopicId?: Maybe<IntNullableFilter>;
  translations?: Maybe<JsonNullableFilter>;
  tests?: Maybe<JsonNullableFilter>;
  solutions?: Maybe<JsonNullableFilter>;
  instructions?: Maybe<StringNullableFilter>;
  files?: Maybe<JsonNullableFilter>;
  videoUrl?: Maybe<StringNullableFilter>;
  order?: Maybe<IntNullableFilter>;
  superOrder?: Maybe<IntNullableFilter>;
  challengeOrder?: Maybe<IntNullableFilter>;
  required?: Maybe<JsonNullableFilter>;
  isRequired?: Maybe<BoolNullableFilter>;
  isPrivate?: Maybe<BoolNullableFilter>;
  isBeta?: Maybe<BoolNullableFilter>;
  template?: Maybe<StringNullableFilter>;
  time?: Maybe<StringNullableFilter>;
  rank?: Maybe<IntNullableFilter>;
  Block?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  Topic?: Maybe<StringNullableFilter>;
  CodeChallengeBlock?: Maybe<CodeChallengeBlockWhereInput>;
  User?: Maybe<UserWhereInput>;
  Resource?: Maybe<ResourceWhereInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionListRelationFilter>;
}

export interface CodeChallengeWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  externalKey?: Maybe<Scalars['String']>;
}

export interface CommentCreateInput {
  content?: Maybe<Scalars['JSON']>;
  components?: Maybe<Scalars['JSON']>;
  topicID?: Maybe<Scalars['ID']>;
  Task?: Maybe<TaskCreateOneWithoutCommentsInput>;
}

export interface CommentCreateManyTechnologyLessonCommentToTechnologyLessonInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['String']>;
  contentText?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
}

export interface CommentCreateManyTechnologyLessonCommentToTechnologyLessonInputEnvelope {
  data?: Maybe<Array<CommentCreateManyTechnologyLessonCommentToTechnologyLessonInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface CommentCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['String']>;
  contentText?: Maybe<Scalars['String']>;
  TechnologyLesson?: Maybe<Scalars['String']>;
}

export interface CommentCreateManyUserInputEnvelope {
  data?: Maybe<Array<CommentCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface CommentCreateNestedManyWithoutTechnologyLessonCommentToTechnologyLessonInput {
  create?: Maybe<Array<CommentCreateWithoutTechnologyLessonCommentToTechnologyLessonInput>>;
  connectOrCreate?: Maybe<Array<CommentCreateOrConnectWithoutTechnologyLessonCommentToTechnologyLessonInput>>;
  createMany?: Maybe<CommentCreateManyTechnologyLessonCommentToTechnologyLessonInputEnvelope>;
  connect?: Maybe<Array<CommentWhereUniqueInput>>;
}

export interface CommentCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<CommentCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<CommentCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<CommentCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<CommentWhereUniqueInput>>;
}

export interface CommentCreateOrConnectWithoutTechnologyLessonCommentToTechnologyLessonInput {
  where: CommentWhereUniqueInput;
  create: CommentCreateWithoutTechnologyLessonCommentToTechnologyLessonInput;
}

export interface CommentCreateOrConnectWithoutUserInput {
  where: CommentWhereUniqueInput;
  create: CommentCreateWithoutUserInput;
}

export interface CommentCreateWithoutTechnologyLessonCommentToTechnologyLessonInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['String']>;
  contentText?: Maybe<Scalars['String']>;
  User?: Maybe<UserCreateNestedOneWithoutCommentsInput>;
}

export interface CommentCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['String']>;
  contentText?: Maybe<Scalars['String']>;
  TechnologyLesson_CommentToTechnologyLesson?: Maybe<TechnologyLessonCreateNestedOneWithoutCommentsInput>;
}

export interface CommentListRelationFilter {
  every?: Maybe<CommentWhereInput>;
  some?: Maybe<CommentWhereInput>;
  none?: Maybe<CommentWhereInput>;
}

export interface CommentOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface CommentUpdateInput {
  content?: Maybe<Scalars['JSON']>;
  components?: Maybe<Scalars['JSON']>;
}

export interface CommentWhereInput {
  AND?: Maybe<Array<CommentWhereInput>>;
  OR?: Maybe<Array<CommentWhereInput>>;
  NOT?: Maybe<Array<CommentWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  components?: Maybe<StringNullableFilter>;
  contentText?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  TechnologyLesson?: Maybe<StringNullableFilter>;
  User?: Maybe<UserWhereInput>;
  TechnologyLesson_CommentToTechnologyLesson?: Maybe<TechnologyLessonWhereInput>;
}

export interface CommentWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface CurrentUserUpdateInput {
  username?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
}


export interface DateTimeFilter {
  equals?: Maybe<Scalars['DateTime']>;
  in?: Maybe<Array<Scalars['DateTime']>>;
  notIn?: Maybe<Array<Scalars['DateTime']>>;
  lt?: Maybe<Scalars['DateTime']>;
  lte?: Maybe<Scalars['DateTime']>;
  gt?: Maybe<Scalars['DateTime']>;
  gte?: Maybe<Scalars['DateTime']>;
  not?: Maybe<NestedDateTimeFilter>;
}

export interface DateTimeNullableFilter {
  equals?: Maybe<Scalars['DateTime']>;
  in?: Maybe<Array<Scalars['DateTime']>>;
  notIn?: Maybe<Array<Scalars['DateTime']>>;
  lt?: Maybe<Scalars['DateTime']>;
  lte?: Maybe<Scalars['DateTime']>;
  gt?: Maybe<Scalars['DateTime']>;
  gte?: Maybe<Scalars['DateTime']>;
  not?: Maybe<NestedDateTimeNullableFilter>;
}


export interface DecimalFilter {
  equals?: Maybe<Scalars['Decimal']>;
  in?: Maybe<Array<Scalars['Decimal']>>;
  notIn?: Maybe<Array<Scalars['Decimal']>>;
  lt?: Maybe<Scalars['Decimal']>;
  lte?: Maybe<Scalars['Decimal']>;
  gt?: Maybe<Scalars['Decimal']>;
  gte?: Maybe<Scalars['Decimal']>;
  not?: Maybe<NestedDecimalFilter>;
}

export interface DecimalNullableFilter {
  equals?: Maybe<Scalars['Decimal']>;
  in?: Maybe<Array<Scalars['Decimal']>>;
  notIn?: Maybe<Array<Scalars['Decimal']>>;
  lt?: Maybe<Scalars['Decimal']>;
  lte?: Maybe<Scalars['Decimal']>;
  gt?: Maybe<Scalars['Decimal']>;
  gte?: Maybe<Scalars['Decimal']>;
  not?: Maybe<NestedDecimalNullableFilter>;
}

export interface Donate {
  __typename?: 'Donate';
  id: Scalars['ID'];
  date: Scalars['DateTime'];
  sum: Scalars['Float'];
  title?: Maybe<Scalars['String']>;
  donatorId?: Maybe<Scalars['ID']>;
  Donator?: Maybe<User>;
}

export interface DonateCreateInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  date: Scalars['DateTime'];
  sum: Scalars['Float'];
  title?: Maybe<Scalars['String']>;
  Donator?: Maybe<UserCreateNestedOneWithoutDonatesInput>;
}

export interface DonateCreateManyDonatorInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  date: Scalars['DateTime'];
  sum: Scalars['Float'];
  title?: Maybe<Scalars['String']>;
}

export interface DonateCreateManyDonatorInputEnvelope {
  data?: Maybe<Array<DonateCreateManyDonatorInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface DonateCreateNestedManyWithoutDonatorInput {
  create?: Maybe<Array<DonateCreateWithoutDonatorInput>>;
  connectOrCreate?: Maybe<Array<DonateCreateOrConnectWithoutDonatorInput>>;
  createMany?: Maybe<DonateCreateManyDonatorInputEnvelope>;
  connect?: Maybe<Array<DonateWhereUniqueInput>>;
}

export interface DonateCreateOrConnectWithoutDonatorInput {
  where: DonateWhereUniqueInput;
  create: DonateCreateWithoutDonatorInput;
}

export interface DonateCreateWithoutDonatorInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  date: Scalars['DateTime'];
  sum: Scalars['Float'];
  title?: Maybe<Scalars['String']>;
}

export interface DonateListRelationFilter {
  every?: Maybe<DonateWhereInput>;
  some?: Maybe<DonateWhereInput>;
  none?: Maybe<DonateWhereInput>;
}

export interface DonateOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface DonateOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  date?: Maybe<SortOrder>;
  sum?: Maybe<SortOrder>;
  title?: Maybe<SortOrder>;
  donatorId?: Maybe<SortOrder>;
  Donator?: Maybe<UserOrderByWithRelationInput>;
}

export interface DonateWhereInput {
  AND?: Maybe<Array<DonateWhereInput>>;
  OR?: Maybe<Array<DonateWhereInput>>;
  NOT?: Maybe<Array<DonateWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  date?: Maybe<DateTimeFilter>;
  sum?: Maybe<FloatFilter>;
  title?: Maybe<StringNullableFilter>;
  donatorId?: Maybe<StringNullableFilter>;
  Donator?: Maybe<UserWhereInput>;
}

export interface DonateWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}


export interface EnumCallRequestStatusFilter {
  equals?: Maybe<CallRequestStatus>;
  in?: Maybe<Array<CallRequestStatus>>;
  notIn?: Maybe<Array<CallRequestStatus>>;
  not?: Maybe<NestedEnumCallRequestStatusFilter>;
}

export interface EnumEthAccountTypeFilter {
  equals?: Maybe<EthAccountType>;
  in?: Maybe<Array<EthAccountType>>;
  notIn?: Maybe<Array<EthAccountType>>;
  not?: Maybe<NestedEnumEthAccountTypeFilter>;
}

export interface EnumEthTransactionTypeNullableFilter {
  equals?: Maybe<EthTransactionType>;
  in?: Maybe<Array<EthTransactionType>>;
  notIn?: Maybe<Array<EthTransactionType>>;
  not?: Maybe<NestedEnumEthTransactionTypeNullableFilter>;
}

export interface EnumGamemodeFilter {
  equals?: Maybe<Gamemode>;
  in?: Maybe<Array<Gamemode>>;
  notIn?: Maybe<Array<Gamemode>>;
  not?: Maybe<NestedEnumGamemodeFilter>;
}

export interface EnumImportStatusFilter {
  equals?: Maybe<ImportStatus>;
  in?: Maybe<Array<ImportStatus>>;
  notIn?: Maybe<Array<ImportStatus>>;
  not?: Maybe<NestedEnumImportStatusFilter>;
}

export interface EnumLetsadsSmsMessageStatusEnumNullableFilter {
  equals?: Maybe<LetsadsSmsMessageStatusEnum>;
  in?: Maybe<Array<LetsadsSmsMessageStatusEnum>>;
  notIn?: Maybe<Array<LetsadsSmsMessageStatusEnum>>;
  not?: Maybe<NestedEnumLetsadsSmsMessageStatusEnumNullableFilter>;
}

export interface EnumLetsadsSmsMessageStatusErrorCodeEnumNullableFilter {
  equals?: Maybe<LetsadsSmsMessageStatusErrorCodeEnum>;
  in?: Maybe<Array<LetsadsSmsMessageStatusErrorCodeEnum>>;
  notIn?: Maybe<Array<LetsadsSmsMessageStatusErrorCodeEnum>>;
  not?: Maybe<NestedEnumLetsadsSmsMessageStatusErrorCodeEnumNullableFilter>;
}

export interface EnumLetterStatusFilter {
  equals?: Maybe<LetterStatus>;
  in?: Maybe<Array<LetterStatus>>;
  notIn?: Maybe<Array<LetterStatus>>;
  not?: Maybe<NestedEnumLetterStatusFilter>;
}

export interface EnumLogLevelFilter {
  equals?: Maybe<LogLevel>;
  in?: Maybe<Array<LogLevel>>;
  notIn?: Maybe<Array<LogLevel>>;
  not?: Maybe<NestedEnumLogLevelFilter>;
}

export interface EnumMentorMenteeStatusFilter {
  equals?: Maybe<MentorMenteeStatus>;
  in?: Maybe<Array<MentorMenteeStatus>>;
  notIn?: Maybe<Array<MentorMenteeStatus>>;
  not?: Maybe<NestedEnumMentorMenteeStatusFilter>;
}

export interface EnumMessageTypeFilter {
  equals?: Maybe<MessageType>;
  in?: Maybe<Array<MessageType>>;
  notIn?: Maybe<Array<MessageType>>;
  not?: Maybe<NestedEnumMessageTypeFilter>;
}

export interface EnumNoticeTypeFilter {
  equals?: Maybe<NoticeType>;
  in?: Maybe<Array<NoticeType>>;
  notIn?: Maybe<Array<NoticeType>>;
  not?: Maybe<NestedEnumNoticeTypeFilter>;
}

export interface EnumProjectMemberStatusFilter {
  equals?: Maybe<ProjectMemberStatus>;
  in?: Maybe<Array<ProjectMemberStatus>>;
  notIn?: Maybe<Array<ProjectMemberStatus>>;
  not?: Maybe<NestedEnumProjectMemberStatusFilter>;
}

export interface EnumProjectStatusNullableFilter {
  equals?: Maybe<ProjectStatus>;
  in?: Maybe<Array<ProjectStatus>>;
  notIn?: Maybe<Array<ProjectStatus>>;
  not?: Maybe<NestedEnumProjectStatusNullableFilter>;
}

export interface EnumProjectTypeNullableFilter {
  equals?: Maybe<ProjectType>;
  in?: Maybe<Array<ProjectType>>;
  notIn?: Maybe<Array<ProjectType>>;
  not?: Maybe<NestedEnumProjectTypeNullableFilter>;
}

export interface EnumResourceTypeFilter {
  equals?: Maybe<ResourceType>;
  in?: Maybe<Array<ResourceType>>;
  notIn?: Maybe<Array<ResourceType>>;
  not?: Maybe<NestedEnumResourceTypeFilter>;
}

export interface EnumTagStatusFilter {
  equals?: Maybe<TagStatus>;
  in?: Maybe<Array<TagStatus>>;
  notIn?: Maybe<Array<TagStatus>>;
  not?: Maybe<NestedEnumTagStatusFilter>;
}

export interface EnumTaskMemberStatusFilter {
  equals?: Maybe<TaskMemberStatus>;
  in?: Maybe<Array<TaskMemberStatus>>;
  notIn?: Maybe<Array<TaskMemberStatus>>;
  not?: Maybe<NestedEnumTaskMemberStatusFilter>;
}

export interface EnumTaskReactionTypeFilter {
  equals?: Maybe<TaskReactionType>;
  in?: Maybe<Array<TaskReactionType>>;
  notIn?: Maybe<Array<TaskReactionType>>;
  not?: Maybe<NestedEnumTaskReactionTypeFilter>;
}

export interface EnumTaskStatusFilter {
  equals?: Maybe<TaskStatus>;
  in?: Maybe<Array<TaskStatus>>;
  notIn?: Maybe<Array<TaskStatus>>;
  not?: Maybe<NestedEnumTaskStatusFilter>;
}

export interface EnumTeamMemberStatusFilter {
  equals?: Maybe<TeamMemberStatus>;
  in?: Maybe<Array<TeamMemberStatus>>;
  notIn?: Maybe<Array<TeamMemberStatus>>;
  not?: Maybe<NestedEnumTeamMemberStatusFilter>;
}

export interface EnumTeamStatusFilter {
  equals?: Maybe<TeamStatus>;
  in?: Maybe<Array<TeamStatus>>;
  notIn?: Maybe<Array<TeamStatus>>;
  not?: Maybe<NestedEnumTeamStatusFilter>;
}

export interface EnumTechnologyLessonUserStatusFilter {
  equals?: Maybe<TechnologyLessonUserStatus>;
  in?: Maybe<Array<TechnologyLessonUserStatus>>;
  notIn?: Maybe<Array<TechnologyLessonUserStatus>>;
  not?: Maybe<NestedEnumTechnologyLessonUserStatusFilter>;
}

export interface EnumUserTechnologyHiringStatusNullableFilter {
  equals?: Maybe<UserTechnologyHiringStatus>;
  in?: Maybe<Array<UserTechnologyHiringStatus>>;
  notIn?: Maybe<Array<UserTechnologyHiringStatus>>;
  not?: Maybe<NestedEnumUserTechnologyHiringStatusNullableFilter>;
}

export interface EnumUserTechnologyStatusNullableFilter {
  equals?: Maybe<UserTechnologyStatus>;
  in?: Maybe<Array<UserTechnologyStatus>>;
  notIn?: Maybe<Array<UserTechnologyStatus>>;
  not?: Maybe<NestedEnumUserTechnologyStatusNullableFilter>;
}

export interface EnumWorldTypeFilter {
  equals?: Maybe<WorldType>;
  in?: Maybe<Array<WorldType>>;
  notIn?: Maybe<Array<WorldType>>;
  not?: Maybe<NestedEnumWorldTypeFilter>;
}

export interface EthAccount {
  __typename?: 'EthAccount';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['JSON']>;
  abi?: Maybe<Scalars['JSON']>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  balance?: Maybe<Scalars['Float']>;
}


export type EthAccountBalanceArgs = {
  convert?: Maybe<EthAmountConvert>;
};

export interface EthAccountCreateManyEthContractSourceInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<NullableJsonNullValueInput>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<NullableJsonNullValueInput>;
  Project?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
}

export interface EthAccountCreateManyEthContractSourceInputEnvelope {
  data?: Maybe<Array<EthAccountCreateManyEthContractSourceInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface EthAccountCreateManyProjectEthAccountToProjectInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<NullableJsonNullValueInput>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<NullableJsonNullValueInput>;
  ContractSource?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
}

export interface EthAccountCreateManyProjectEthAccountToProjectInputEnvelope {
  data?: Maybe<Array<EthAccountCreateManyProjectEthAccountToProjectInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface EthAccountCreateManyUserEthAccountCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<NullableJsonNullValueInput>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<NullableJsonNullValueInput>;
  ContractSource?: Maybe<Scalars['String']>;
  Project?: Maybe<Scalars['String']>;
}

export interface EthAccountCreateManyUserEthAccountCreatedByToUserInputEnvelope {
  data?: Maybe<Array<EthAccountCreateManyUserEthAccountCreatedByToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface EthAccountCreateNestedManyWithoutEthContractSourceInput {
  create?: Maybe<Array<EthAccountCreateWithoutEthContractSourceInput>>;
  connectOrCreate?: Maybe<Array<EthAccountCreateOrConnectWithoutEthContractSourceInput>>;
  createMany?: Maybe<EthAccountCreateManyEthContractSourceInputEnvelope>;
  connect?: Maybe<Array<EthAccountWhereUniqueInput>>;
}

export interface EthAccountCreateNestedManyWithoutProjectEthAccountToProjectInput {
  create?: Maybe<Array<EthAccountCreateWithoutProjectEthAccountToProjectInput>>;
  connectOrCreate?: Maybe<Array<EthAccountCreateOrConnectWithoutProjectEthAccountToProjectInput>>;
  createMany?: Maybe<EthAccountCreateManyProjectEthAccountToProjectInputEnvelope>;
  connect?: Maybe<Array<EthAccountWhereUniqueInput>>;
}

export interface EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput {
  create?: Maybe<Array<EthAccountCreateWithoutUserEthAccountCreatedByToUserInput>>;
  connectOrCreate?: Maybe<Array<EthAccountCreateOrConnectWithoutUserEthAccountCreatedByToUserInput>>;
  createMany?: Maybe<EthAccountCreateManyUserEthAccountCreatedByToUserInputEnvelope>;
  connect?: Maybe<Array<EthAccountWhereUniqueInput>>;
}

export interface EthAccountCreateNestedOneWithoutEthBlockInput {
  create?: Maybe<EthAccountCreateWithoutEthBlockInput>;
  connectOrCreate?: Maybe<EthAccountCreateOrConnectWithoutEthBlockInput>;
  connect?: Maybe<EthAccountWhereUniqueInput>;
}

export interface EthAccountCreateNestedOneWithoutEthTransactionEthAccountToEthTransactionAccountInput {
  create?: Maybe<EthAccountCreateWithoutEthTransactionEthAccountToEthTransactionAccountInput>;
  connectOrCreate?: Maybe<EthAccountCreateOrConnectWithoutEthTransactionEthAccountToEthTransactionAccountInput>;
  connect?: Maybe<EthAccountWhereUniqueInput>;
}

export interface EthAccountCreateNestedOneWithoutEthTransactionEthAccountToEthTransactionReceiverInput {
  create?: Maybe<EthAccountCreateWithoutEthTransactionEthAccountToEthTransactionReceiverInput>;
  connectOrCreate?: Maybe<EthAccountCreateOrConnectWithoutEthTransactionEthAccountToEthTransactionReceiverInput>;
  connect?: Maybe<EthAccountWhereUniqueInput>;
}

export interface EthAccountCreateNestedOneWithoutEthTransactionEthAccountToEthTransactionSenderInput {
  create?: Maybe<EthAccountCreateWithoutEthTransactionEthAccountToEthTransactionSenderInput>;
  connectOrCreate?: Maybe<EthAccountCreateOrConnectWithoutEthTransactionEthAccountToEthTransactionSenderInput>;
  connect?: Maybe<EthAccountWhereUniqueInput>;
}

export interface EthAccountCreateNestedOneWithoutResourceInput {
  create?: Maybe<EthAccountCreateWithoutResourceInput>;
  connectOrCreate?: Maybe<EthAccountCreateOrConnectWithoutResourceInput>;
  connect?: Maybe<EthAccountWhereUniqueInput>;
}

export interface EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput {
  create?: Maybe<EthAccountCreateWithoutUserEthAccountToUserEthAccountAuthedInput>;
  connectOrCreate?: Maybe<EthAccountCreateOrConnectWithoutUserEthAccountToUserEthAccountAuthedInput>;
  connect?: Maybe<EthAccountWhereUniqueInput>;
}

export interface EthAccountCreateOrConnectWithoutEthBlockInput {
  where: EthAccountWhereUniqueInput;
  create: EthAccountCreateWithoutEthBlockInput;
}

export interface EthAccountCreateOrConnectWithoutEthContractSourceInput {
  where: EthAccountWhereUniqueInput;
  create: EthAccountCreateWithoutEthContractSourceInput;
}

export interface EthAccountCreateOrConnectWithoutEthTransactionEthAccountToEthTransactionAccountInput {
  where: EthAccountWhereUniqueInput;
  create: EthAccountCreateWithoutEthTransactionEthAccountToEthTransactionAccountInput;
}

export interface EthAccountCreateOrConnectWithoutEthTransactionEthAccountToEthTransactionReceiverInput {
  where: EthAccountWhereUniqueInput;
  create: EthAccountCreateWithoutEthTransactionEthAccountToEthTransactionReceiverInput;
}

export interface EthAccountCreateOrConnectWithoutEthTransactionEthAccountToEthTransactionSenderInput {
  where: EthAccountWhereUniqueInput;
  create: EthAccountCreateWithoutEthTransactionEthAccountToEthTransactionSenderInput;
}

export interface EthAccountCreateOrConnectWithoutProjectEthAccountToProjectInput {
  where: EthAccountWhereUniqueInput;
  create: EthAccountCreateWithoutProjectEthAccountToProjectInput;
}

export interface EthAccountCreateOrConnectWithoutResourceInput {
  where: EthAccountWhereUniqueInput;
  create: EthAccountCreateWithoutResourceInput;
}

export interface EthAccountCreateOrConnectWithoutUserEthAccountToUserEthAccountAuthedInput {
  where: EthAccountWhereUniqueInput;
  create: EthAccountCreateWithoutUserEthAccountToUserEthAccountAuthedInput;
}

export interface EthAccountCreateOrConnectWithoutUserEthAccountCreatedByToUserInput {
  where: EthAccountWhereUniqueInput;
  create: EthAccountCreateWithoutUserEthAccountCreatedByToUserInput;
}

export interface EthAccountCreateWithoutEthBlockInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<NullableJsonNullValueInput>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<NullableJsonNullValueInput>;
  EthContractSource?: Maybe<EthContractSourceCreateNestedOneWithoutEthAccountInput>;
  User_EthAccount_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutEthAccountsEthAccountCreatedByToUserInput>;
  Project_EthAccountToProject?: Maybe<ProjectCreateNestedOneWithoutEthAccountsInput>;
  EthTransaction_EthAccountToEthTransaction_Account?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionAccountInput>;
  EthTransaction_EthAccountToEthTransaction_Receiver?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionReceiverInput>;
  EthTransaction_EthAccountToEthTransaction_Sender?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionSenderInput>;
  Resource?: Maybe<ResourceCreateNestedManyWithoutEthAccountEthAccountToResourceInput>;
  User_EthAccountToUser_EthAccountAuthed?: Maybe<UserCreateNestedManyWithoutEthAccountEthAccountToUserEthAccountAuthedInput>;
}

export interface EthAccountCreateWithoutEthContractSourceInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<NullableJsonNullValueInput>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<NullableJsonNullValueInput>;
  User_EthAccount_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutEthAccountsEthAccountCreatedByToUserInput>;
  Project_EthAccountToProject?: Maybe<ProjectCreateNestedOneWithoutEthAccountsInput>;
  EthBlock?: Maybe<EthBlockCreateNestedManyWithoutEthAccountInput>;
  EthTransaction_EthAccountToEthTransaction_Account?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionAccountInput>;
  EthTransaction_EthAccountToEthTransaction_Receiver?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionReceiverInput>;
  EthTransaction_EthAccountToEthTransaction_Sender?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionSenderInput>;
  Resource?: Maybe<ResourceCreateNestedManyWithoutEthAccountEthAccountToResourceInput>;
  User_EthAccountToUser_EthAccountAuthed?: Maybe<UserCreateNestedManyWithoutEthAccountEthAccountToUserEthAccountAuthedInput>;
}

export interface EthAccountCreateWithoutEthTransactionEthAccountToEthTransactionAccountInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<NullableJsonNullValueInput>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<NullableJsonNullValueInput>;
  EthContractSource?: Maybe<EthContractSourceCreateNestedOneWithoutEthAccountInput>;
  User_EthAccount_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutEthAccountsEthAccountCreatedByToUserInput>;
  Project_EthAccountToProject?: Maybe<ProjectCreateNestedOneWithoutEthAccountsInput>;
  EthBlock?: Maybe<EthBlockCreateNestedManyWithoutEthAccountInput>;
  EthTransaction_EthAccountToEthTransaction_Receiver?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionReceiverInput>;
  EthTransaction_EthAccountToEthTransaction_Sender?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionSenderInput>;
  Resource?: Maybe<ResourceCreateNestedManyWithoutEthAccountEthAccountToResourceInput>;
  User_EthAccountToUser_EthAccountAuthed?: Maybe<UserCreateNestedManyWithoutEthAccountEthAccountToUserEthAccountAuthedInput>;
}

export interface EthAccountCreateWithoutEthTransactionEthAccountToEthTransactionReceiverInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<NullableJsonNullValueInput>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<NullableJsonNullValueInput>;
  EthContractSource?: Maybe<EthContractSourceCreateNestedOneWithoutEthAccountInput>;
  User_EthAccount_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutEthAccountsEthAccountCreatedByToUserInput>;
  Project_EthAccountToProject?: Maybe<ProjectCreateNestedOneWithoutEthAccountsInput>;
  EthBlock?: Maybe<EthBlockCreateNestedManyWithoutEthAccountInput>;
  EthTransaction_EthAccountToEthTransaction_Account?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionAccountInput>;
  EthTransaction_EthAccountToEthTransaction_Sender?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionSenderInput>;
  Resource?: Maybe<ResourceCreateNestedManyWithoutEthAccountEthAccountToResourceInput>;
  User_EthAccountToUser_EthAccountAuthed?: Maybe<UserCreateNestedManyWithoutEthAccountEthAccountToUserEthAccountAuthedInput>;
}

export interface EthAccountCreateWithoutEthTransactionEthAccountToEthTransactionSenderInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<NullableJsonNullValueInput>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<NullableJsonNullValueInput>;
  EthContractSource?: Maybe<EthContractSourceCreateNestedOneWithoutEthAccountInput>;
  User_EthAccount_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutEthAccountsEthAccountCreatedByToUserInput>;
  Project_EthAccountToProject?: Maybe<ProjectCreateNestedOneWithoutEthAccountsInput>;
  EthBlock?: Maybe<EthBlockCreateNestedManyWithoutEthAccountInput>;
  EthTransaction_EthAccountToEthTransaction_Account?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionAccountInput>;
  EthTransaction_EthAccountToEthTransaction_Receiver?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionReceiverInput>;
  Resource?: Maybe<ResourceCreateNestedManyWithoutEthAccountEthAccountToResourceInput>;
  User_EthAccountToUser_EthAccountAuthed?: Maybe<UserCreateNestedManyWithoutEthAccountEthAccountToUserEthAccountAuthedInput>;
}

export interface EthAccountCreateWithoutProjectEthAccountToProjectInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<NullableJsonNullValueInput>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<NullableJsonNullValueInput>;
  EthContractSource?: Maybe<EthContractSourceCreateNestedOneWithoutEthAccountInput>;
  User_EthAccount_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutEthAccountsEthAccountCreatedByToUserInput>;
  EthBlock?: Maybe<EthBlockCreateNestedManyWithoutEthAccountInput>;
  EthTransaction_EthAccountToEthTransaction_Account?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionAccountInput>;
  EthTransaction_EthAccountToEthTransaction_Receiver?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionReceiverInput>;
  EthTransaction_EthAccountToEthTransaction_Sender?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionSenderInput>;
  Resource?: Maybe<ResourceCreateNestedManyWithoutEthAccountEthAccountToResourceInput>;
  User_EthAccountToUser_EthAccountAuthed?: Maybe<UserCreateNestedManyWithoutEthAccountEthAccountToUserEthAccountAuthedInput>;
}

export interface EthAccountCreateWithoutResourceInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<NullableJsonNullValueInput>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<NullableJsonNullValueInput>;
  EthContractSource?: Maybe<EthContractSourceCreateNestedOneWithoutEthAccountInput>;
  User_EthAccount_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutEthAccountsEthAccountCreatedByToUserInput>;
  Project_EthAccountToProject?: Maybe<ProjectCreateNestedOneWithoutEthAccountsInput>;
  EthBlock?: Maybe<EthBlockCreateNestedManyWithoutEthAccountInput>;
  EthTransaction_EthAccountToEthTransaction_Account?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionAccountInput>;
  EthTransaction_EthAccountToEthTransaction_Receiver?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionReceiverInput>;
  EthTransaction_EthAccountToEthTransaction_Sender?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionSenderInput>;
  User_EthAccountToUser_EthAccountAuthed?: Maybe<UserCreateNestedManyWithoutEthAccountEthAccountToUserEthAccountAuthedInput>;
}

export interface EthAccountCreateWithoutUserEthAccountToUserEthAccountAuthedInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<NullableJsonNullValueInput>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<NullableJsonNullValueInput>;
  EthContractSource?: Maybe<EthContractSourceCreateNestedOneWithoutEthAccountInput>;
  User_EthAccount_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutEthAccountsEthAccountCreatedByToUserInput>;
  Project_EthAccountToProject?: Maybe<ProjectCreateNestedOneWithoutEthAccountsInput>;
  EthBlock?: Maybe<EthBlockCreateNestedManyWithoutEthAccountInput>;
  EthTransaction_EthAccountToEthTransaction_Account?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionAccountInput>;
  EthTransaction_EthAccountToEthTransaction_Receiver?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionReceiverInput>;
  EthTransaction_EthAccountToEthTransaction_Sender?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionSenderInput>;
  Resource?: Maybe<ResourceCreateNestedManyWithoutEthAccountEthAccountToResourceInput>;
}

export interface EthAccountCreateWithoutUserEthAccountCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<NullableJsonNullValueInput>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<NullableJsonNullValueInput>;
  EthContractSource?: Maybe<EthContractSourceCreateNestedOneWithoutEthAccountInput>;
  Project_EthAccountToProject?: Maybe<ProjectCreateNestedOneWithoutEthAccountsInput>;
  EthBlock?: Maybe<EthBlockCreateNestedManyWithoutEthAccountInput>;
  EthTransaction_EthAccountToEthTransaction_Account?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionAccountInput>;
  EthTransaction_EthAccountToEthTransaction_Receiver?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionReceiverInput>;
  EthTransaction_EthAccountToEthTransaction_Sender?: Maybe<EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionSenderInput>;
  Resource?: Maybe<ResourceCreateNestedManyWithoutEthAccountEthAccountToResourceInput>;
  User_EthAccountToUser_EthAccountAuthed?: Maybe<UserCreateNestedManyWithoutEthAccountEthAccountToUserEthAccountAuthedInput>;
}

export interface EthAccountListRelationFilter {
  every?: Maybe<EthAccountWhereInput>;
  some?: Maybe<EthAccountWhereInput>;
  none?: Maybe<EthAccountWhereInput>;
}

export interface EthAccountOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface EthAccountOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  description?: Maybe<SortOrder>;
  address?: Maybe<SortOrder>;
  type?: Maybe<SortOrder>;
  source?: Maybe<SortOrder>;
  bytecode?: Maybe<SortOrder>;
  abi?: Maybe<SortOrder>;
  ContractSource?: Maybe<SortOrder>;
  Project?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  EthContractSource?: Maybe<EthContractSourceOrderByWithRelationInput>;
  User_EthAccount_CreatedByToUser?: Maybe<UserOrderByWithRelationInput>;
  Project_EthAccountToProject?: Maybe<ProjectOrderByWithRelationInput>;
  EthBlock?: Maybe<EthBlockOrderByRelationAggregateInput>;
  EthTransaction_EthAccountToEthTransaction_Account?: Maybe<EthTransactionOrderByRelationAggregateInput>;
  EthTransaction_EthAccountToEthTransaction_Receiver?: Maybe<EthTransactionOrderByRelationAggregateInput>;
  EthTransaction_EthAccountToEthTransaction_Sender?: Maybe<EthTransactionOrderByRelationAggregateInput>;
  Resource?: Maybe<ResourceOrderByRelationAggregateInput>;
  User_EthAccountToUser_EthAccountAuthed?: Maybe<UserOrderByRelationAggregateInput>;
}

export enum EthAccountType {
  ACCOUNT = 'Account',
  CONTRACT = 'Contract'
}

export interface EthAccountWhereInput {
  AND?: Maybe<Array<EthAccountWhereInput>>;
  OR?: Maybe<Array<EthAccountWhereInput>>;
  NOT?: Maybe<Array<EthAccountWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  name?: Maybe<StringNullableFilter>;
  description?: Maybe<JsonNullableFilter>;
  address?: Maybe<StringFilter>;
  type?: Maybe<EnumEthAccountTypeFilter>;
  source?: Maybe<StringNullableFilter>;
  bytecode?: Maybe<StringNullableFilter>;
  abi?: Maybe<JsonNullableFilter>;
  ContractSource?: Maybe<StringNullableFilter>;
  Project?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  EthContractSource?: Maybe<EthContractSourceWhereInput>;
  User_EthAccount_CreatedByToUser?: Maybe<UserWhereInput>;
  Project_EthAccountToProject?: Maybe<ProjectWhereInput>;
  EthBlock?: Maybe<EthBlockListRelationFilter>;
  EthTransaction_EthAccountToEthTransaction_Account?: Maybe<EthTransactionListRelationFilter>;
  EthTransaction_EthAccountToEthTransaction_Receiver?: Maybe<EthTransactionListRelationFilter>;
  EthTransaction_EthAccountToEthTransaction_Sender?: Maybe<EthTransactionListRelationFilter>;
  Resource?: Maybe<ResourceListRelationFilter>;
  User_EthAccountToUser_EthAccountAuthed?: Maybe<UserListRelationFilter>;
}

export interface EthAccountWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export enum EthAmountConvert {
  WEI = 'wei',
  KWEI = 'Kwei',
  MWEI = 'Mwei',
  GWEI = 'Gwei',
  NANO = 'nano',
  ETHER = 'ether',
  KETHER = 'kether',
  METHER = 'mether',
  GETHER = 'gether',
  TETHER = 'tether'
}

export interface EthBlockCreateManyEthAccountInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  hash: Scalars['String'];
  number: Scalars['Int'];
  difficulty?: Maybe<Scalars['Decimal']>;
  totalDifficulty?: Maybe<Scalars['Decimal']>;
  extraData?: Maybe<Scalars['String']>;
  gasLimit?: Maybe<Scalars['Decimal']>;
  gasUsed?: Maybe<Scalars['Decimal']>;
  mixHash?: Maybe<Scalars['String']>;
  nonce?: Maybe<Scalars['String']>;
  parentHash?: Maybe<Scalars['String']>;
  receiptsRoot?: Maybe<Scalars['String']>;
  sha3Uncles?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Int']>;
  stateRoot?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  transactionsRoot?: Maybe<Scalars['String']>;
  transactions_count?: Maybe<Scalars['Int']>;
}

export interface EthBlockCreateManyEthAccountInputEnvelope {
  data?: Maybe<Array<EthBlockCreateManyEthAccountInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface EthBlockCreateNestedManyWithoutEthAccountInput {
  create?: Maybe<Array<EthBlockCreateWithoutEthAccountInput>>;
  connectOrCreate?: Maybe<Array<EthBlockCreateOrConnectWithoutEthAccountInput>>;
  createMany?: Maybe<EthBlockCreateManyEthAccountInputEnvelope>;
  connect?: Maybe<Array<EthBlockWhereUniqueInput>>;
}

export interface EthBlockCreateNestedManyWithoutEthBlockAInput {
  create?: Maybe<Array<EthBlockCreateWithoutEthBlockAInput>>;
  connectOrCreate?: Maybe<Array<EthBlockCreateOrConnectWithoutEthBlockAInput>>;
  connect?: Maybe<Array<EthBlockWhereUniqueInput>>;
}

export interface EthBlockCreateNestedManyWithoutEthBlockBInput {
  create?: Maybe<Array<EthBlockCreateWithoutEthBlockBInput>>;
  connectOrCreate?: Maybe<Array<EthBlockCreateOrConnectWithoutEthBlockBInput>>;
  connect?: Maybe<Array<EthBlockWhereUniqueInput>>;
}

export interface EthBlockCreateNestedOneWithoutEthTransactionInput {
  create?: Maybe<EthBlockCreateWithoutEthTransactionInput>;
  connectOrCreate?: Maybe<EthBlockCreateOrConnectWithoutEthTransactionInput>;
  connect?: Maybe<EthBlockWhereUniqueInput>;
}

export interface EthBlockCreateOrConnectWithoutEthAccountInput {
  where: EthBlockWhereUniqueInput;
  create: EthBlockCreateWithoutEthAccountInput;
}

export interface EthBlockCreateOrConnectWithoutEthBlockAInput {
  where: EthBlockWhereUniqueInput;
  create: EthBlockCreateWithoutEthBlockAInput;
}

export interface EthBlockCreateOrConnectWithoutEthBlockBInput {
  where: EthBlockWhereUniqueInput;
  create: EthBlockCreateWithoutEthBlockBInput;
}

export interface EthBlockCreateOrConnectWithoutEthTransactionInput {
  where: EthBlockWhereUniqueInput;
  create: EthBlockCreateWithoutEthTransactionInput;
}

export interface EthBlockCreateWithoutEthAccountInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  hash: Scalars['String'];
  number: Scalars['Int'];
  difficulty?: Maybe<Scalars['Decimal']>;
  totalDifficulty?: Maybe<Scalars['Decimal']>;
  extraData?: Maybe<Scalars['String']>;
  gasLimit?: Maybe<Scalars['Decimal']>;
  gasUsed?: Maybe<Scalars['Decimal']>;
  mixHash?: Maybe<Scalars['String']>;
  nonce?: Maybe<Scalars['String']>;
  parentHash?: Maybe<Scalars['String']>;
  receiptsRoot?: Maybe<Scalars['String']>;
  sha3Uncles?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Int']>;
  stateRoot?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  transactionsRoot?: Maybe<Scalars['String']>;
  transactions_count?: Maybe<Scalars['Int']>;
  EthTransaction?: Maybe<EthTransactionCreateNestedManyWithoutEthBlockInput>;
  EthBlock_B?: Maybe<EthBlockCreateNestedManyWithoutEthBlockAInput>;
  EthBlock_A?: Maybe<EthBlockCreateNestedManyWithoutEthBlockBInput>;
}

export interface EthBlockCreateWithoutEthBlockAInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  hash: Scalars['String'];
  number: Scalars['Int'];
  difficulty?: Maybe<Scalars['Decimal']>;
  totalDifficulty?: Maybe<Scalars['Decimal']>;
  extraData?: Maybe<Scalars['String']>;
  gasLimit?: Maybe<Scalars['Decimal']>;
  gasUsed?: Maybe<Scalars['Decimal']>;
  mixHash?: Maybe<Scalars['String']>;
  nonce?: Maybe<Scalars['String']>;
  parentHash?: Maybe<Scalars['String']>;
  receiptsRoot?: Maybe<Scalars['String']>;
  sha3Uncles?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Int']>;
  stateRoot?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  transactionsRoot?: Maybe<Scalars['String']>;
  transactions_count?: Maybe<Scalars['Int']>;
  EthAccount?: Maybe<EthAccountCreateNestedOneWithoutEthBlockInput>;
  EthTransaction?: Maybe<EthTransactionCreateNestedManyWithoutEthBlockInput>;
  EthBlock_B?: Maybe<EthBlockCreateNestedManyWithoutEthBlockAInput>;
}

export interface EthBlockCreateWithoutEthBlockBInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  hash: Scalars['String'];
  number: Scalars['Int'];
  difficulty?: Maybe<Scalars['Decimal']>;
  totalDifficulty?: Maybe<Scalars['Decimal']>;
  extraData?: Maybe<Scalars['String']>;
  gasLimit?: Maybe<Scalars['Decimal']>;
  gasUsed?: Maybe<Scalars['Decimal']>;
  mixHash?: Maybe<Scalars['String']>;
  nonce?: Maybe<Scalars['String']>;
  parentHash?: Maybe<Scalars['String']>;
  receiptsRoot?: Maybe<Scalars['String']>;
  sha3Uncles?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Int']>;
  stateRoot?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  transactionsRoot?: Maybe<Scalars['String']>;
  transactions_count?: Maybe<Scalars['Int']>;
  EthAccount?: Maybe<EthAccountCreateNestedOneWithoutEthBlockInput>;
  EthTransaction?: Maybe<EthTransactionCreateNestedManyWithoutEthBlockInput>;
  EthBlock_A?: Maybe<EthBlockCreateNestedManyWithoutEthBlockBInput>;
}

export interface EthBlockCreateWithoutEthTransactionInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  hash: Scalars['String'];
  number: Scalars['Int'];
  difficulty?: Maybe<Scalars['Decimal']>;
  totalDifficulty?: Maybe<Scalars['Decimal']>;
  extraData?: Maybe<Scalars['String']>;
  gasLimit?: Maybe<Scalars['Decimal']>;
  gasUsed?: Maybe<Scalars['Decimal']>;
  mixHash?: Maybe<Scalars['String']>;
  nonce?: Maybe<Scalars['String']>;
  parentHash?: Maybe<Scalars['String']>;
  receiptsRoot?: Maybe<Scalars['String']>;
  sha3Uncles?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Int']>;
  stateRoot?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  transactionsRoot?: Maybe<Scalars['String']>;
  transactions_count?: Maybe<Scalars['Int']>;
  EthAccount?: Maybe<EthAccountCreateNestedOneWithoutEthBlockInput>;
  EthBlock_B?: Maybe<EthBlockCreateNestedManyWithoutEthBlockAInput>;
  EthBlock_A?: Maybe<EthBlockCreateNestedManyWithoutEthBlockBInput>;
}

export interface EthBlockListRelationFilter {
  every?: Maybe<EthBlockWhereInput>;
  some?: Maybe<EthBlockWhereInput>;
  none?: Maybe<EthBlockWhereInput>;
}

export interface EthBlockOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface EthBlockWhereInput {
  AND?: Maybe<Array<EthBlockWhereInput>>;
  OR?: Maybe<Array<EthBlockWhereInput>>;
  NOT?: Maybe<Array<EthBlockWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  hash?: Maybe<StringFilter>;
  number?: Maybe<IntFilter>;
  difficulty?: Maybe<DecimalNullableFilter>;
  totalDifficulty?: Maybe<DecimalNullableFilter>;
  extraData?: Maybe<StringNullableFilter>;
  gasLimit?: Maybe<DecimalNullableFilter>;
  gasUsed?: Maybe<DecimalNullableFilter>;
  mixHash?: Maybe<StringNullableFilter>;
  nonce?: Maybe<StringNullableFilter>;
  parentHash?: Maybe<StringNullableFilter>;
  receiptsRoot?: Maybe<StringNullableFilter>;
  sha3Uncles?: Maybe<StringNullableFilter>;
  size?: Maybe<IntNullableFilter>;
  stateRoot?: Maybe<StringNullableFilter>;
  date?: Maybe<DateTimeNullableFilter>;
  transactionsRoot?: Maybe<StringNullableFilter>;
  transactions_count?: Maybe<IntNullableFilter>;
  Miner?: Maybe<StringNullableFilter>;
  EthAccount?: Maybe<EthAccountWhereInput>;
  EthTransaction?: Maybe<EthTransactionListRelationFilter>;
  EthBlock_B?: Maybe<EthBlockListRelationFilter>;
  EthBlock_A?: Maybe<EthBlockListRelationFilter>;
}

export interface EthBlockWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
}

export interface EthContractSourceCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<NullableJsonNullValueInput>;
  source?: Maybe<Scalars['String']>;
}

export interface EthContractSourceCreateManyUserInputEnvelope {
  data?: Maybe<Array<EthContractSourceCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface EthContractSourceCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<EthContractSourceCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<EthContractSourceCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<EthContractSourceCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<EthContractSourceWhereUniqueInput>>;
}

export interface EthContractSourceCreateNestedOneWithoutEthAccountInput {
  create?: Maybe<EthContractSourceCreateWithoutEthAccountInput>;
  connectOrCreate?: Maybe<EthContractSourceCreateOrConnectWithoutEthAccountInput>;
  connect?: Maybe<EthContractSourceWhereUniqueInput>;
}

export interface EthContractSourceCreateOrConnectWithoutEthAccountInput {
  where: EthContractSourceWhereUniqueInput;
  create: EthContractSourceCreateWithoutEthAccountInput;
}

export interface EthContractSourceCreateOrConnectWithoutUserInput {
  where: EthContractSourceWhereUniqueInput;
  create: EthContractSourceCreateWithoutUserInput;
}

export interface EthContractSourceCreateWithoutEthAccountInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<NullableJsonNullValueInput>;
  source?: Maybe<Scalars['String']>;
  User?: Maybe<UserCreateNestedOneWithoutEthContractSourcesInput>;
}

export interface EthContractSourceCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<NullableJsonNullValueInput>;
  source?: Maybe<Scalars['String']>;
  EthAccount?: Maybe<EthAccountCreateNestedManyWithoutEthContractSourceInput>;
}

export interface EthContractSourceListRelationFilter {
  every?: Maybe<EthContractSourceWhereInput>;
  some?: Maybe<EthContractSourceWhereInput>;
  none?: Maybe<EthContractSourceWhereInput>;
}

export interface EthContractSourceOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface EthContractSourceOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  description?: Maybe<SortOrder>;
  source?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  User?: Maybe<UserOrderByWithRelationInput>;
  EthAccount?: Maybe<EthAccountOrderByRelationAggregateInput>;
}

export interface EthContractSourceWhereInput {
  AND?: Maybe<Array<EthContractSourceWhereInput>>;
  OR?: Maybe<Array<EthContractSourceWhereInput>>;
  NOT?: Maybe<Array<EthContractSourceWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  name?: Maybe<StringFilter>;
  description?: Maybe<JsonNullableFilter>;
  source?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  User?: Maybe<UserWhereInput>;
  EthAccount?: Maybe<EthAccountListRelationFilter>;
}

export interface EthContractSourceWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface EthTransactionCreateManyEthAccountEthAccountToEthTransactionAccountInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  chainId: Scalars['Int'];
  amount?: Maybe<Scalars['Decimal']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  address: Scalars['String'];
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
  Sender?: Maybe<Scalars['String']>;
  Block?: Maybe<Scalars['String']>;
  Receiver?: Maybe<Scalars['String']>;
}

export interface EthTransactionCreateManyEthAccountEthAccountToEthTransactionAccountInputEnvelope {
  data?: Maybe<Array<EthTransactionCreateManyEthAccountEthAccountToEthTransactionAccountInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface EthTransactionCreateManyEthAccountEthAccountToEthTransactionReceiverInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  chainId: Scalars['Int'];
  amount?: Maybe<Scalars['Decimal']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  address: Scalars['String'];
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
  Sender?: Maybe<Scalars['String']>;
  Block?: Maybe<Scalars['String']>;
  Account?: Maybe<Scalars['String']>;
}

export interface EthTransactionCreateManyEthAccountEthAccountToEthTransactionReceiverInputEnvelope {
  data?: Maybe<Array<EthTransactionCreateManyEthAccountEthAccountToEthTransactionReceiverInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface EthTransactionCreateManyEthAccountEthAccountToEthTransactionSenderInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  chainId: Scalars['Int'];
  amount?: Maybe<Scalars['Decimal']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  address: Scalars['String'];
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
  Block?: Maybe<Scalars['String']>;
  Receiver?: Maybe<Scalars['String']>;
  Account?: Maybe<Scalars['String']>;
}

export interface EthTransactionCreateManyEthAccountEthAccountToEthTransactionSenderInputEnvelope {
  data?: Maybe<Array<EthTransactionCreateManyEthAccountEthAccountToEthTransactionSenderInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface EthTransactionCreateManyEthBlockInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  chainId: Scalars['Int'];
  amount?: Maybe<Scalars['Decimal']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  address: Scalars['String'];
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
  Sender?: Maybe<Scalars['String']>;
  Receiver?: Maybe<Scalars['String']>;
  Account?: Maybe<Scalars['String']>;
}

export interface EthTransactionCreateManyEthBlockInputEnvelope {
  data?: Maybe<Array<EthTransactionCreateManyEthBlockInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionAccountInput {
  create?: Maybe<Array<EthTransactionCreateWithoutEthAccountEthAccountToEthTransactionAccountInput>>;
  connectOrCreate?: Maybe<Array<EthTransactionCreateOrConnectWithoutEthAccountEthAccountToEthTransactionAccountInput>>;
  createMany?: Maybe<EthTransactionCreateManyEthAccountEthAccountToEthTransactionAccountInputEnvelope>;
  connect?: Maybe<Array<EthTransactionWhereUniqueInput>>;
}

export interface EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionReceiverInput {
  create?: Maybe<Array<EthTransactionCreateWithoutEthAccountEthAccountToEthTransactionReceiverInput>>;
  connectOrCreate?: Maybe<Array<EthTransactionCreateOrConnectWithoutEthAccountEthAccountToEthTransactionReceiverInput>>;
  createMany?: Maybe<EthTransactionCreateManyEthAccountEthAccountToEthTransactionReceiverInputEnvelope>;
  connect?: Maybe<Array<EthTransactionWhereUniqueInput>>;
}

export interface EthTransactionCreateNestedManyWithoutEthAccountEthAccountToEthTransactionSenderInput {
  create?: Maybe<Array<EthTransactionCreateWithoutEthAccountEthAccountToEthTransactionSenderInput>>;
  connectOrCreate?: Maybe<Array<EthTransactionCreateOrConnectWithoutEthAccountEthAccountToEthTransactionSenderInput>>;
  createMany?: Maybe<EthTransactionCreateManyEthAccountEthAccountToEthTransactionSenderInputEnvelope>;
  connect?: Maybe<Array<EthTransactionWhereUniqueInput>>;
}

export interface EthTransactionCreateNestedManyWithoutEthBlockInput {
  create?: Maybe<Array<EthTransactionCreateWithoutEthBlockInput>>;
  connectOrCreate?: Maybe<Array<EthTransactionCreateOrConnectWithoutEthBlockInput>>;
  createMany?: Maybe<EthTransactionCreateManyEthBlockInputEnvelope>;
  connect?: Maybe<Array<EthTransactionWhereUniqueInput>>;
}

export interface EthTransactionCreateOrConnectWithoutEthAccountEthAccountToEthTransactionAccountInput {
  where: EthTransactionWhereUniqueInput;
  create: EthTransactionCreateWithoutEthAccountEthAccountToEthTransactionAccountInput;
}

export interface EthTransactionCreateOrConnectWithoutEthAccountEthAccountToEthTransactionReceiverInput {
  where: EthTransactionWhereUniqueInput;
  create: EthTransactionCreateWithoutEthAccountEthAccountToEthTransactionReceiverInput;
}

export interface EthTransactionCreateOrConnectWithoutEthAccountEthAccountToEthTransactionSenderInput {
  where: EthTransactionWhereUniqueInput;
  create: EthTransactionCreateWithoutEthAccountEthAccountToEthTransactionSenderInput;
}

export interface EthTransactionCreateOrConnectWithoutEthBlockInput {
  where: EthTransactionWhereUniqueInput;
  create: EthTransactionCreateWithoutEthBlockInput;
}

export interface EthTransactionCreateWithoutEthAccountEthAccountToEthTransactionAccountInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  chainId: Scalars['Int'];
  amount?: Maybe<Scalars['Decimal']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  address: Scalars['String'];
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
  EthBlock?: Maybe<EthBlockCreateNestedOneWithoutEthTransactionInput>;
  EthAccount_EthAccountToEthTransaction_Receiver?: Maybe<EthAccountCreateNestedOneWithoutEthTransactionEthAccountToEthTransactionReceiverInput>;
  EthAccount_EthAccountToEthTransaction_Sender?: Maybe<EthAccountCreateNestedOneWithoutEthTransactionEthAccountToEthTransactionSenderInput>;
}

export interface EthTransactionCreateWithoutEthAccountEthAccountToEthTransactionReceiverInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  chainId: Scalars['Int'];
  amount?: Maybe<Scalars['Decimal']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  address: Scalars['String'];
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
  EthAccount_EthAccountToEthTransaction_Account?: Maybe<EthAccountCreateNestedOneWithoutEthTransactionEthAccountToEthTransactionAccountInput>;
  EthBlock?: Maybe<EthBlockCreateNestedOneWithoutEthTransactionInput>;
  EthAccount_EthAccountToEthTransaction_Sender?: Maybe<EthAccountCreateNestedOneWithoutEthTransactionEthAccountToEthTransactionSenderInput>;
}

export interface EthTransactionCreateWithoutEthAccountEthAccountToEthTransactionSenderInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  chainId: Scalars['Int'];
  amount?: Maybe<Scalars['Decimal']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  address: Scalars['String'];
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
  EthAccount_EthAccountToEthTransaction_Account?: Maybe<EthAccountCreateNestedOneWithoutEthTransactionEthAccountToEthTransactionAccountInput>;
  EthBlock?: Maybe<EthBlockCreateNestedOneWithoutEthTransactionInput>;
  EthAccount_EthAccountToEthTransaction_Receiver?: Maybe<EthAccountCreateNestedOneWithoutEthTransactionEthAccountToEthTransactionReceiverInput>;
}

export interface EthTransactionCreateWithoutEthBlockInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  chainId: Scalars['Int'];
  amount?: Maybe<Scalars['Decimal']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  address: Scalars['String'];
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
  EthAccount_EthAccountToEthTransaction_Account?: Maybe<EthAccountCreateNestedOneWithoutEthTransactionEthAccountToEthTransactionAccountInput>;
  EthAccount_EthAccountToEthTransaction_Receiver?: Maybe<EthAccountCreateNestedOneWithoutEthTransactionEthAccountToEthTransactionReceiverInput>;
  EthAccount_EthAccountToEthTransaction_Sender?: Maybe<EthAccountCreateNestedOneWithoutEthTransactionEthAccountToEthTransactionSenderInput>;
}

export interface EthTransactionListRelationFilter {
  every?: Maybe<EthTransactionWhereInput>;
  some?: Maybe<EthTransactionWhereInput>;
  none?: Maybe<EthTransactionWhereInput>;
}

export interface EthTransactionOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export enum EthTransactionType {
  CONTRACTCREATE = 'ContractCreate',
  CONTRACTREAD = 'ContractRead',
  CONTRACTCALL = 'ContractCall',
  SENDETH = 'SendEth',
  SENDTOKEN = 'SendToken'
}

export interface EthTransactionWhereInput {
  AND?: Maybe<Array<EthTransactionWhereInput>>;
  OR?: Maybe<Array<EthTransactionWhereInput>>;
  NOT?: Maybe<Array<EthTransactionWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  chainId?: Maybe<IntFilter>;
  amount?: Maybe<DecimalNullableFilter>;
  input?: Maybe<StringNullableFilter>;
  index?: Maybe<IntNullableFilter>;
  address?: Maybe<StringFilter>;
  type?: Maybe<EnumEthTransactionTypeNullableFilter>;
  v?: Maybe<StringNullableFilter>;
  r?: Maybe<StringNullableFilter>;
  s?: Maybe<StringNullableFilter>;
  Sender?: Maybe<StringNullableFilter>;
  Block?: Maybe<StringNullableFilter>;
  Receiver?: Maybe<StringNullableFilter>;
  Account?: Maybe<StringNullableFilter>;
  EthAccount_EthAccountToEthTransaction_Account?: Maybe<EthAccountWhereInput>;
  EthBlock?: Maybe<EthBlockWhereInput>;
  EthAccount_EthAccountToEthTransaction_Receiver?: Maybe<EthAccountWhereInput>;
  EthAccount_EthAccountToEthTransaction_Sender?: Maybe<EthAccountWhereInput>;
}

export interface EthTransactionWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

/** Файл */
export interface File {
  __typename?: 'File';
  id: Scalars['String'];
  /** Когда создан */
  createdAt: Scalars['DateTime'];
  /** Когда обновлен */
  updatedAt: Scalars['DateTime'];
  /** Путь к файлу */
  path: Scalars['String'];
  /** Имя файла */
  filename?: Maybe<Scalars['String']>;
  /** Пользовательское имя файла */
  name?: Maybe<Scalars['String']>;
  /** Миме-тип */
  mimetype: Scalars['String'];
  /** Кодировка */
  encoding: Scalars['String'];
  /** Размер в байтах */
  size?: Maybe<Scalars['Float']>;
  /** Очередность */
  rank?: Maybe<Scalars['Int']>;
}

export interface FileCreateManyGalleryFileToGalleryInput {
  id?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  mimetype: Scalars['String'];
  encoding: Scalars['String'];
  hash?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Decimal']>;
  ImageResource?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface FileCreateManyGalleryFileToGalleryInputEnvelope {
  data?: Maybe<Array<FileCreateManyGalleryFileToGalleryInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface FileCreateManyResourceInput {
  id?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  mimetype: Scalars['String'];
  encoding: Scalars['String'];
  hash?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Decimal']>;
  CreatedBy?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  Gallery?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface FileCreateManyResourceInputEnvelope {
  data?: Maybe<Array<FileCreateManyResourceInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface FileCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  mimetype: Scalars['String'];
  encoding: Scalars['String'];
  hash?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Decimal']>;
  ImageResource?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  Gallery?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface FileCreateManyUserInputEnvelope {
  data?: Maybe<Array<FileCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface FileCreateNestedManyWithoutGalleryFileToGalleryInput {
  create?: Maybe<Array<FileCreateWithoutGalleryFileToGalleryInput>>;
  connectOrCreate?: Maybe<Array<FileCreateOrConnectWithoutGalleryFileToGalleryInput>>;
  createMany?: Maybe<FileCreateManyGalleryFileToGalleryInputEnvelope>;
  connect?: Maybe<Array<FileWhereUniqueInput>>;
}

export interface FileCreateNestedManyWithoutResourceInput {
  create?: Maybe<Array<FileCreateWithoutResourceInput>>;
  connectOrCreate?: Maybe<Array<FileCreateOrConnectWithoutResourceInput>>;
  createMany?: Maybe<FileCreateManyResourceInputEnvelope>;
  connect?: Maybe<Array<FileWhereUniqueInput>>;
}

export interface FileCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<FileCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<FileCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<FileCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<FileWhereUniqueInput>>;
}

export interface FileCreateNestedOneWithoutProjectsInput {
  create?: Maybe<FileCreateWithoutProjectsInput>;
  connectOrCreate?: Maybe<FileCreateOrConnectWithoutProjectsInput>;
  connect?: Maybe<FileWhereUniqueInput>;
}

export interface FileCreateOrConnectWithoutGalleryFileToGalleryInput {
  where: FileWhereUniqueInput;
  create: FileCreateWithoutGalleryFileToGalleryInput;
}

export interface FileCreateOrConnectWithoutProjectsInput {
  where: FileWhereUniqueInput;
  create: FileCreateWithoutProjectsInput;
}

export interface FileCreateOrConnectWithoutResourceInput {
  where: FileWhereUniqueInput;
  create: FileCreateWithoutResourceInput;
}

export interface FileCreateOrConnectWithoutUserInput {
  where: FileWhereUniqueInput;
  create: FileCreateWithoutUserInput;
}

export interface FileCreateWithoutGalleryFileToGalleryInput {
  id?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  mimetype: Scalars['String'];
  encoding: Scalars['String'];
  hash?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Decimal']>;
  rank?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User?: Maybe<UserCreateNestedOneWithoutFilesInput>;
  Resource?: Maybe<ResourceCreateNestedOneWithoutFilesInput>;
  Projects?: Maybe<ProjectCreateNestedManyWithoutFileInput>;
}

export interface FileCreateWithoutProjectsInput {
  id?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  mimetype: Scalars['String'];
  encoding: Scalars['String'];
  hash?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Decimal']>;
  rank?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User?: Maybe<UserCreateNestedOneWithoutFilesInput>;
  Gallery_FileToGallery?: Maybe<GalleryCreateNestedOneWithoutFilesInput>;
  Resource?: Maybe<ResourceCreateNestedOneWithoutFilesInput>;
}

export interface FileCreateWithoutResourceInput {
  id?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  mimetype: Scalars['String'];
  encoding: Scalars['String'];
  hash?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Decimal']>;
  rank?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User?: Maybe<UserCreateNestedOneWithoutFilesInput>;
  Gallery_FileToGallery?: Maybe<GalleryCreateNestedOneWithoutFilesInput>;
  Projects?: Maybe<ProjectCreateNestedManyWithoutFileInput>;
}

export interface FileCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  mimetype: Scalars['String'];
  encoding: Scalars['String'];
  hash?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Decimal']>;
  rank?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  Gallery_FileToGallery?: Maybe<GalleryCreateNestedOneWithoutFilesInput>;
  Resource?: Maybe<ResourceCreateNestedOneWithoutFilesInput>;
  Projects?: Maybe<ProjectCreateNestedManyWithoutFileInput>;
}

export interface FileListRelationFilter {
  every?: Maybe<FileWhereInput>;
  some?: Maybe<FileWhereInput>;
  none?: Maybe<FileWhereInput>;
}

export interface FileOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface FileOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  path?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  filename?: Maybe<SortOrder>;
  mimetype?: Maybe<SortOrder>;
  encoding?: Maybe<SortOrder>;
  hash?: Maybe<SortOrder>;
  size?: Maybe<SortOrder>;
  ImageResource?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  rank?: Maybe<SortOrder>;
  Gallery?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  User?: Maybe<UserOrderByWithRelationInput>;
  Gallery_FileToGallery?: Maybe<GalleryOrderByWithRelationInput>;
  Resource?: Maybe<ResourceOrderByWithRelationInput>;
  Projects?: Maybe<ProjectOrderByRelationAggregateInput>;
}

export interface FileWhereInput {
  AND?: Maybe<Array<FileWhereInput>>;
  OR?: Maybe<Array<FileWhereInput>>;
  NOT?: Maybe<Array<FileWhereInput>>;
  id?: Maybe<StringFilter>;
  path?: Maybe<StringFilter>;
  name?: Maybe<StringNullableFilter>;
  filename?: Maybe<StringNullableFilter>;
  mimetype?: Maybe<StringFilter>;
  encoding?: Maybe<StringFilter>;
  hash?: Maybe<StringNullableFilter>;
  size?: Maybe<DecimalNullableFilter>;
  ImageResource?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  rank?: Maybe<IntNullableFilter>;
  Gallery?: Maybe<StringNullableFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  User?: Maybe<UserWhereInput>;
  Gallery_FileToGallery?: Maybe<GalleryWhereInput>;
  Resource?: Maybe<ResourceWhereInput>;
  Projects?: Maybe<ProjectListRelationFilter>;
}

export interface FileWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface FloatFilter {
  equals?: Maybe<Scalars['Float']>;
  in?: Maybe<Array<Scalars['Float']>>;
  notIn?: Maybe<Array<Scalars['Float']>>;
  lt?: Maybe<Scalars['Float']>;
  lte?: Maybe<Scalars['Float']>;
  gt?: Maybe<Scalars['Float']>;
  gte?: Maybe<Scalars['Float']>;
  not?: Maybe<NestedFloatFilter>;
}

export interface GalleryCreateManyResourceGalleryToResourceInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  CreatedBy: Scalars['String'];
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface GalleryCreateManyResourceGalleryToResourceInputEnvelope {
  data?: Maybe<Array<GalleryCreateManyResourceGalleryToResourceInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface GalleryCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  Resource?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface GalleryCreateManyUserInputEnvelope {
  data?: Maybe<Array<GalleryCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface GalleryCreateNestedManyWithoutResourceGalleryToResourceInput {
  create?: Maybe<Array<GalleryCreateWithoutResourceGalleryToResourceInput>>;
  connectOrCreate?: Maybe<Array<GalleryCreateOrConnectWithoutResourceGalleryToResourceInput>>;
  createMany?: Maybe<GalleryCreateManyResourceGalleryToResourceInputEnvelope>;
  connect?: Maybe<Array<GalleryWhereUniqueInput>>;
}

export interface GalleryCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<GalleryCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<GalleryCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<GalleryCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<GalleryWhereUniqueInput>>;
}

export interface GalleryCreateNestedOneWithoutFilesInput {
  create?: Maybe<GalleryCreateWithoutFilesInput>;
  connectOrCreate?: Maybe<GalleryCreateOrConnectWithoutFilesInput>;
  connect?: Maybe<GalleryWhereUniqueInput>;
}

export interface GalleryCreateOrConnectWithoutFilesInput {
  where: GalleryWhereUniqueInput;
  create: GalleryCreateWithoutFilesInput;
}

export interface GalleryCreateOrConnectWithoutResourceGalleryToResourceInput {
  where: GalleryWhereUniqueInput;
  create: GalleryCreateWithoutResourceGalleryToResourceInput;
}

export interface GalleryCreateOrConnectWithoutUserInput {
  where: GalleryWhereUniqueInput;
  create: GalleryCreateWithoutUserInput;
}

export interface GalleryCreateWithoutFilesInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User: UserCreateNestedOneWithoutGalleriesInput;
  Resource_GalleryToResource?: Maybe<ResourceCreateNestedOneWithoutGalleriesInput>;
}

export interface GalleryCreateWithoutResourceGalleryToResourceInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User: UserCreateNestedOneWithoutGalleriesInput;
  Files?: Maybe<FileCreateNestedManyWithoutGalleryFileToGalleryInput>;
}

export interface GalleryCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  Resource_GalleryToResource?: Maybe<ResourceCreateNestedOneWithoutGalleriesInput>;
  Files?: Maybe<FileCreateNestedManyWithoutGalleryFileToGalleryInput>;
}

export interface GalleryListRelationFilter {
  every?: Maybe<GalleryWhereInput>;
  some?: Maybe<GalleryWhereInput>;
  none?: Maybe<GalleryWhereInput>;
}

export interface GalleryOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface GalleryOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  Resource?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  User?: Maybe<UserOrderByWithRelationInput>;
  Resource_GalleryToResource?: Maybe<ResourceOrderByWithRelationInput>;
  Files?: Maybe<FileOrderByRelationAggregateInput>;
}

export interface GalleryWhereInput {
  AND?: Maybe<Array<GalleryWhereInput>>;
  OR?: Maybe<Array<GalleryWhereInput>>;
  NOT?: Maybe<Array<GalleryWhereInput>>;
  id?: Maybe<StringFilter>;
  name?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringFilter>;
  Resource?: Maybe<StringNullableFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  User?: Maybe<UserWhereInput>;
  Resource_GalleryToResource?: Maybe<ResourceWhereInput>;
  Files?: Maybe<FileListRelationFilter>;
}

export interface GalleryWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface GameCreateManyGameInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<Scalars['String']>;
  Tourney?: Maybe<Scalars['String']>;
}

export interface GameCreateManyGameInputEnvelope {
  data?: Maybe<Array<GameCreateManyGameInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface GameCreateManyTourneyGameToTourneyInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  Parent?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
}

export interface GameCreateManyTourneyGameToTourneyInputEnvelope {
  data?: Maybe<Array<GameCreateManyTourneyGameToTourneyInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface GameCreateManyUserGameToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  Parent?: Maybe<Scalars['String']>;
  Tourney?: Maybe<Scalars['String']>;
}

export interface GameCreateManyUserGameToUserInputEnvelope {
  data?: Maybe<Array<GameCreateManyUserGameToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface GameCreateNestedManyWithoutGameInput {
  create?: Maybe<Array<GameCreateWithoutGameInput>>;
  connectOrCreate?: Maybe<Array<GameCreateOrConnectWithoutGameInput>>;
  createMany?: Maybe<GameCreateManyGameInputEnvelope>;
  connect?: Maybe<Array<GameWhereUniqueInput>>;
}

export interface GameCreateNestedManyWithoutTeamInput {
  create?: Maybe<Array<GameCreateWithoutTeamInput>>;
  connectOrCreate?: Maybe<Array<GameCreateOrConnectWithoutTeamInput>>;
  connect?: Maybe<Array<GameWhereUniqueInput>>;
}

export interface GameCreateNestedManyWithoutTourneyGameToTourneyInput {
  create?: Maybe<Array<GameCreateWithoutTourneyGameToTourneyInput>>;
  connectOrCreate?: Maybe<Array<GameCreateOrConnectWithoutTourneyGameToTourneyInput>>;
  createMany?: Maybe<GameCreateManyTourneyGameToTourneyInputEnvelope>;
  connect?: Maybe<Array<GameWhereUniqueInput>>;
}

export interface GameCreateNestedManyWithoutUserGameToUserInput {
  create?: Maybe<Array<GameCreateWithoutUserGameToUserInput>>;
  connectOrCreate?: Maybe<Array<GameCreateOrConnectWithoutUserGameToUserInput>>;
  createMany?: Maybe<GameCreateManyUserGameToUserInputEnvelope>;
  connect?: Maybe<Array<GameWhereUniqueInput>>;
}

export interface GameCreateNestedManyWithoutUserGameUsersInput {
  create?: Maybe<Array<GameCreateWithoutUserGameUsersInput>>;
  connectOrCreate?: Maybe<Array<GameCreateOrConnectWithoutUserGameUsersInput>>;
  connect?: Maybe<Array<GameWhereUniqueInput>>;
}

export interface GameCreateNestedOneWithoutGameResultInput {
  create?: Maybe<GameCreateWithoutGameResultInput>;
  connectOrCreate?: Maybe<GameCreateOrConnectWithoutGameResultInput>;
  connect?: Maybe<GameWhereUniqueInput>;
}

export interface GameCreateNestedOneWithoutOtherGameInput {
  create?: Maybe<GameCreateWithoutOtherGameInput>;
  connectOrCreate?: Maybe<GameCreateOrConnectWithoutOtherGameInput>;
  connect?: Maybe<GameWhereUniqueInput>;
}

export interface GameCreateOrConnectWithoutGameInput {
  where: GameWhereUniqueInput;
  create: GameCreateWithoutGameInput;
}

export interface GameCreateOrConnectWithoutGameResultInput {
  where: GameWhereUniqueInput;
  create: GameCreateWithoutGameResultInput;
}

export interface GameCreateOrConnectWithoutOtherGameInput {
  where: GameWhereUniqueInput;
  create: GameCreateWithoutOtherGameInput;
}

export interface GameCreateOrConnectWithoutTeamInput {
  where: GameWhereUniqueInput;
  create: GameCreateWithoutTeamInput;
}

export interface GameCreateOrConnectWithoutTourneyGameToTourneyInput {
  where: GameWhereUniqueInput;
  create: GameCreateWithoutTourneyGameToTourneyInput;
}

export interface GameCreateOrConnectWithoutUserGameToUserInput {
  where: GameWhereUniqueInput;
  create: GameCreateWithoutUserGameToUserInput;
}

export interface GameCreateOrConnectWithoutUserGameUsersInput {
  where: GameWhereUniqueInput;
  create: GameCreateWithoutUserGameUsersInput;
}

export interface GameCreateWithoutGameInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  User_GameToUser?: Maybe<UserCreateNestedOneWithoutGamesGameToUserInput>;
  Tourney_GameToTourney?: Maybe<TourneyCreateNestedOneWithoutGamesInput>;
  other_Game?: Maybe<GameCreateNestedManyWithoutGameInput>;
  GameResult?: Maybe<GameResultCreateNestedManyWithoutGameGameToGameResultInput>;
  Team?: Maybe<TeamCreateNestedManyWithoutGamesInput>;
  User_GameUsers?: Maybe<UserCreateNestedManyWithoutGamesGameUsersInput>;
}

export interface GameCreateWithoutGameResultInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  User_GameToUser?: Maybe<UserCreateNestedOneWithoutGamesGameToUserInput>;
  Game?: Maybe<GameCreateNestedOneWithoutOtherGameInput>;
  Tourney_GameToTourney?: Maybe<TourneyCreateNestedOneWithoutGamesInput>;
  other_Game?: Maybe<GameCreateNestedManyWithoutGameInput>;
  Team?: Maybe<TeamCreateNestedManyWithoutGamesInput>;
  User_GameUsers?: Maybe<UserCreateNestedManyWithoutGamesGameUsersInput>;
}

export interface GameCreateWithoutOtherGameInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  User_GameToUser?: Maybe<UserCreateNestedOneWithoutGamesGameToUserInput>;
  Game?: Maybe<GameCreateNestedOneWithoutOtherGameInput>;
  Tourney_GameToTourney?: Maybe<TourneyCreateNestedOneWithoutGamesInput>;
  GameResult?: Maybe<GameResultCreateNestedManyWithoutGameGameToGameResultInput>;
  Team?: Maybe<TeamCreateNestedManyWithoutGamesInput>;
  User_GameUsers?: Maybe<UserCreateNestedManyWithoutGamesGameUsersInput>;
}

export interface GameCreateWithoutTeamInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  User_GameToUser?: Maybe<UserCreateNestedOneWithoutGamesGameToUserInput>;
  Game?: Maybe<GameCreateNestedOneWithoutOtherGameInput>;
  Tourney_GameToTourney?: Maybe<TourneyCreateNestedOneWithoutGamesInput>;
  other_Game?: Maybe<GameCreateNestedManyWithoutGameInput>;
  GameResult?: Maybe<GameResultCreateNestedManyWithoutGameGameToGameResultInput>;
  User_GameUsers?: Maybe<UserCreateNestedManyWithoutGamesGameUsersInput>;
}

export interface GameCreateWithoutTourneyGameToTourneyInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  User_GameToUser?: Maybe<UserCreateNestedOneWithoutGamesGameToUserInput>;
  Game?: Maybe<GameCreateNestedOneWithoutOtherGameInput>;
  other_Game?: Maybe<GameCreateNestedManyWithoutGameInput>;
  GameResult?: Maybe<GameResultCreateNestedManyWithoutGameGameToGameResultInput>;
  Team?: Maybe<TeamCreateNestedManyWithoutGamesInput>;
  User_GameUsers?: Maybe<UserCreateNestedManyWithoutGamesGameUsersInput>;
}

export interface GameCreateWithoutUserGameToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  Game?: Maybe<GameCreateNestedOneWithoutOtherGameInput>;
  Tourney_GameToTourney?: Maybe<TourneyCreateNestedOneWithoutGamesInput>;
  other_Game?: Maybe<GameCreateNestedManyWithoutGameInput>;
  GameResult?: Maybe<GameResultCreateNestedManyWithoutGameGameToGameResultInput>;
  Team?: Maybe<TeamCreateNestedManyWithoutGamesInput>;
  User_GameUsers?: Maybe<UserCreateNestedManyWithoutGamesGameUsersInput>;
}

export interface GameCreateWithoutUserGameUsersInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  User_GameToUser?: Maybe<UserCreateNestedOneWithoutGamesGameToUserInput>;
  Game?: Maybe<GameCreateNestedOneWithoutOtherGameInput>;
  Tourney_GameToTourney?: Maybe<TourneyCreateNestedOneWithoutGamesInput>;
  other_Game?: Maybe<GameCreateNestedManyWithoutGameInput>;
  GameResult?: Maybe<GameResultCreateNestedManyWithoutGameGameToGameResultInput>;
  Team?: Maybe<TeamCreateNestedManyWithoutGamesInput>;
}

export interface GameListRelationFilter {
  every?: Maybe<GameWhereInput>;
  some?: Maybe<GameWhereInput>;
  none?: Maybe<GameWhereInput>;
}

export interface GameOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface GameResultCreateManyGameGameToGameResultInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  date?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Decimal']>;
  CreatedBy?: Maybe<Scalars['String']>;
  Team?: Maybe<Scalars['String']>;
  User?: Maybe<Scalars['String']>;
}

export interface GameResultCreateManyGameGameToGameResultInputEnvelope {
  data?: Maybe<Array<GameResultCreateManyGameGameToGameResultInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface GameResultCreateManyTeamGameResultToTeamInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  date?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Decimal']>;
  CreatedBy?: Maybe<Scalars['String']>;
  Game?: Maybe<Scalars['String']>;
  User?: Maybe<Scalars['String']>;
}

export interface GameResultCreateManyTeamGameResultToTeamInputEnvelope {
  data?: Maybe<Array<GameResultCreateManyTeamGameResultToTeamInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface GameResultCreateManyUserGameResultCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  date?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Decimal']>;
  Team?: Maybe<Scalars['String']>;
  Game?: Maybe<Scalars['String']>;
  User?: Maybe<Scalars['String']>;
}

export interface GameResultCreateManyUserGameResultCreatedByToUserInputEnvelope {
  data?: Maybe<Array<GameResultCreateManyUserGameResultCreatedByToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface GameResultCreateManyUserGameResultUserToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  date?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Decimal']>;
  CreatedBy?: Maybe<Scalars['String']>;
  Team?: Maybe<Scalars['String']>;
  Game?: Maybe<Scalars['String']>;
}

export interface GameResultCreateManyUserGameResultUserToUserInputEnvelope {
  data?: Maybe<Array<GameResultCreateManyUserGameResultUserToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface GameResultCreateNestedManyWithoutGameGameToGameResultInput {
  create?: Maybe<Array<GameResultCreateWithoutGameGameToGameResultInput>>;
  connectOrCreate?: Maybe<Array<GameResultCreateOrConnectWithoutGameGameToGameResultInput>>;
  createMany?: Maybe<GameResultCreateManyGameGameToGameResultInputEnvelope>;
  connect?: Maybe<Array<GameResultWhereUniqueInput>>;
}

export interface GameResultCreateNestedManyWithoutTeamGameResultToTeamInput {
  create?: Maybe<Array<GameResultCreateWithoutTeamGameResultToTeamInput>>;
  connectOrCreate?: Maybe<Array<GameResultCreateOrConnectWithoutTeamGameResultToTeamInput>>;
  createMany?: Maybe<GameResultCreateManyTeamGameResultToTeamInputEnvelope>;
  connect?: Maybe<Array<GameResultWhereUniqueInput>>;
}

export interface GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput {
  create?: Maybe<Array<GameResultCreateWithoutUserGameResultCreatedByToUserInput>>;
  connectOrCreate?: Maybe<Array<GameResultCreateOrConnectWithoutUserGameResultCreatedByToUserInput>>;
  createMany?: Maybe<GameResultCreateManyUserGameResultCreatedByToUserInputEnvelope>;
  connect?: Maybe<Array<GameResultWhereUniqueInput>>;
}

export interface GameResultCreateNestedManyWithoutUserGameResultUserToUserInput {
  create?: Maybe<Array<GameResultCreateWithoutUserGameResultUserToUserInput>>;
  connectOrCreate?: Maybe<Array<GameResultCreateOrConnectWithoutUserGameResultUserToUserInput>>;
  createMany?: Maybe<GameResultCreateManyUserGameResultUserToUserInputEnvelope>;
  connect?: Maybe<Array<GameResultWhereUniqueInput>>;
}

export interface GameResultCreateOrConnectWithoutGameGameToGameResultInput {
  where: GameResultWhereUniqueInput;
  create: GameResultCreateWithoutGameGameToGameResultInput;
}

export interface GameResultCreateOrConnectWithoutTeamGameResultToTeamInput {
  where: GameResultWhereUniqueInput;
  create: GameResultCreateWithoutTeamGameResultToTeamInput;
}

export interface GameResultCreateOrConnectWithoutUserGameResultCreatedByToUserInput {
  where: GameResultWhereUniqueInput;
  create: GameResultCreateWithoutUserGameResultCreatedByToUserInput;
}

export interface GameResultCreateOrConnectWithoutUserGameResultUserToUserInput {
  where: GameResultWhereUniqueInput;
  create: GameResultCreateWithoutUserGameResultUserToUserInput;
}

export interface GameResultCreateWithoutGameGameToGameResultInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  date?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Decimal']>;
  User_GameResult_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutGameResultsGameResultCreatedByToUserInput>;
  Team_GameResultToTeam?: Maybe<TeamCreateNestedOneWithoutGameResultsInput>;
  User_GameResult_UserToUser?: Maybe<UserCreateNestedOneWithoutGameResultsGameResultUserToUserInput>;
}

export interface GameResultCreateWithoutTeamGameResultToTeamInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  date?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Decimal']>;
  User_GameResult_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutGameResultsGameResultCreatedByToUserInput>;
  Game_GameToGameResult?: Maybe<GameCreateNestedOneWithoutGameResultInput>;
  User_GameResult_UserToUser?: Maybe<UserCreateNestedOneWithoutGameResultsGameResultUserToUserInput>;
}

export interface GameResultCreateWithoutUserGameResultCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  date?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Decimal']>;
  Game_GameToGameResult?: Maybe<GameCreateNestedOneWithoutGameResultInput>;
  Team_GameResultToTeam?: Maybe<TeamCreateNestedOneWithoutGameResultsInput>;
  User_GameResult_UserToUser?: Maybe<UserCreateNestedOneWithoutGameResultsGameResultUserToUserInput>;
}

export interface GameResultCreateWithoutUserGameResultUserToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  date?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Decimal']>;
  User_GameResult_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutGameResultsGameResultCreatedByToUserInput>;
  Game_GameToGameResult?: Maybe<GameCreateNestedOneWithoutGameResultInput>;
  Team_GameResultToTeam?: Maybe<TeamCreateNestedOneWithoutGameResultsInput>;
}

export interface GameResultListRelationFilter {
  every?: Maybe<GameResultWhereInput>;
  some?: Maybe<GameResultWhereInput>;
  none?: Maybe<GameResultWhereInput>;
}

export interface GameResultOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface GameResultWhereInput {
  AND?: Maybe<Array<GameResultWhereInput>>;
  OR?: Maybe<Array<GameResultWhereInput>>;
  NOT?: Maybe<Array<GameResultWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  date?: Maybe<DateTimeNullableFilter>;
  name?: Maybe<StringNullableFilter>;
  value?: Maybe<DecimalNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  Team?: Maybe<StringNullableFilter>;
  Game?: Maybe<StringNullableFilter>;
  User?: Maybe<StringNullableFilter>;
  User_GameResult_CreatedByToUser?: Maybe<UserWhereInput>;
  Game_GameToGameResult?: Maybe<GameWhereInput>;
  Team_GameResultToTeam?: Maybe<TeamWhereInput>;
  User_GameResult_UserToUser?: Maybe<UserWhereInput>;
}

export interface GameResultWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface GameWhereInput {
  AND?: Maybe<Array<GameWhereInput>>;
  OR?: Maybe<Array<GameWhereInput>>;
  NOT?: Maybe<Array<GameWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  name?: Maybe<StringNullableFilter>;
  start_date?: Maybe<DateTimeNullableFilter>;
  end_date?: Maybe<DateTimeNullableFilter>;
  sequence?: Maybe<IntNullableFilter>;
  Parent?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  Tourney?: Maybe<StringNullableFilter>;
  User_GameToUser?: Maybe<UserWhereInput>;
  Game?: Maybe<GameWhereInput>;
  Tourney_GameToTourney?: Maybe<TourneyWhereInput>;
  other_Game?: Maybe<GameListRelationFilter>;
  GameResult?: Maybe<GameResultListRelationFilter>;
  Team?: Maybe<TeamListRelationFilter>;
  User_GameUsers?: Maybe<UserListRelationFilter>;
}

export interface GameWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export enum Gamemode {
  SURVIVAL = 'SURVIVAL',
  CREATIVE = 'CREATIVE',
  ADVENTURE = 'ADVENTURE',
  SPECTATOR = 'SPECTATOR'
}

export interface ImportCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  status?: Maybe<ImportStatus>;
}

export interface ImportCreateManyUserInputEnvelope {
  data?: Maybe<Array<ImportCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ImportCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<ImportCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<ImportCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<ImportCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<ImportWhereUniqueInput>>;
}

export interface ImportCreateOrConnectWithoutUserInput {
  where: ImportWhereUniqueInput;
  create: ImportCreateWithoutUserInput;
}

export interface ImportCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  status?: Maybe<ImportStatus>;
  Log?: Maybe<LogCreateNestedManyWithoutImportImportToLogInput>;
}

export interface ImportListRelationFilter {
  every?: Maybe<ImportWhereInput>;
  some?: Maybe<ImportWhereInput>;
  none?: Maybe<ImportWhereInput>;
}

export interface ImportOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export enum ImportStatus {
  CREATED = 'Created',
  STARTED = 'Started',
  ERROR = 'Error',
  COMPLETED = 'Completed',
  STOPED = 'Stoped'
}

export interface ImportWhereInput {
  AND?: Maybe<Array<ImportWhereInput>>;
  OR?: Maybe<Array<ImportWhereInput>>;
  NOT?: Maybe<Array<ImportWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  name?: Maybe<StringFilter>;
  status?: Maybe<EnumImportStatusFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  User?: Maybe<UserWhereInput>;
  Log?: Maybe<LogListRelationFilter>;
}

export interface ImportWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface IntFilter {
  equals?: Maybe<Scalars['Int']>;
  in?: Maybe<Array<Scalars['Int']>>;
  notIn?: Maybe<Array<Scalars['Int']>>;
  lt?: Maybe<Scalars['Int']>;
  lte?: Maybe<Scalars['Int']>;
  gt?: Maybe<Scalars['Int']>;
  gte?: Maybe<Scalars['Int']>;
  not?: Maybe<NestedIntFilter>;
}

export interface IntNullableFilter {
  equals?: Maybe<Scalars['Int']>;
  in?: Maybe<Array<Scalars['Int']>>;
  notIn?: Maybe<Array<Scalars['Int']>>;
  lt?: Maybe<Scalars['Int']>;
  lte?: Maybe<Scalars['Int']>;
  gt?: Maybe<Scalars['Int']>;
  gte?: Maybe<Scalars['Int']>;
  not?: Maybe<NestedIntNullableFilter>;
}

export interface InventoryCreateNestedOneWithoutPlayerInput {
  create?: Maybe<InventoryCreateWithoutPlayerInput>;
  connectOrCreate?: Maybe<InventoryCreateOrConnectWithoutPlayerInput>;
  connect?: Maybe<InventoryWhereUniqueInput>;
}

export interface InventoryCreateOrConnectWithoutPlayerInput {
  where: InventoryWhereUniqueInput;
  create: InventoryCreateWithoutPlayerInput;
}

export interface InventoryCreateWithoutPlayerInput {
  id?: Maybe<Scalars['String']>;
  cursor: Scalars['Int'];
  data: Scalars['String'];
}

export interface InventoryWhereInput {
  AND?: Maybe<Array<InventoryWhereInput>>;
  OR?: Maybe<Array<InventoryWhereInput>>;
  NOT?: Maybe<Array<InventoryWhereInput>>;
  id?: Maybe<StringFilter>;
  cursor?: Maybe<IntFilter>;
  data?: Maybe<StringFilter>;
  Player?: Maybe<PlayerListRelationFilter>;
}

export interface InventoryWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}


export enum JsonNullValueFilter {
  DBNULL = 'DbNull',
  JSONNULL = 'JsonNull',
  ANYNULL = 'AnyNull'
}

export enum JsonNullValueInput {
  JSONNULL = 'JsonNull'
}

export interface JsonNullableFilter {
  equals?: Maybe<JsonNullValueFilter>;
  not?: Maybe<JsonNullValueFilter>;
}

export interface LearnStrategy {
  __typename?: 'LearnStrategy';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  level: Scalars['UserTechnologyLevel'];
  createdById: Scalars['String'];
  CreatedBy?: Maybe<User>;
  LearnStrategyStages?: Maybe<Array<LearnStrategyStage>>;
  UserLearnStrategies?: Maybe<Array<UserLearnStrategy>>;
}

export interface LearnStrategyCreateInput {
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  level: Scalars['UserTechnologyLevel'];
}

export interface LearnStrategyCreateManyCreatedByInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  level: Scalars['Int'];
}

export interface LearnStrategyCreateManyCreatedByInputEnvelope {
  data?: Maybe<Array<LearnStrategyCreateManyCreatedByInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface LearnStrategyCreateNestedManyWithoutCreatedByInput {
  create?: Maybe<Array<LearnStrategyCreateWithoutCreatedByInput>>;
  connectOrCreate?: Maybe<Array<LearnStrategyCreateOrConnectWithoutCreatedByInput>>;
  createMany?: Maybe<LearnStrategyCreateManyCreatedByInputEnvelope>;
  connect?: Maybe<Array<LearnStrategyWhereUniqueInput>>;
}

export interface LearnStrategyCreateNestedOneWithoutLearnStrategyStagesInput {
  create?: Maybe<LearnStrategyCreateWithoutLearnStrategyStagesInput>;
  connectOrCreate?: Maybe<LearnStrategyCreateOrConnectWithoutLearnStrategyStagesInput>;
  connect?: Maybe<LearnStrategyWhereUniqueInput>;
}

export interface LearnStrategyCreateNestedOneWithoutLearnStrategyStagesTargetsInput {
  create?: Maybe<LearnStrategyCreateWithoutLearnStrategyStagesTargetsInput>;
  connectOrCreate?: Maybe<LearnStrategyCreateOrConnectWithoutLearnStrategyStagesTargetsInput>;
  connect?: Maybe<LearnStrategyWhereUniqueInput>;
}

export interface LearnStrategyCreateNestedOneWithoutUserLearnStrategiesInput {
  create?: Maybe<LearnStrategyCreateWithoutUserLearnStrategiesInput>;
  connectOrCreate?: Maybe<LearnStrategyCreateOrConnectWithoutUserLearnStrategiesInput>;
  connect?: Maybe<LearnStrategyWhereUniqueInput>;
}

export interface LearnStrategyCreateOrConnectWithoutCreatedByInput {
  where: LearnStrategyWhereUniqueInput;
  create: LearnStrategyCreateWithoutCreatedByInput;
}

export interface LearnStrategyCreateOrConnectWithoutLearnStrategyStagesInput {
  where: LearnStrategyWhereUniqueInput;
  create: LearnStrategyCreateWithoutLearnStrategyStagesInput;
}

export interface LearnStrategyCreateOrConnectWithoutLearnStrategyStagesTargetsInput {
  where: LearnStrategyWhereUniqueInput;
  create: LearnStrategyCreateWithoutLearnStrategyStagesTargetsInput;
}

export interface LearnStrategyCreateOrConnectWithoutUserLearnStrategiesInput {
  where: LearnStrategyWhereUniqueInput;
  create: LearnStrategyCreateWithoutUserLearnStrategiesInput;
}

export interface LearnStrategyCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  level: Scalars['Int'];
  LearnStrategyStages?: Maybe<LearnStrategyStageCreateNestedManyWithoutLearnStrategyInput>;
  LearnStrategyStagesTargets?: Maybe<LearnStrategyStageCreateNestedManyWithoutLearnStrategyTargetInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutLearnStrategyInput>;
}

export interface LearnStrategyCreateWithoutLearnStrategyStagesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  level: Scalars['Int'];
  CreatedBy: UserCreateNestedOneWithoutLearnStrategiesInput;
  LearnStrategyStagesTargets?: Maybe<LearnStrategyStageCreateNestedManyWithoutLearnStrategyTargetInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutLearnStrategyInput>;
}

export interface LearnStrategyCreateWithoutLearnStrategyStagesTargetsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  level: Scalars['Int'];
  CreatedBy: UserCreateNestedOneWithoutLearnStrategiesInput;
  LearnStrategyStages?: Maybe<LearnStrategyStageCreateNestedManyWithoutLearnStrategyInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutLearnStrategyInput>;
}

export interface LearnStrategyCreateWithoutUserLearnStrategiesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  level: Scalars['Int'];
  CreatedBy: UserCreateNestedOneWithoutLearnStrategiesInput;
  LearnStrategyStages?: Maybe<LearnStrategyStageCreateNestedManyWithoutLearnStrategyInput>;
  LearnStrategyStagesTargets?: Maybe<LearnStrategyStageCreateNestedManyWithoutLearnStrategyTargetInput>;
}

export interface LearnStrategyListRelationFilter {
  every?: Maybe<LearnStrategyWhereInput>;
  some?: Maybe<LearnStrategyWhereInput>;
  none?: Maybe<LearnStrategyWhereInput>;
}

export interface LearnStrategyOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface LearnStrategyOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  description?: Maybe<SortOrder>;
  level?: Maybe<SortOrder>;
  createdById?: Maybe<SortOrder>;
  CreatedBy?: Maybe<UserOrderByWithRelationInput>;
  LearnStrategyStages?: Maybe<LearnStrategyStageOrderByRelationAggregateInput>;
  LearnStrategyStagesTargets?: Maybe<LearnStrategyStageOrderByRelationAggregateInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyOrderByRelationAggregateInput>;
}

export interface LearnStrategyStage {
  __typename?: 'LearnStrategyStage';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  learnStrategyId: Scalars['String'];
  LearnStrategy?: Maybe<LearnStrategy>;
  learnStrategyTargetId?: Maybe<Scalars['String']>;
  LearnStrategyTarget?: Maybe<LearnStrategy>;
  technologyId?: Maybe<Scalars['String']>;
  Technology?: Maybe<Technology>;
  /** Если цель освоить технологию, то до какого уровня */
  level?: Maybe<Scalars['Int']>;
}

/** Этапом развития может быть или технология, или другая стратегия развития */
export interface LearnStrategyStageCreateInput {
  /** Стратегия развития, для которой создается этап */
  LearnStrategy: LearnStrategyStageCreateLearnStrategyInput;
  /** Стратегия развития */
  LearnStrategyTarget?: Maybe<LearnStrategyStageCreateLearnStrategyInput>;
  /** Технология */
  TechnologyTarget?: Maybe<LearnStrategyStageCreateTechnologyInput>;
}

/** Стратегия развития */
export interface LearnStrategyStageCreateLearnStrategyInput {
  id: Scalars['ID'];
}

export interface LearnStrategyStageCreateManyLearnStrategyInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  learnStrategyTargetId?: Maybe<Scalars['String']>;
  technologyId?: Maybe<Scalars['String']>;
  level?: Maybe<Scalars['Int']>;
}

export interface LearnStrategyStageCreateManyLearnStrategyInputEnvelope {
  data?: Maybe<Array<LearnStrategyStageCreateManyLearnStrategyInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface LearnStrategyStageCreateManyLearnStrategyTargetInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  learnStrategyId: Scalars['String'];
  technologyId?: Maybe<Scalars['String']>;
  level?: Maybe<Scalars['Int']>;
}

export interface LearnStrategyStageCreateManyLearnStrategyTargetInputEnvelope {
  data?: Maybe<Array<LearnStrategyStageCreateManyLearnStrategyTargetInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface LearnStrategyStageCreateManyTechnologyInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  learnStrategyId: Scalars['String'];
  learnStrategyTargetId?: Maybe<Scalars['String']>;
  level?: Maybe<Scalars['Int']>;
}

export interface LearnStrategyStageCreateManyTechnologyInputEnvelope {
  data?: Maybe<Array<LearnStrategyStageCreateManyTechnologyInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface LearnStrategyStageCreateNestedManyWithoutLearnStrategyInput {
  create?: Maybe<Array<LearnStrategyStageCreateWithoutLearnStrategyInput>>;
  connectOrCreate?: Maybe<Array<LearnStrategyStageCreateOrConnectWithoutLearnStrategyInput>>;
  createMany?: Maybe<LearnStrategyStageCreateManyLearnStrategyInputEnvelope>;
  connect?: Maybe<Array<LearnStrategyStageWhereUniqueInput>>;
}

export interface LearnStrategyStageCreateNestedManyWithoutLearnStrategyTargetInput {
  create?: Maybe<Array<LearnStrategyStageCreateWithoutLearnStrategyTargetInput>>;
  connectOrCreate?: Maybe<Array<LearnStrategyStageCreateOrConnectWithoutLearnStrategyTargetInput>>;
  createMany?: Maybe<LearnStrategyStageCreateManyLearnStrategyTargetInputEnvelope>;
  connect?: Maybe<Array<LearnStrategyStageWhereUniqueInput>>;
}

export interface LearnStrategyStageCreateNestedManyWithoutTechnologyInput {
  create?: Maybe<Array<LearnStrategyStageCreateWithoutTechnologyInput>>;
  connectOrCreate?: Maybe<Array<LearnStrategyStageCreateOrConnectWithoutTechnologyInput>>;
  createMany?: Maybe<LearnStrategyStageCreateManyTechnologyInputEnvelope>;
  connect?: Maybe<Array<LearnStrategyStageWhereUniqueInput>>;
}

export interface LearnStrategyStageCreateOrConnectWithoutLearnStrategyInput {
  where: LearnStrategyStageWhereUniqueInput;
  create: LearnStrategyStageCreateWithoutLearnStrategyInput;
}

export interface LearnStrategyStageCreateOrConnectWithoutLearnStrategyTargetInput {
  where: LearnStrategyStageWhereUniqueInput;
  create: LearnStrategyStageCreateWithoutLearnStrategyTargetInput;
}

export interface LearnStrategyStageCreateOrConnectWithoutTechnologyInput {
  where: LearnStrategyStageWhereUniqueInput;
  create: LearnStrategyStageCreateWithoutTechnologyInput;
}

/** Технология */
export interface LearnStrategyStageCreateTechnologyInput {
  id: Scalars['ID'];
  level: Scalars['UserTechnologyLevel'];
}

export interface LearnStrategyStageCreateWithoutLearnStrategyInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  LearnStrategyTarget?: Maybe<LearnStrategyCreateNestedOneWithoutLearnStrategyStagesTargetsInput>;
  Technology?: Maybe<TechnologyCreateNestedOneWithoutLearnStrategyStagesInput>;
  level?: Maybe<Scalars['Int']>;
}

export interface LearnStrategyStageCreateWithoutLearnStrategyTargetInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  LearnStrategy: LearnStrategyCreateNestedOneWithoutLearnStrategyStagesInput;
  Technology?: Maybe<TechnologyCreateNestedOneWithoutLearnStrategyStagesInput>;
  level?: Maybe<Scalars['Int']>;
}

export interface LearnStrategyStageCreateWithoutTechnologyInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  LearnStrategy: LearnStrategyCreateNestedOneWithoutLearnStrategyStagesInput;
  LearnStrategyTarget?: Maybe<LearnStrategyCreateNestedOneWithoutLearnStrategyStagesTargetsInput>;
  level?: Maybe<Scalars['Int']>;
}

export interface LearnStrategyStageListRelationFilter {
  every?: Maybe<LearnStrategyStageWhereInput>;
  some?: Maybe<LearnStrategyStageWhereInput>;
  none?: Maybe<LearnStrategyStageWhereInput>;
}

export interface LearnStrategyStageOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface LearnStrategyStageOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  learnStrategyId?: Maybe<SortOrder>;
  LearnStrategy?: Maybe<LearnStrategyOrderByWithRelationInput>;
  learnStrategyTargetId?: Maybe<SortOrder>;
  LearnStrategyTarget?: Maybe<LearnStrategyOrderByWithRelationInput>;
  technologyId?: Maybe<SortOrder>;
  Technology?: Maybe<TechnologyOrderByWithRelationInput>;
  level?: Maybe<SortOrder>;
}

export interface LearnStrategyStageWhereInput {
  AND?: Maybe<Array<LearnStrategyStageWhereInput>>;
  OR?: Maybe<Array<LearnStrategyStageWhereInput>>;
  NOT?: Maybe<Array<LearnStrategyStageWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  learnStrategyId?: Maybe<StringFilter>;
  LearnStrategy?: Maybe<LearnStrategyWhereInput>;
  learnStrategyTargetId?: Maybe<StringNullableFilter>;
  LearnStrategyTarget?: Maybe<LearnStrategyWhereInput>;
  technologyId?: Maybe<StringNullableFilter>;
  Technology?: Maybe<TechnologyWhereInput>;
  level?: Maybe<IntNullableFilter>;
}

export interface LearnStrategyStageWhereUniqueInput {
  id: Scalars['ID'];
}

export interface LearnStrategyUpdateInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
}

export interface LearnStrategyWhereInput {
  AND?: Maybe<Array<LearnStrategyWhereInput>>;
  OR?: Maybe<Array<LearnStrategyWhereInput>>;
  NOT?: Maybe<Array<LearnStrategyWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  name?: Maybe<StringFilter>;
  description?: Maybe<StringNullableFilter>;
  level?: Maybe<IntFilter>;
  createdById?: Maybe<StringFilter>;
  CreatedBy?: Maybe<UserWhereInput>;
  LearnStrategyStages?: Maybe<LearnStrategyStageListRelationFilter>;
  LearnStrategyStagesTargets?: Maybe<LearnStrategyStageListRelationFilter>;
  UserLearnStrategies?: Maybe<UserLearnStrategyListRelationFilter>;
}

export interface LearnStrategyWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface LetsadsSmsMessageStatusCreateNestedOneWithoutSmsMessageInput {
  create?: Maybe<LetsadsSmsMessageStatusCreateWithoutSmsMessageInput>;
  connectOrCreate?: Maybe<LetsadsSmsMessageStatusCreateOrConnectWithoutSmsMessageInput>;
  connect?: Maybe<LetsadsSmsMessageStatusWhereUniqueInput>;
}

export interface LetsadsSmsMessageStatusCreateOrConnectWithoutSmsMessageInput {
  where: LetsadsSmsMessageStatusWhereUniqueInput;
  create: LetsadsSmsMessageStatusCreateWithoutSmsMessageInput;
}

export interface LetsadsSmsMessageStatusCreateWithoutSmsMessageInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<LetsadsSmsMessageStatusEnum>;
  description?: Maybe<Scalars['String']>;
  errorCode?: Maybe<LetsadsSmsMessageStatusErrorCodeEnum>;
  LetsadsSmsMessageStatusItem?: Maybe<LetsadsSmsMessageStatusItemCreateNestedManyWithoutLetsadsSmsMessageStatusInput>;
}

export enum LetsadsSmsMessageStatusEnum {
  COMPLETE = 'Complete',
  ERROR = 'Error'
}

export enum LetsadsSmsMessageStatusErrorCodeEnum {
  NO_DATA = 'NO_DATA',
  WRONG_DATA_FORMAT = 'WRONG_DATA_FORMAT',
  REQUEST_FORMAT = 'REQUEST_FORMAT',
  AUTH_DATA = 'AUTH_DATA',
  API_DISABLED = 'API_DISABLED',
  USER_NOT_MODERATED = 'USER_NOT_MODERATED',
  INCORRECT_FROM = 'INCORRECT_FROM',
  INVALID_FROM = 'INVALID_FROM',
  MESSAGE_TOO_LONG = 'MESSAGE_TOO_LONG',
  NO_MESSAGE = 'NO_MESSAGE',
  MAX_MESSAGES_COUNT = 'MAX_MESSAGES_COUNT',
  NOT_ENOUGH_MONEY = 'NOT_ENOUGH_MONEY',
  UNKNOWN_ERROR = 'UNKNOWN_ERROR'
}

export interface LetsadsSmsMessageStatusItemCreateManyLetsadsSmsMessageStatusInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  sms_id: Scalars['Int'];
}

export interface LetsadsSmsMessageStatusItemCreateManyLetsadsSmsMessageStatusInputEnvelope {
  data?: Maybe<Array<LetsadsSmsMessageStatusItemCreateManyLetsadsSmsMessageStatusInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface LetsadsSmsMessageStatusItemCreateNestedManyWithoutLetsadsSmsMessageStatusInput {
  create?: Maybe<Array<LetsadsSmsMessageStatusItemCreateWithoutLetsadsSmsMessageStatusInput>>;
  connectOrCreate?: Maybe<Array<LetsadsSmsMessageStatusItemCreateOrConnectWithoutLetsadsSmsMessageStatusInput>>;
  createMany?: Maybe<LetsadsSmsMessageStatusItemCreateManyLetsadsSmsMessageStatusInputEnvelope>;
  connect?: Maybe<Array<LetsadsSmsMessageStatusItemWhereUniqueInput>>;
}

export interface LetsadsSmsMessageStatusItemCreateOrConnectWithoutLetsadsSmsMessageStatusInput {
  where: LetsadsSmsMessageStatusItemWhereUniqueInput;
  create: LetsadsSmsMessageStatusItemCreateWithoutLetsadsSmsMessageStatusInput;
}

export interface LetsadsSmsMessageStatusItemCreateWithoutLetsadsSmsMessageStatusInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  sms_id: Scalars['Int'];
}

export interface LetsadsSmsMessageStatusItemListRelationFilter {
  every?: Maybe<LetsadsSmsMessageStatusItemWhereInput>;
  some?: Maybe<LetsadsSmsMessageStatusItemWhereInput>;
  none?: Maybe<LetsadsSmsMessageStatusItemWhereInput>;
}

export interface LetsadsSmsMessageStatusItemWhereInput {
  AND?: Maybe<Array<LetsadsSmsMessageStatusItemWhereInput>>;
  OR?: Maybe<Array<LetsadsSmsMessageStatusItemWhereInput>>;
  NOT?: Maybe<Array<LetsadsSmsMessageStatusItemWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  sms_id?: Maybe<IntFilter>;
  Status?: Maybe<StringNullableFilter>;
  LetsadsSmsMessageStatus?: Maybe<LetsadsSmsMessageStatusWhereInput>;
}

export interface LetsadsSmsMessageStatusItemWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  sms_id?: Maybe<Scalars['Int']>;
}

export interface LetsadsSmsMessageStatusWhereInput {
  AND?: Maybe<Array<LetsadsSmsMessageStatusWhereInput>>;
  OR?: Maybe<Array<LetsadsSmsMessageStatusWhereInput>>;
  NOT?: Maybe<Array<LetsadsSmsMessageStatusWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  name?: Maybe<EnumLetsadsSmsMessageStatusEnumNullableFilter>;
  description?: Maybe<StringNullableFilter>;
  errorCode?: Maybe<EnumLetsadsSmsMessageStatusErrorCodeEnumNullableFilter>;
  LetsadsSmsMessageStatusItem?: Maybe<LetsadsSmsMessageStatusItemListRelationFilter>;
  SmsMessage?: Maybe<SmsMessageListRelationFilter>;
}

export interface LetsadsSmsMessageStatusWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface LetterCreateManyUserLetterToUserInput {
  id?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  subject: Scalars['String'];
  message: Scalars['String'];
  status?: Maybe<LetterStatus>;
  errorMessage?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  deleteOnSend?: Maybe<Scalars['Boolean']>;
  replyTo?: Maybe<Scalars['String']>;
  returnTo?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface LetterCreateManyUserLetterToUserInputEnvelope {
  data?: Maybe<Array<LetterCreateManyUserLetterToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface LetterCreateNestedManyWithoutUserLetterToUserInput {
  create?: Maybe<Array<LetterCreateWithoutUserLetterToUserInput>>;
  connectOrCreate?: Maybe<Array<LetterCreateOrConnectWithoutUserLetterToUserInput>>;
  createMany?: Maybe<LetterCreateManyUserLetterToUserInputEnvelope>;
  connect?: Maybe<Array<LetterWhereUniqueInput>>;
}

export interface LetterCreateOrConnectWithoutUserLetterToUserInput {
  where: LetterWhereUniqueInput;
  create: LetterCreateWithoutUserLetterToUserInput;
}

export interface LetterCreateWithoutUserLetterToUserInput {
  id?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  subject: Scalars['String'];
  message: Scalars['String'];
  status?: Maybe<LetterStatus>;
  errorMessage?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  deleteOnSend?: Maybe<Scalars['Boolean']>;
  replyTo?: Maybe<Scalars['String']>;
  returnTo?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface LetterListRelationFilter {
  every?: Maybe<LetterWhereInput>;
  some?: Maybe<LetterWhereInput>;
  none?: Maybe<LetterWhereInput>;
}

export interface LetterOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export enum LetterStatus {
  CREATED = 'Created',
  PROCESSING = 'Processing',
  SENDED = 'Sended',
  ERROR = 'Error'
}

export interface LetterWhereInput {
  AND?: Maybe<Array<LetterWhereInput>>;
  OR?: Maybe<Array<LetterWhereInput>>;
  NOT?: Maybe<Array<LetterWhereInput>>;
  id?: Maybe<StringFilter>;
  email?: Maybe<StringFilter>;
  subject?: Maybe<StringFilter>;
  message?: Maybe<StringFilter>;
  status?: Maybe<EnumLetterStatusFilter>;
  errorMessage?: Maybe<StringNullableFilter>;
  rank?: Maybe<IntNullableFilter>;
  deleteOnSend?: Maybe<BoolFilter>;
  replyTo?: Maybe<StringNullableFilter>;
  returnTo?: Maybe<StringNullableFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  User?: Maybe<StringNullableFilter>;
  User_LetterToUser?: Maybe<UserWhereInput>;
}

export interface LetterWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface LogCreateManyImportImportToLogInput {
  id?: Maybe<Scalars['String']>;
  level?: Maybe<LogLevel>;
  objectType?: Maybe<Scalars['String']>;
  message: Scalars['String'];
  stack?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface LogCreateManyImportImportToLogInputEnvelope {
  data?: Maybe<Array<LogCreateManyImportImportToLogInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface LogCreateNestedManyWithoutImportImportToLogInput {
  create?: Maybe<Array<LogCreateWithoutImportImportToLogInput>>;
  connectOrCreate?: Maybe<Array<LogCreateOrConnectWithoutImportImportToLogInput>>;
  createMany?: Maybe<LogCreateManyImportImportToLogInputEnvelope>;
  connect?: Maybe<Array<LogWhereUniqueInput>>;
}

export interface LogCreateOrConnectWithoutImportImportToLogInput {
  where: LogWhereUniqueInput;
  create: LogCreateWithoutImportImportToLogInput;
}

export interface LogCreateWithoutImportImportToLogInput {
  id?: Maybe<Scalars['String']>;
  level?: Maybe<LogLevel>;
  objectType?: Maybe<Scalars['String']>;
  message: Scalars['String'];
  stack?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export enum LogLevel {
  INFO = 'Info',
  NOTICE = 'Notice',
  WARNING = 'Warning',
  ERROR = 'Error',
  FATAL = 'Fatal'
}

export interface LogListRelationFilter {
  every?: Maybe<LogWhereInput>;
  some?: Maybe<LogWhereInput>;
  none?: Maybe<LogWhereInput>;
}

export interface LogWhereInput {
  AND?: Maybe<Array<LogWhereInput>>;
  OR?: Maybe<Array<LogWhereInput>>;
  NOT?: Maybe<Array<LogWhereInput>>;
  id?: Maybe<StringFilter>;
  level?: Maybe<EnumLogLevelFilter>;
  objectType?: Maybe<StringNullableFilter>;
  message?: Maybe<StringFilter>;
  stack?: Maybe<StringNullableFilter>;
  Import?: Maybe<StringNullableFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  Import_ImportToLog?: Maybe<ImportWhereInput>;
}

export interface LogWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface LogedInCreateManyUserLogedInToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  fake?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface LogedInCreateManyUserLogedInToUserInputEnvelope {
  data?: Maybe<Array<LogedInCreateManyUserLogedInToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface LogedInCreateNestedManyWithoutUserLogedInToUserInput {
  create?: Maybe<Array<LogedInCreateWithoutUserLogedInToUserInput>>;
  connectOrCreate?: Maybe<Array<LogedInCreateOrConnectWithoutUserLogedInToUserInput>>;
  createMany?: Maybe<LogedInCreateManyUserLogedInToUserInputEnvelope>;
  connect?: Maybe<Array<LogedInWhereUniqueInput>>;
}

export interface LogedInCreateOrConnectWithoutUserLogedInToUserInput {
  where: LogedInWhereUniqueInput;
  create: LogedInCreateWithoutUserLogedInToUserInput;
}

export interface LogedInCreateWithoutUserLogedInToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  fake?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface LogedInListRelationFilter {
  every?: Maybe<LogedInWhereInput>;
  some?: Maybe<LogedInWhereInput>;
  none?: Maybe<LogedInWhereInput>;
}

export interface LogedInOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface LogedInWhereInput {
  AND?: Maybe<Array<LogedInWhereInput>>;
  OR?: Maybe<Array<LogedInWhereInput>>;
  NOT?: Maybe<Array<LogedInWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  fake?: Maybe<BoolNullableFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  User?: Maybe<StringNullableFilter>;
  User_LogedInToUser?: Maybe<UserWhereInput>;
}

export interface LogedInWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

/** Связка Метнор-Менти */
export interface MentorMentee {
  __typename?: 'MentorMentee';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  status: MentorMenteeStatus;
  mentorId: Scalars['ID'];
  /** Ментор */
  Mentor?: Maybe<User>;
  menteeId: Scalars['ID'];
  /** Менти */
  Mentee?: Maybe<User>;
}

export interface MentorMenteeCreateInput {
  /** ID ментора */
  mentorId: Scalars['ID'];
}

export interface MentorMenteeCreateManyMenteeInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  status: MentorMenteeStatus;
  mentorId: Scalars['String'];
}

export interface MentorMenteeCreateManyMenteeInputEnvelope {
  data?: Maybe<Array<MentorMenteeCreateManyMenteeInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface MentorMenteeCreateManyMentorInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  status: MentorMenteeStatus;
  menteeId: Scalars['String'];
}

export interface MentorMenteeCreateManyMentorInputEnvelope {
  data?: Maybe<Array<MentorMenteeCreateManyMentorInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface MentorMenteeCreateNestedManyWithoutMenteeInput {
  create?: Maybe<Array<MentorMenteeCreateWithoutMenteeInput>>;
  connectOrCreate?: Maybe<Array<MentorMenteeCreateOrConnectWithoutMenteeInput>>;
  createMany?: Maybe<MentorMenteeCreateManyMenteeInputEnvelope>;
  connect?: Maybe<Array<MentorMenteeWhereUniqueInput>>;
}

export interface MentorMenteeCreateNestedManyWithoutMentorInput {
  create?: Maybe<Array<MentorMenteeCreateWithoutMentorInput>>;
  connectOrCreate?: Maybe<Array<MentorMenteeCreateOrConnectWithoutMentorInput>>;
  createMany?: Maybe<MentorMenteeCreateManyMentorInputEnvelope>;
  connect?: Maybe<Array<MentorMenteeWhereUniqueInput>>;
}

export interface MentorMenteeCreateOrConnectWithoutMenteeInput {
  where: MentorMenteeWhereUniqueInput;
  create: MentorMenteeCreateWithoutMenteeInput;
}

export interface MentorMenteeCreateOrConnectWithoutMentorInput {
  where: MentorMenteeWhereUniqueInput;
  create: MentorMenteeCreateWithoutMentorInput;
}

export interface MentorMenteeCreateWithoutMenteeInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  status: MentorMenteeStatus;
  Mentor: UserCreateNestedOneWithoutMentorMenteeMentorsInput;
}

export interface MentorMenteeCreateWithoutMentorInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  status: MentorMenteeStatus;
  Mentee: UserCreateNestedOneWithoutMentorMenteeMenteesInput;
}

export interface MentorMenteeListRelationFilter {
  every?: Maybe<MentorMenteeWhereInput>;
  some?: Maybe<MentorMenteeWhereInput>;
  none?: Maybe<MentorMenteeWhereInput>;
}

export interface MentorMenteeMentorIdMenteeIdCompoundUniqueInput {
  mentorId: Scalars['String'];
  menteeId: Scalars['String'];
}

export interface MentorMenteeOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface MentorMenteeOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  status?: Maybe<SortOrder>;
  mentorId?: Maybe<SortOrder>;
  Mentor?: Maybe<UserOrderByWithRelationInput>;
  menteeId?: Maybe<SortOrder>;
  Mentee?: Maybe<UserOrderByWithRelationInput>;
}

export enum MentorMenteeStatus {
  /** Отправлен запрос */
  REQUEST = 'Request',
  /** Запрос принят */
  ACCEPTED = 'Accepted',
  /** Запрос отклонен */
  REJECTED = 'Rejected'
}

export interface MentorMenteeWhereInput {
  AND?: Maybe<Array<MentorMenteeWhereInput>>;
  OR?: Maybe<Array<MentorMenteeWhereInput>>;
  NOT?: Maybe<Array<MentorMenteeWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  status?: Maybe<EnumMentorMenteeStatusFilter>;
  mentorId?: Maybe<StringFilter>;
  Mentor?: Maybe<UserWhereInput>;
  menteeId?: Maybe<StringFilter>;
  Mentee?: Maybe<UserWhereInput>;
}

export interface MentorMenteeWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  mentorId_menteeId?: Maybe<MentorMenteeMentorIdMenteeIdCompoundUniqueInput>;
}

export interface MessageCreateManyWorldInput {
  id?: Maybe<Scalars['String']>;
  type: MessageType;
  sender?: Maybe<Scalars['String']>;
  body: Scalars['String'];
}

export interface MessageCreateManyWorldInputEnvelope {
  data?: Maybe<Array<MessageCreateManyWorldInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface MessageCreateNestedManyWithoutWorldInput {
  create?: Maybe<Array<MessageCreateWithoutWorldInput>>;
  connectOrCreate?: Maybe<Array<MessageCreateOrConnectWithoutWorldInput>>;
  createMany?: Maybe<MessageCreateManyWorldInputEnvelope>;
  connect?: Maybe<Array<MessageWhereUniqueInput>>;
}

export interface MessageCreateOrConnectWithoutWorldInput {
  where: MessageWhereUniqueInput;
  create: MessageCreateWithoutWorldInput;
}

export interface MessageCreateWithoutWorldInput {
  id?: Maybe<Scalars['String']>;
  type: MessageType;
  sender?: Maybe<Scalars['String']>;
  body: Scalars['String'];
}

export interface MessageListRelationFilter {
  every?: Maybe<MessageWhereInput>;
  some?: Maybe<MessageWhereInput>;
  none?: Maybe<MessageWhereInput>;
}

export enum MessageType {
  ERROR = 'ERROR',
  PLAYER = 'PLAYER',
  SERVER = 'SERVER',
  INFO = 'INFO'
}

export interface MessageWhereInput {
  AND?: Maybe<Array<MessageWhereInput>>;
  OR?: Maybe<Array<MessageWhereInput>>;
  NOT?: Maybe<Array<MessageWhereInput>>;
  id?: Maybe<StringFilter>;
  type?: Maybe<EnumMessageTypeFilter>;
  sender?: Maybe<StringNullableFilter>;
  body?: Maybe<StringFilter>;
  world?: Maybe<StringNullableFilter>;
  World?: Maybe<WorldWhereInput>;
}

export interface MessageWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface Mutation {
  __typename?: 'Mutation';
  /** Загрузка файла */
  singleUpload?: Maybe<File>;
  /** Удаление ресурса */
  deleteResource: Resource;
  createBlogProcessor: ResourceResponse;
  updateBlogProcessor: ResourceResponse;
  createCommentProcessor: ResourceResponse;
  updateCommentProcessor: ResourceResponse;
  createTopicProcessor: ResourceResponse;
  updateTopicProcessor: ResourceResponse;
  createChatMessageProcessor: ChatMessageResponse;
  createCodeChallengeCompletionProcessor: CodeChallengeCompletionResponse;
  updateCodeChallengeCompletionProcessor: CodeChallengeCompletionResponse;
  createTimerProcessor: TimerResponse;
  updateTimerProcessor: TimerResponse;
  deleteNotice?: Maybe<Notice>;
  createProjectProcessor: ProjectResponse;
  updateProjectProcessor: ProjectResponse;
  createTaskProcessor: TaskResponse;
  updateTaskProcessor: TaskResponse;
  createTechnology: Technology;
  updateTechnology: Technology;
  createUserTechnologyProcessor: UserTechnologyResponse;
  updateUserTechnologyProcessor: UserTechnologyResponse;
  updateCodeChallenge: CodeChallenge;
  createTaskTechnologyProcessor: TaskTechnologyResponse;
  updateTaskTechnologyProcessor: TaskTechnologyResponse;
  createResetPasswordProcessor: ResetPasswordResponse;
  resetPasswordProcessor: AuthPayload;
  createLearnStrategy: LearnStrategy;
  updateLearnStrategy: LearnStrategy;
  createUserLearnStrategy: UserLearnStrategy;
  createLearnStrategyStage: LearnStrategyStage;
  deleteLearnStrategyStage: LearnStrategyStage;
  /** Создает заявку на менторство */
  createMentorMentee: MentorMentee;
  createOneDonate: Donate;
  /** Регистрация */
  signup: AuthPayload;
  /** Авторизация */
  signin: AuthPayload;
  updateUserProcessor: UserResponse;
  /** Заблокировать пользователя */
  blockUser: User;
  /** Разблокировать пользователя */
  unblockUser: User;
  /** Обновление пользователя */
  updateOneUser: User;
  /** Обновление текущего пользователя */
  updateCurrentUser: User;
}


export type MutationSingleUploadArgs = {
  file?: Maybe<Scalars['Upload']>;
  data?: Maybe<SingleUploadInput>;
};


export type MutationDeleteResourceArgs = {
  where: ResourceWhereUniqueInput;
};


export type MutationCreateBlogProcessorArgs = {
  data: BlogCreateInput;
};


export type MutationUpdateBlogProcessorArgs = {
  data: BlogUpdateInput;
  where: ResourceWhereUniqueInput;
};


export type MutationCreateCommentProcessorArgs = {
  data: CommentCreateInput;
};


export type MutationUpdateCommentProcessorArgs = {
  data: CommentUpdateInput;
  where: ResourceWhereUniqueInput;
};


export type MutationCreateTopicProcessorArgs = {
  data: TopicCreateInput;
};


export type MutationUpdateTopicProcessorArgs = {
  data: TopicUpdateInput;
  where: ResourceWhereUniqueInput;
};


export type MutationCreateChatMessageProcessorArgs = {
  data: ChatMessageCreateInput;
};


export type MutationCreateCodeChallengeCompletionProcessorArgs = {
  data: CodeChallengeCompletionCreateInput;
};


export type MutationUpdateCodeChallengeCompletionProcessorArgs = {
  data: CodeChallengeCompletionUpdateInput;
  where: CodeChallengeCompletionWhereUniqueInput;
};


export type MutationCreateTimerProcessorArgs = {
  data: TimerCreateInput;
};


export type MutationUpdateTimerProcessorArgs = {
  data: TimerUpdateInput;
  where: TimerWhereUniqueInput;
};


export type MutationDeleteNoticeArgs = {
  where: NoticeWhereUniqueInput;
};


export type MutationCreateProjectProcessorArgs = {
  data: ProjectCreateInput;
};


export type MutationUpdateProjectProcessorArgs = {
  data: ProjectUpdateInput;
  where: ProjectWhereUniqueInput;
};


export type MutationCreateTaskProcessorArgs = {
  data: TaskCreateInput;
};


export type MutationUpdateTaskProcessorArgs = {
  data: TaskUpdateInput;
  where: TaskWhereUniqueInput;
};


export type MutationCreateTechnologyArgs = {
  data: TechnologyCreateInput;
};


export type MutationUpdateTechnologyArgs = {
  data: TechnologyUpdateInput;
  where: TechnologyWhereUniqueInput;
};


export type MutationCreateUserTechnologyProcessorArgs = {
  data: UserTechnologyCreateInput;
};


export type MutationUpdateUserTechnologyProcessorArgs = {
  data: UserTechnologyUpdateInput;
  where: UserTechnologyWhereUniqueInput;
};


export type MutationUpdateCodeChallengeArgs = {
  where: CodeChallengeWhereUniqueInput;
  data: CodeChallengeUpdateInput;
};


export type MutationCreateTaskTechnologyProcessorArgs = {
  data: TaskTechnologyCreateInput;
};


export type MutationUpdateTaskTechnologyProcessorArgs = {
  data: TaskTechnologyUpdateInput;
  where: TaskTechnologyWhereUniqueInput;
};


export type MutationCreateResetPasswordProcessorArgs = {
  where: UserWhereUniqueInput;
};


export type MutationResetPasswordProcessorArgs = {
  where: ResetPasswordProcessorWhereInput;
};


export type MutationCreateLearnStrategyArgs = {
  data: LearnStrategyCreateInput;
};


export type MutationUpdateLearnStrategyArgs = {
  data: LearnStrategyUpdateInput;
  where: LearnStrategyWhereUniqueInput;
};


export type MutationCreateUserLearnStrategyArgs = {
  data: UserLearnStrategyCreateInput;
};


export type MutationCreateLearnStrategyStageArgs = {
  data: LearnStrategyStageCreateInput;
};


export type MutationDeleteLearnStrategyStageArgs = {
  where: LearnStrategyStageWhereUniqueInput;
};


export type MutationCreateMentorMenteeArgs = {
  data: MentorMenteeCreateInput;
};


export type MutationCreateOneDonateArgs = {
  data: DonateCreateInput;
};


export type MutationSignupArgs = {
  data: UserSignupDataInput;
};


export type MutationSigninArgs = {
  where: UserWhereUniqueInput;
  data: UserSigninDataInput;
};


export type MutationUpdateUserProcessorArgs = {
  data: UserUpdateInput;
};


export type MutationBlockUserArgs = {
  where: UserWhereUniqueInput;
};


export type MutationUnblockUserArgs = {
  where: UserWhereUniqueInput;
};


export type MutationUpdateOneUserArgs = {
  where: UserWhereUniqueInput;
  data: UserUpdateInput;
};


export type MutationUpdateCurrentUserArgs = {
  data: CurrentUserUpdateInput;
};

export interface NestedBoolFilter {
  equals?: Maybe<Scalars['Boolean']>;
  not?: Maybe<NestedBoolFilter>;
}

export interface NestedBoolNullableFilter {
  equals?: Maybe<Scalars['Boolean']>;
  not?: Maybe<NestedBoolNullableFilter>;
}

export interface NestedDateTimeFilter {
  equals?: Maybe<Scalars['DateTime']>;
  in?: Maybe<Array<Scalars['DateTime']>>;
  notIn?: Maybe<Array<Scalars['DateTime']>>;
  lt?: Maybe<Scalars['DateTime']>;
  lte?: Maybe<Scalars['DateTime']>;
  gt?: Maybe<Scalars['DateTime']>;
  gte?: Maybe<Scalars['DateTime']>;
  not?: Maybe<NestedDateTimeFilter>;
}

export interface NestedDateTimeNullableFilter {
  equals?: Maybe<Scalars['DateTime']>;
  in?: Maybe<Array<Scalars['DateTime']>>;
  notIn?: Maybe<Array<Scalars['DateTime']>>;
  lt?: Maybe<Scalars['DateTime']>;
  lte?: Maybe<Scalars['DateTime']>;
  gt?: Maybe<Scalars['DateTime']>;
  gte?: Maybe<Scalars['DateTime']>;
  not?: Maybe<NestedDateTimeNullableFilter>;
}

export interface NestedDecimalFilter {
  equals?: Maybe<Scalars['Decimal']>;
  in?: Maybe<Array<Scalars['Decimal']>>;
  notIn?: Maybe<Array<Scalars['Decimal']>>;
  lt?: Maybe<Scalars['Decimal']>;
  lte?: Maybe<Scalars['Decimal']>;
  gt?: Maybe<Scalars['Decimal']>;
  gte?: Maybe<Scalars['Decimal']>;
  not?: Maybe<NestedDecimalFilter>;
}

export interface NestedDecimalNullableFilter {
  equals?: Maybe<Scalars['Decimal']>;
  in?: Maybe<Array<Scalars['Decimal']>>;
  notIn?: Maybe<Array<Scalars['Decimal']>>;
  lt?: Maybe<Scalars['Decimal']>;
  lte?: Maybe<Scalars['Decimal']>;
  gt?: Maybe<Scalars['Decimal']>;
  gte?: Maybe<Scalars['Decimal']>;
  not?: Maybe<NestedDecimalNullableFilter>;
}

export interface NestedEnumCallRequestStatusFilter {
  equals?: Maybe<CallRequestStatus>;
  in?: Maybe<Array<CallRequestStatus>>;
  notIn?: Maybe<Array<CallRequestStatus>>;
  not?: Maybe<NestedEnumCallRequestStatusFilter>;
}

export interface NestedEnumEthAccountTypeFilter {
  equals?: Maybe<EthAccountType>;
  in?: Maybe<Array<EthAccountType>>;
  notIn?: Maybe<Array<EthAccountType>>;
  not?: Maybe<NestedEnumEthAccountTypeFilter>;
}

export interface NestedEnumEthTransactionTypeNullableFilter {
  equals?: Maybe<EthTransactionType>;
  in?: Maybe<Array<EthTransactionType>>;
  notIn?: Maybe<Array<EthTransactionType>>;
  not?: Maybe<NestedEnumEthTransactionTypeNullableFilter>;
}

export interface NestedEnumGamemodeFilter {
  equals?: Maybe<Gamemode>;
  in?: Maybe<Array<Gamemode>>;
  notIn?: Maybe<Array<Gamemode>>;
  not?: Maybe<NestedEnumGamemodeFilter>;
}

export interface NestedEnumImportStatusFilter {
  equals?: Maybe<ImportStatus>;
  in?: Maybe<Array<ImportStatus>>;
  notIn?: Maybe<Array<ImportStatus>>;
  not?: Maybe<NestedEnumImportStatusFilter>;
}

export interface NestedEnumLetsadsSmsMessageStatusEnumNullableFilter {
  equals?: Maybe<LetsadsSmsMessageStatusEnum>;
  in?: Maybe<Array<LetsadsSmsMessageStatusEnum>>;
  notIn?: Maybe<Array<LetsadsSmsMessageStatusEnum>>;
  not?: Maybe<NestedEnumLetsadsSmsMessageStatusEnumNullableFilter>;
}

export interface NestedEnumLetsadsSmsMessageStatusErrorCodeEnumNullableFilter {
  equals?: Maybe<LetsadsSmsMessageStatusErrorCodeEnum>;
  in?: Maybe<Array<LetsadsSmsMessageStatusErrorCodeEnum>>;
  notIn?: Maybe<Array<LetsadsSmsMessageStatusErrorCodeEnum>>;
  not?: Maybe<NestedEnumLetsadsSmsMessageStatusErrorCodeEnumNullableFilter>;
}

export interface NestedEnumLetterStatusFilter {
  equals?: Maybe<LetterStatus>;
  in?: Maybe<Array<LetterStatus>>;
  notIn?: Maybe<Array<LetterStatus>>;
  not?: Maybe<NestedEnumLetterStatusFilter>;
}

export interface NestedEnumLogLevelFilter {
  equals?: Maybe<LogLevel>;
  in?: Maybe<Array<LogLevel>>;
  notIn?: Maybe<Array<LogLevel>>;
  not?: Maybe<NestedEnumLogLevelFilter>;
}

export interface NestedEnumMentorMenteeStatusFilter {
  equals?: Maybe<MentorMenteeStatus>;
  in?: Maybe<Array<MentorMenteeStatus>>;
  notIn?: Maybe<Array<MentorMenteeStatus>>;
  not?: Maybe<NestedEnumMentorMenteeStatusFilter>;
}

export interface NestedEnumMessageTypeFilter {
  equals?: Maybe<MessageType>;
  in?: Maybe<Array<MessageType>>;
  notIn?: Maybe<Array<MessageType>>;
  not?: Maybe<NestedEnumMessageTypeFilter>;
}

export interface NestedEnumNoticeTypeFilter {
  equals?: Maybe<NoticeType>;
  in?: Maybe<Array<NoticeType>>;
  notIn?: Maybe<Array<NoticeType>>;
  not?: Maybe<NestedEnumNoticeTypeFilter>;
}

export interface NestedEnumProjectMemberStatusFilter {
  equals?: Maybe<ProjectMemberStatus>;
  in?: Maybe<Array<ProjectMemberStatus>>;
  notIn?: Maybe<Array<ProjectMemberStatus>>;
  not?: Maybe<NestedEnumProjectMemberStatusFilter>;
}

export interface NestedEnumProjectStatusNullableFilter {
  equals?: Maybe<ProjectStatus>;
  in?: Maybe<Array<ProjectStatus>>;
  notIn?: Maybe<Array<ProjectStatus>>;
  not?: Maybe<NestedEnumProjectStatusNullableFilter>;
}

export interface NestedEnumProjectTypeNullableFilter {
  equals?: Maybe<ProjectType>;
  in?: Maybe<Array<ProjectType>>;
  notIn?: Maybe<Array<ProjectType>>;
  not?: Maybe<NestedEnumProjectTypeNullableFilter>;
}

export interface NestedEnumResourceTypeFilter {
  equals?: Maybe<ResourceType>;
  in?: Maybe<Array<ResourceType>>;
  notIn?: Maybe<Array<ResourceType>>;
  not?: Maybe<NestedEnumResourceTypeFilter>;
}

export interface NestedEnumTagStatusFilter {
  equals?: Maybe<TagStatus>;
  in?: Maybe<Array<TagStatus>>;
  notIn?: Maybe<Array<TagStatus>>;
  not?: Maybe<NestedEnumTagStatusFilter>;
}

export interface NestedEnumTaskMemberStatusFilter {
  equals?: Maybe<TaskMemberStatus>;
  in?: Maybe<Array<TaskMemberStatus>>;
  notIn?: Maybe<Array<TaskMemberStatus>>;
  not?: Maybe<NestedEnumTaskMemberStatusFilter>;
}

export interface NestedEnumTaskReactionTypeFilter {
  equals?: Maybe<TaskReactionType>;
  in?: Maybe<Array<TaskReactionType>>;
  notIn?: Maybe<Array<TaskReactionType>>;
  not?: Maybe<NestedEnumTaskReactionTypeFilter>;
}

export interface NestedEnumTaskStatusFilter {
  equals?: Maybe<TaskStatus>;
  in?: Maybe<Array<TaskStatus>>;
  notIn?: Maybe<Array<TaskStatus>>;
  not?: Maybe<NestedEnumTaskStatusFilter>;
}

export interface NestedEnumTeamMemberStatusFilter {
  equals?: Maybe<TeamMemberStatus>;
  in?: Maybe<Array<TeamMemberStatus>>;
  notIn?: Maybe<Array<TeamMemberStatus>>;
  not?: Maybe<NestedEnumTeamMemberStatusFilter>;
}

export interface NestedEnumTeamStatusFilter {
  equals?: Maybe<TeamStatus>;
  in?: Maybe<Array<TeamStatus>>;
  notIn?: Maybe<Array<TeamStatus>>;
  not?: Maybe<NestedEnumTeamStatusFilter>;
}

export interface NestedEnumTechnologyLessonUserStatusFilter {
  equals?: Maybe<TechnologyLessonUserStatus>;
  in?: Maybe<Array<TechnologyLessonUserStatus>>;
  notIn?: Maybe<Array<TechnologyLessonUserStatus>>;
  not?: Maybe<NestedEnumTechnologyLessonUserStatusFilter>;
}

export interface NestedEnumUserTechnologyHiringStatusNullableFilter {
  equals?: Maybe<UserTechnologyHiringStatus>;
  in?: Maybe<Array<UserTechnologyHiringStatus>>;
  notIn?: Maybe<Array<UserTechnologyHiringStatus>>;
  not?: Maybe<NestedEnumUserTechnologyHiringStatusNullableFilter>;
}

export interface NestedEnumUserTechnologyStatusNullableFilter {
  equals?: Maybe<UserTechnologyStatus>;
  in?: Maybe<Array<UserTechnologyStatus>>;
  notIn?: Maybe<Array<UserTechnologyStatus>>;
  not?: Maybe<NestedEnumUserTechnologyStatusNullableFilter>;
}

export interface NestedEnumWorldTypeFilter {
  equals?: Maybe<WorldType>;
  in?: Maybe<Array<WorldType>>;
  notIn?: Maybe<Array<WorldType>>;
  not?: Maybe<NestedEnumWorldTypeFilter>;
}

export interface NestedFloatFilter {
  equals?: Maybe<Scalars['Float']>;
  in?: Maybe<Array<Scalars['Float']>>;
  notIn?: Maybe<Array<Scalars['Float']>>;
  lt?: Maybe<Scalars['Float']>;
  lte?: Maybe<Scalars['Float']>;
  gt?: Maybe<Scalars['Float']>;
  gte?: Maybe<Scalars['Float']>;
  not?: Maybe<NestedFloatFilter>;
}

export interface NestedIntFilter {
  equals?: Maybe<Scalars['Int']>;
  in?: Maybe<Array<Scalars['Int']>>;
  notIn?: Maybe<Array<Scalars['Int']>>;
  lt?: Maybe<Scalars['Int']>;
  lte?: Maybe<Scalars['Int']>;
  gt?: Maybe<Scalars['Int']>;
  gte?: Maybe<Scalars['Int']>;
  not?: Maybe<NestedIntFilter>;
}

export interface NestedIntNullableFilter {
  equals?: Maybe<Scalars['Int']>;
  in?: Maybe<Array<Scalars['Int']>>;
  notIn?: Maybe<Array<Scalars['Int']>>;
  lt?: Maybe<Scalars['Int']>;
  lte?: Maybe<Scalars['Int']>;
  gt?: Maybe<Scalars['Int']>;
  gte?: Maybe<Scalars['Int']>;
  not?: Maybe<NestedIntNullableFilter>;
}

export interface NestedStringFilter {
  equals?: Maybe<Scalars['String']>;
  in?: Maybe<Array<Scalars['String']>>;
  notIn?: Maybe<Array<Scalars['String']>>;
  lt?: Maybe<Scalars['String']>;
  lte?: Maybe<Scalars['String']>;
  gt?: Maybe<Scalars['String']>;
  gte?: Maybe<Scalars['String']>;
  contains?: Maybe<Scalars['String']>;
  startsWith?: Maybe<Scalars['String']>;
  endsWith?: Maybe<Scalars['String']>;
  not?: Maybe<NestedStringFilter>;
}

export interface NestedStringNullableFilter {
  equals?: Maybe<Scalars['String']>;
  in?: Maybe<Array<Scalars['String']>>;
  notIn?: Maybe<Array<Scalars['String']>>;
  lt?: Maybe<Scalars['String']>;
  lte?: Maybe<Scalars['String']>;
  gt?: Maybe<Scalars['String']>;
  gte?: Maybe<Scalars['String']>;
  contains?: Maybe<Scalars['String']>;
  startsWith?: Maybe<Scalars['String']>;
  endsWith?: Maybe<Scalars['String']>;
  not?: Maybe<NestedStringNullableFilter>;
}

export interface Notice {
  __typename?: 'Notice';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  type: NoticeType;
  CreatedBy?: Maybe<User>;
  User?: Maybe<User>;
  ChatMessage?: Maybe<ChatMessage>;
  ChatRoomInvitation?: Maybe<ChatRoomInvitation>;
}

export interface NoticeCreateManyChatMessageChatMessageToNoticeInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  type: NoticeType;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
}

export interface NoticeCreateManyChatMessageChatMessageToNoticeInputEnvelope {
  data?: Maybe<Array<NoticeCreateManyChatMessageChatMessageToNoticeInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface NoticeCreateManyUserNoticeCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  type: NoticeType;
  updatedAt?: Maybe<Scalars['DateTime']>;
  ChatMessage?: Maybe<Scalars['String']>;
  User?: Maybe<Scalars['String']>;
}

export interface NoticeCreateManyUserNoticeCreatedByToUserInputEnvelope {
  data?: Maybe<Array<NoticeCreateManyUserNoticeCreatedByToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface NoticeCreateManyUserNoticeUserToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  type: NoticeType;
  updatedAt?: Maybe<Scalars['DateTime']>;
  ChatMessage?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
}

export interface NoticeCreateManyUserNoticeUserToUserInputEnvelope {
  data?: Maybe<Array<NoticeCreateManyUserNoticeUserToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface NoticeCreateNestedManyWithoutChatMessageChatMessageToNoticeInput {
  create?: Maybe<Array<NoticeCreateWithoutChatMessageChatMessageToNoticeInput>>;
  connectOrCreate?: Maybe<Array<NoticeCreateOrConnectWithoutChatMessageChatMessageToNoticeInput>>;
  createMany?: Maybe<NoticeCreateManyChatMessageChatMessageToNoticeInputEnvelope>;
  connect?: Maybe<Array<NoticeWhereUniqueInput>>;
}

export interface NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput {
  create?: Maybe<Array<NoticeCreateWithoutUserNoticeCreatedByToUserInput>>;
  connectOrCreate?: Maybe<Array<NoticeCreateOrConnectWithoutUserNoticeCreatedByToUserInput>>;
  createMany?: Maybe<NoticeCreateManyUserNoticeCreatedByToUserInputEnvelope>;
  connect?: Maybe<Array<NoticeWhereUniqueInput>>;
}

export interface NoticeCreateNestedManyWithoutUserNoticeUserToUserInput {
  create?: Maybe<Array<NoticeCreateWithoutUserNoticeUserToUserInput>>;
  connectOrCreate?: Maybe<Array<NoticeCreateOrConnectWithoutUserNoticeUserToUserInput>>;
  createMany?: Maybe<NoticeCreateManyUserNoticeUserToUserInputEnvelope>;
  connect?: Maybe<Array<NoticeWhereUniqueInput>>;
}

export interface NoticeCreateNestedOneWithoutChatRoomInvitationsInput {
  create?: Maybe<NoticeCreateWithoutChatRoomInvitationsInput>;
  connectOrCreate?: Maybe<NoticeCreateOrConnectWithoutChatRoomInvitationsInput>;
  connect?: Maybe<NoticeWhereUniqueInput>;
}

export interface NoticeCreateOrConnectWithoutChatMessageChatMessageToNoticeInput {
  where: NoticeWhereUniqueInput;
  create: NoticeCreateWithoutChatMessageChatMessageToNoticeInput;
}

export interface NoticeCreateOrConnectWithoutChatRoomInvitationsInput {
  where: NoticeWhereUniqueInput;
  create: NoticeCreateWithoutChatRoomInvitationsInput;
}

export interface NoticeCreateOrConnectWithoutUserNoticeCreatedByToUserInput {
  where: NoticeWhereUniqueInput;
  create: NoticeCreateWithoutUserNoticeCreatedByToUserInput;
}

export interface NoticeCreateOrConnectWithoutUserNoticeUserToUserInput {
  where: NoticeWhereUniqueInput;
  create: NoticeCreateWithoutUserNoticeUserToUserInput;
}

export interface NoticeCreateWithoutChatMessageChatMessageToNoticeInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  type: NoticeType;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User_Notice_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutNoticesNoticeCreatedByToUserInput>;
  User_Notice_UserToUser?: Maybe<UserCreateNestedOneWithoutNoticesNoticeUserToUserInput>;
  ChatRoomInvitations?: Maybe<ChatRoomInvitationCreateNestedManyWithoutNoticeChatRoomInvitationToNoticeInput>;
}

export interface NoticeCreateWithoutChatRoomInvitationsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  type: NoticeType;
  updatedAt?: Maybe<Scalars['DateTime']>;
  ChatMessage_ChatMessageToNotice?: Maybe<ChatMessageCreateNestedOneWithoutNoticesInput>;
  User_Notice_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutNoticesNoticeCreatedByToUserInput>;
  User_Notice_UserToUser?: Maybe<UserCreateNestedOneWithoutNoticesNoticeUserToUserInput>;
}

export interface NoticeCreateWithoutUserNoticeCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  type: NoticeType;
  updatedAt?: Maybe<Scalars['DateTime']>;
  ChatMessage_ChatMessageToNotice?: Maybe<ChatMessageCreateNestedOneWithoutNoticesInput>;
  User_Notice_UserToUser?: Maybe<UserCreateNestedOneWithoutNoticesNoticeUserToUserInput>;
  ChatRoomInvitations?: Maybe<ChatRoomInvitationCreateNestedManyWithoutNoticeChatRoomInvitationToNoticeInput>;
}

export interface NoticeCreateWithoutUserNoticeUserToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  type: NoticeType;
  updatedAt?: Maybe<Scalars['DateTime']>;
  ChatMessage_ChatMessageToNotice?: Maybe<ChatMessageCreateNestedOneWithoutNoticesInput>;
  User_Notice_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutNoticesNoticeCreatedByToUserInput>;
  ChatRoomInvitations?: Maybe<ChatRoomInvitationCreateNestedManyWithoutNoticeChatRoomInvitationToNoticeInput>;
}

export interface NoticeListRelationFilter {
  every?: Maybe<NoticeWhereInput>;
  some?: Maybe<NoticeWhereInput>;
  none?: Maybe<NoticeWhereInput>;
}

export interface NoticeOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface NoticeOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  type?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  ChatMessage?: Maybe<SortOrder>;
  User?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  ChatMessage_ChatMessageToNotice?: Maybe<ChatMessageOrderByWithRelationInput>;
  User_Notice_CreatedByToUser?: Maybe<UserOrderByWithRelationInput>;
  User_Notice_UserToUser?: Maybe<UserOrderByWithRelationInput>;
  ChatRoomInvitations?: Maybe<ChatRoomInvitationOrderByRelationAggregateInput>;
}

export enum NoticeType {
  CHATMESSAGE = 'ChatMessage',
  CALL = 'Call',
  CALLREQUEST = 'CallRequest',
  CHATROOMINVITATION = 'ChatRoomInvitation'
}

export interface NoticeWhereInput {
  AND?: Maybe<Array<NoticeWhereInput>>;
  OR?: Maybe<Array<NoticeWhereInput>>;
  NOT?: Maybe<Array<NoticeWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  type?: Maybe<EnumNoticeTypeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  ChatMessage?: Maybe<StringNullableFilter>;
  User?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  ChatMessage_ChatMessageToNotice?: Maybe<ChatMessageWhereInput>;
  User_Notice_CreatedByToUser?: Maybe<UserWhereInput>;
  User_Notice_UserToUser?: Maybe<UserWhereInput>;
  ChatRoomInvitations?: Maybe<ChatRoomInvitationListRelationFilter>;
}

export interface NoticeWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface NotificationType {
  __typename?: 'NotificationType';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  code?: Maybe<Scalars['ID']>;
  comment?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
}

export interface NotificationTypeCreateManyUserNotificationTypeToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  code?: Maybe<Scalars['String']>;
  comment?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
}

export interface NotificationTypeCreateManyUserNotificationTypeToUserInputEnvelope {
  data?: Maybe<Array<NotificationTypeCreateManyUserNotificationTypeToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput {
  create?: Maybe<Array<NotificationTypeCreateWithoutUserNotificationTypeToUserInput>>;
  connectOrCreate?: Maybe<Array<NotificationTypeCreateOrConnectWithoutUserNotificationTypeToUserInput>>;
  createMany?: Maybe<NotificationTypeCreateManyUserNotificationTypeToUserInputEnvelope>;
  connect?: Maybe<Array<NotificationTypeWhereUniqueInput>>;
}

export interface NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput {
  create?: Maybe<Array<NotificationTypeCreateWithoutUserUserNotificationTypesInput>>;
  connectOrCreate?: Maybe<Array<NotificationTypeCreateOrConnectWithoutUserUserNotificationTypesInput>>;
  connect?: Maybe<Array<NotificationTypeWhereUniqueInput>>;
}

export interface NotificationTypeCreateOrConnectWithoutUserNotificationTypeToUserInput {
  where: NotificationTypeWhereUniqueInput;
  create: NotificationTypeCreateWithoutUserNotificationTypeToUserInput;
}

export interface NotificationTypeCreateOrConnectWithoutUserUserNotificationTypesInput {
  where: NotificationTypeWhereUniqueInput;
  create: NotificationTypeCreateWithoutUserUserNotificationTypesInput;
}

export interface NotificationTypeCreateWithoutUserNotificationTypeToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  code?: Maybe<Scalars['String']>;
  comment?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  User_UserNotificationTypes?: Maybe<UserCreateNestedManyWithoutNotificationTypesUserNotificationTypesInput>;
}

export interface NotificationTypeCreateWithoutUserUserNotificationTypesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  code?: Maybe<Scalars['String']>;
  comment?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  User_NotificationTypeToUser?: Maybe<UserCreateNestedOneWithoutNotificationTypesNotificationTypeToUserInput>;
}

export interface NotificationTypeListRelationFilter {
  every?: Maybe<NotificationTypeWhereInput>;
  some?: Maybe<NotificationTypeWhereInput>;
  none?: Maybe<NotificationTypeWhereInput>;
}

export interface NotificationTypeOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface NotificationTypeOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  code?: Maybe<SortOrder>;
  comment?: Maybe<SortOrder>;
  oldID?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  User_NotificationTypeToUser?: Maybe<UserOrderByWithRelationInput>;
  User_UserNotificationTypes?: Maybe<UserOrderByRelationAggregateInput>;
}

export interface NotificationTypeWhereInput {
  AND?: Maybe<Array<NotificationTypeWhereInput>>;
  OR?: Maybe<Array<NotificationTypeWhereInput>>;
  NOT?: Maybe<Array<NotificationTypeWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  name?: Maybe<StringFilter>;
  code?: Maybe<StringNullableFilter>;
  comment?: Maybe<StringNullableFilter>;
  oldID?: Maybe<IntNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  User_NotificationTypeToUser?: Maybe<UserWhereInput>;
  User_UserNotificationTypes?: Maybe<UserListRelationFilter>;
}

export interface NotificationTypeWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
}

export interface NotificationTypeUserNotificationTypesUpdateInput {
  connect?: Maybe<NotificationTypeWhereUniqueInput>;
  disconnect?: Maybe<NotificationTypeWhereUniqueInput>;
}

export enum NullableJsonNullValueInput {
  DBNULL = 'DbNull',
  JSONNULL = 'JsonNull'
}

export interface PlayerCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  isAdmin: Scalars['Boolean'];
  gamemode: Gamemode;
  lastLogin?: Maybe<Scalars['DateTime']>;
  x: Scalars['Decimal'];
  y: Scalars['Decimal'];
  z: Scalars['Decimal'];
  dirx: Scalars['Decimal'];
  diry: Scalars['Decimal'];
  world?: Maybe<Scalars['String']>;
  inventory?: Maybe<Scalars['String']>;
}

export interface PlayerCreateManyUserInputEnvelope {
  data?: Maybe<Array<PlayerCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface PlayerCreateManyWorldInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  isAdmin: Scalars['Boolean'];
  gamemode: Gamemode;
  lastLogin?: Maybe<Scalars['DateTime']>;
  x: Scalars['Decimal'];
  y: Scalars['Decimal'];
  z: Scalars['Decimal'];
  dirx: Scalars['Decimal'];
  diry: Scalars['Decimal'];
  inventory?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
}

export interface PlayerCreateManyWorldInputEnvelope {
  data?: Maybe<Array<PlayerCreateManyWorldInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface PlayerCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<PlayerCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<PlayerCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<PlayerCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<PlayerWhereUniqueInput>>;
}

export interface PlayerCreateNestedManyWithoutWorldInput {
  create?: Maybe<Array<PlayerCreateWithoutWorldInput>>;
  connectOrCreate?: Maybe<Array<PlayerCreateOrConnectWithoutWorldInput>>;
  createMany?: Maybe<PlayerCreateManyWorldInputEnvelope>;
  connect?: Maybe<Array<PlayerWhereUniqueInput>>;
}

export interface PlayerCreateOrConnectWithoutUserInput {
  where: PlayerWhereUniqueInput;
  create: PlayerCreateWithoutUserInput;
}

export interface PlayerCreateOrConnectWithoutWorldInput {
  where: PlayerWhereUniqueInput;
  create: PlayerCreateWithoutWorldInput;
}

export interface PlayerCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  isAdmin: Scalars['Boolean'];
  gamemode: Gamemode;
  lastLogin?: Maybe<Scalars['DateTime']>;
  x: Scalars['Decimal'];
  y: Scalars['Decimal'];
  z: Scalars['Decimal'];
  dirx: Scalars['Decimal'];
  diry: Scalars['Decimal'];
  Inventory?: Maybe<InventoryCreateNestedOneWithoutPlayerInput>;
  World?: Maybe<WorldCreateNestedOneWithoutPlayersInput>;
}

export interface PlayerCreateWithoutWorldInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  isAdmin: Scalars['Boolean'];
  gamemode: Gamemode;
  lastLogin?: Maybe<Scalars['DateTime']>;
  x: Scalars['Decimal'];
  y: Scalars['Decimal'];
  z: Scalars['Decimal'];
  dirx: Scalars['Decimal'];
  diry: Scalars['Decimal'];
  Inventory?: Maybe<InventoryCreateNestedOneWithoutPlayerInput>;
  User?: Maybe<UserCreateNestedOneWithoutPlayersInput>;
}

export interface PlayerListRelationFilter {
  every?: Maybe<PlayerWhereInput>;
  some?: Maybe<PlayerWhereInput>;
  none?: Maybe<PlayerWhereInput>;
}

export interface PlayerOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface PlayerWhereInput {
  AND?: Maybe<Array<PlayerWhereInput>>;
  OR?: Maybe<Array<PlayerWhereInput>>;
  NOT?: Maybe<Array<PlayerWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  isAdmin?: Maybe<BoolFilter>;
  gamemode?: Maybe<EnumGamemodeFilter>;
  lastLogin?: Maybe<DateTimeNullableFilter>;
  x?: Maybe<DecimalFilter>;
  y?: Maybe<DecimalFilter>;
  z?: Maybe<DecimalFilter>;
  dirx?: Maybe<DecimalFilter>;
  diry?: Maybe<DecimalFilter>;
  world?: Maybe<StringNullableFilter>;
  inventory?: Maybe<StringNullableFilter>;
  user?: Maybe<StringNullableFilter>;
  Inventory?: Maybe<InventoryWhereInput>;
  User?: Maybe<UserWhereInput>;
  World?: Maybe<WorldWhereInput>;
}

export interface PlayerWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface PositionCreateManyUserPositionToUserInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface PositionCreateManyUserPositionToUserInputEnvelope {
  data?: Maybe<Array<PositionCreateManyUserPositionToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface PositionCreateNestedManyWithoutUserPositionToUserInput {
  create?: Maybe<Array<PositionCreateWithoutUserPositionToUserInput>>;
  connectOrCreate?: Maybe<Array<PositionCreateOrConnectWithoutUserPositionToUserInput>>;
  createMany?: Maybe<PositionCreateManyUserPositionToUserInputEnvelope>;
  connect?: Maybe<Array<PositionWhereUniqueInput>>;
}

export interface PositionCreateNestedManyWithoutUserPositionUsersInput {
  create?: Maybe<Array<PositionCreateWithoutUserPositionUsersInput>>;
  connectOrCreate?: Maybe<Array<PositionCreateOrConnectWithoutUserPositionUsersInput>>;
  connect?: Maybe<Array<PositionWhereUniqueInput>>;
}

export interface PositionCreateOrConnectWithoutUserPositionToUserInput {
  where: PositionWhereUniqueInput;
  create: PositionCreateWithoutUserPositionToUserInput;
}

export interface PositionCreateOrConnectWithoutUserPositionUsersInput {
  where: PositionWhereUniqueInput;
  create: PositionCreateWithoutUserPositionUsersInput;
}

export interface PositionCreateWithoutUserPositionToUserInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User_PositionUsers?: Maybe<UserCreateNestedManyWithoutPositionsPositionUsersInput>;
}

export interface PositionCreateWithoutUserPositionUsersInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User_PositionToUser?: Maybe<UserCreateNestedOneWithoutPositionsPositionToUserInput>;
}

export interface PositionListRelationFilter {
  every?: Maybe<PositionWhereInput>;
  some?: Maybe<PositionWhereInput>;
  none?: Maybe<PositionWhereInput>;
}

export interface PositionOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface PositionWhereInput {
  AND?: Maybe<Array<PositionWhereInput>>;
  OR?: Maybe<Array<PositionWhereInput>>;
  NOT?: Maybe<Array<PositionWhereInput>>;
  id?: Maybe<StringFilter>;
  code?: Maybe<StringNullableFilter>;
  name?: Maybe<StringFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  User_PositionToUser?: Maybe<UserWhereInput>;
  User_PositionUsers?: Maybe<UserListRelationFilter>;
}

export interface PositionWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
}

export interface Project {
  __typename?: 'Project';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['JSON']>;
  contentText?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<User>;
  Resource?: Maybe<Resource>;
  Members?: Maybe<Array<ProjectMember>>;
  ProjectTasks?: Maybe<Array<ProjectTask>>;
}


export type ProjectProjectTasksArgs = {
  orderBy?: Maybe<ProjectTaskOrderByWithRelationInput>;
};

export interface ProjectCreateInput {
  name: Scalars['String'];
  url?: Maybe<Scalars['String']>;
}

export interface ProjectCreateManyChatRoomChatRoomToProjectInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<Scalars['String']>;
  Image?: Maybe<Scalars['String']>;
  Team?: Maybe<Scalars['String']>;
  Resource?: Maybe<Scalars['String']>;
  type?: Maybe<ProjectType>;
}

export interface ProjectCreateManyChatRoomChatRoomToProjectInputEnvelope {
  data?: Maybe<Array<ProjectCreateManyChatRoomChatRoomToProjectInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ProjectCreateManyFileInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<Scalars['String']>;
  ChatRoom?: Maybe<Scalars['String']>;
  Team?: Maybe<Scalars['String']>;
  Resource?: Maybe<Scalars['String']>;
  type?: Maybe<ProjectType>;
}

export interface ProjectCreateManyFileInputEnvelope {
  data?: Maybe<Array<ProjectCreateManyFileInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ProjectCreateManyResourceProjectResourceToResourceInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<Scalars['String']>;
  Image?: Maybe<Scalars['String']>;
  ChatRoom?: Maybe<Scalars['String']>;
  Team?: Maybe<Scalars['String']>;
  type?: Maybe<ProjectType>;
}

export interface ProjectCreateManyResourceProjectResourceToResourceInputEnvelope {
  data?: Maybe<Array<ProjectCreateManyResourceProjectResourceToResourceInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ProjectCreateManyTeamProjectToTeamInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<Scalars['String']>;
  Image?: Maybe<Scalars['String']>;
  ChatRoom?: Maybe<Scalars['String']>;
  Resource?: Maybe<Scalars['String']>;
  type?: Maybe<ProjectType>;
}

export interface ProjectCreateManyTeamProjectToTeamInputEnvelope {
  data?: Maybe<Array<ProjectCreateManyTeamProjectToTeamInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ProjectCreateManyUserProjectToUserInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Image?: Maybe<Scalars['String']>;
  ChatRoom?: Maybe<Scalars['String']>;
  Team?: Maybe<Scalars['String']>;
  Resource?: Maybe<Scalars['String']>;
  type?: Maybe<ProjectType>;
}

export interface ProjectCreateManyUserProjectToUserInputEnvelope {
  data?: Maybe<Array<ProjectCreateManyUserProjectToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ProjectCreateNestedManyWithoutChatRoomChatRoomToProjectInput {
  create?: Maybe<Array<ProjectCreateWithoutChatRoomChatRoomToProjectInput>>;
  connectOrCreate?: Maybe<Array<ProjectCreateOrConnectWithoutChatRoomChatRoomToProjectInput>>;
  createMany?: Maybe<ProjectCreateManyChatRoomChatRoomToProjectInputEnvelope>;
  connect?: Maybe<Array<ProjectWhereUniqueInput>>;
}

export interface ProjectCreateNestedManyWithoutFileInput {
  create?: Maybe<Array<ProjectCreateWithoutFileInput>>;
  connectOrCreate?: Maybe<Array<ProjectCreateOrConnectWithoutFileInput>>;
  createMany?: Maybe<ProjectCreateManyFileInputEnvelope>;
  connect?: Maybe<Array<ProjectWhereUniqueInput>>;
}

export interface ProjectCreateNestedManyWithoutResourceProjectResourceToResourceInput {
  create?: Maybe<Array<ProjectCreateWithoutResourceProjectResourceToResourceInput>>;
  connectOrCreate?: Maybe<Array<ProjectCreateOrConnectWithoutResourceProjectResourceToResourceInput>>;
  createMany?: Maybe<ProjectCreateManyResourceProjectResourceToResourceInputEnvelope>;
  connect?: Maybe<Array<ProjectWhereUniqueInput>>;
}

export interface ProjectCreateNestedManyWithoutTeamProjectCustomersInput {
  create?: Maybe<Array<ProjectCreateWithoutTeamProjectCustomersInput>>;
  connectOrCreate?: Maybe<Array<ProjectCreateOrConnectWithoutTeamProjectCustomersInput>>;
  connect?: Maybe<Array<ProjectWhereUniqueInput>>;
}

export interface ProjectCreateNestedManyWithoutTeamProjectToTeamInput {
  create?: Maybe<Array<ProjectCreateWithoutTeamProjectToTeamInput>>;
  connectOrCreate?: Maybe<Array<ProjectCreateOrConnectWithoutTeamProjectToTeamInput>>;
  createMany?: Maybe<ProjectCreateManyTeamProjectToTeamInputEnvelope>;
  connect?: Maybe<Array<ProjectWhereUniqueInput>>;
}

export interface ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput {
  create?: Maybe<Array<ProjectCreateWithoutUserPrismaProjectUsersInput>>;
  connectOrCreate?: Maybe<Array<ProjectCreateOrConnectWithoutUserPrismaProjectUsersInput>>;
  connect?: Maybe<Array<ProjectWhereUniqueInput>>;
}

export interface ProjectCreateNestedManyWithoutUserProjectToUserInput {
  create?: Maybe<Array<ProjectCreateWithoutUserProjectToUserInput>>;
  connectOrCreate?: Maybe<Array<ProjectCreateOrConnectWithoutUserProjectToUserInput>>;
  createMany?: Maybe<ProjectCreateManyUserProjectToUserInputEnvelope>;
  connect?: Maybe<Array<ProjectWhereUniqueInput>>;
}

export interface ProjectCreateNestedOneWithoutEthAccountsInput {
  create?: Maybe<ProjectCreateWithoutEthAccountsInput>;
  connectOrCreate?: Maybe<ProjectCreateOrConnectWithoutEthAccountsInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectCreateNestedOneWithoutProjectMembersInput {
  create?: Maybe<ProjectCreateWithoutProjectMembersInput>;
  connectOrCreate?: Maybe<ProjectCreateOrConnectWithoutProjectMembersInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectCreateNestedOneWithoutProjectTasksInput {
  create?: Maybe<ProjectCreateWithoutProjectTasksInput>;
  connectOrCreate?: Maybe<ProjectCreateOrConnectWithoutProjectTasksInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectCreateNestedOneWithoutResourcesProjectToResourcePrismaProjectInput {
  create?: Maybe<ProjectCreateWithoutResourcesProjectToResourcePrismaProjectInput>;
  connectOrCreate?: Maybe<ProjectCreateOrConnectWithoutResourcesProjectToResourcePrismaProjectInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectCreateNestedOneWithoutTemplatesProjectToTemplatePrismaProjectInput {
  create?: Maybe<ProjectCreateWithoutTemplatesProjectToTemplatePrismaProjectInput>;
  connectOrCreate?: Maybe<ProjectCreateOrConnectWithoutTemplatesProjectToTemplatePrismaProjectInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectCreateNestedOneWithoutTemplatesProjectToTemplateProjectInput {
  create?: Maybe<ProjectCreateWithoutTemplatesProjectToTemplateProjectInput>;
  connectOrCreate?: Maybe<ProjectCreateOrConnectWithoutTemplatesProjectToTemplateProjectInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectCreateOneWithoutProjectTasksInput {
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectCreateOrConnectWithoutChatRoomChatRoomToProjectInput {
  where: ProjectWhereUniqueInput;
  create: ProjectCreateWithoutChatRoomChatRoomToProjectInput;
}

export interface ProjectCreateOrConnectWithoutEthAccountsInput {
  where: ProjectWhereUniqueInput;
  create: ProjectCreateWithoutEthAccountsInput;
}

export interface ProjectCreateOrConnectWithoutFileInput {
  where: ProjectWhereUniqueInput;
  create: ProjectCreateWithoutFileInput;
}

export interface ProjectCreateOrConnectWithoutProjectMembersInput {
  where: ProjectWhereUniqueInput;
  create: ProjectCreateWithoutProjectMembersInput;
}

export interface ProjectCreateOrConnectWithoutProjectTasksInput {
  where: ProjectWhereUniqueInput;
  create: ProjectCreateWithoutProjectTasksInput;
}

export interface ProjectCreateOrConnectWithoutResourceProjectResourceToResourceInput {
  where: ProjectWhereUniqueInput;
  create: ProjectCreateWithoutResourceProjectResourceToResourceInput;
}

export interface ProjectCreateOrConnectWithoutResourcesProjectToResourcePrismaProjectInput {
  where: ProjectWhereUniqueInput;
  create: ProjectCreateWithoutResourcesProjectToResourcePrismaProjectInput;
}

export interface ProjectCreateOrConnectWithoutTeamProjectCustomersInput {
  where: ProjectWhereUniqueInput;
  create: ProjectCreateWithoutTeamProjectCustomersInput;
}

export interface ProjectCreateOrConnectWithoutTeamProjectToTeamInput {
  where: ProjectWhereUniqueInput;
  create: ProjectCreateWithoutTeamProjectToTeamInput;
}

export interface ProjectCreateOrConnectWithoutTemplatesProjectToTemplatePrismaProjectInput {
  where: ProjectWhereUniqueInput;
  create: ProjectCreateWithoutTemplatesProjectToTemplatePrismaProjectInput;
}

export interface ProjectCreateOrConnectWithoutTemplatesProjectToTemplateProjectInput {
  where: ProjectWhereUniqueInput;
  create: ProjectCreateWithoutTemplatesProjectToTemplateProjectInput;
}

export interface ProjectCreateOrConnectWithoutUserPrismaProjectUsersInput {
  where: ProjectWhereUniqueInput;
  create: ProjectCreateWithoutUserPrismaProjectUsersInput;
}

export interface ProjectCreateOrConnectWithoutUserProjectToUserInput {
  where: ProjectWhereUniqueInput;
  create: ProjectCreateWithoutUserProjectToUserInput;
}

export interface ProjectCreateWithoutChatRoomChatRoomToProjectInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  User_ProjectToUser?: Maybe<UserCreateNestedOneWithoutProjectsProjectToUserInput>;
  File?: Maybe<FileCreateNestedOneWithoutProjectsInput>;
  Resource_Project_ResourceToResource?: Maybe<ResourceCreateNestedOneWithoutProjectsProjectResourceToResourceInput>;
  Team_ProjectToTeam?: Maybe<TeamCreateNestedOneWithoutProjectsProjectToTeamInput>;
  EthAccounts?: Maybe<EthAccountCreateNestedManyWithoutProjectEthAccountToProjectInput>;
  ProjectMembers?: Maybe<ProjectMemberCreateNestedManyWithoutProjectProjectToProjectMemberInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutProjectProjectToProjectTaskInput>;
  Resources_ProjectToResource_PrismaProject?: Maybe<ResourceCreateNestedManyWithoutProjectProjectToResourcePrismaProjectInput>;
  Templates_ProjectToTemplate_PrismaProject?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplatePrismaProjectInput>;
  Templates_ProjectToTemplate_Project?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplateProjectInput>;
  User_PrismaProjectUsers?: Maybe<UserCreateNestedManyWithoutProjectsPrismaProjectUsersInput>;
  Team_ProjectCustomers?: Maybe<TeamCreateNestedManyWithoutProjectProjectCustomersInput>;
}

export interface ProjectCreateWithoutEthAccountsInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  ChatRoom_ChatRoomToProject?: Maybe<ChatRoomCreateNestedOneWithoutProjectsInput>;
  User_ProjectToUser?: Maybe<UserCreateNestedOneWithoutProjectsProjectToUserInput>;
  File?: Maybe<FileCreateNestedOneWithoutProjectsInput>;
  Resource_Project_ResourceToResource?: Maybe<ResourceCreateNestedOneWithoutProjectsProjectResourceToResourceInput>;
  Team_ProjectToTeam?: Maybe<TeamCreateNestedOneWithoutProjectsProjectToTeamInput>;
  ProjectMembers?: Maybe<ProjectMemberCreateNestedManyWithoutProjectProjectToProjectMemberInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutProjectProjectToProjectTaskInput>;
  Resources_ProjectToResource_PrismaProject?: Maybe<ResourceCreateNestedManyWithoutProjectProjectToResourcePrismaProjectInput>;
  Templates_ProjectToTemplate_PrismaProject?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplatePrismaProjectInput>;
  Templates_ProjectToTemplate_Project?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplateProjectInput>;
  User_PrismaProjectUsers?: Maybe<UserCreateNestedManyWithoutProjectsPrismaProjectUsersInput>;
  Team_ProjectCustomers?: Maybe<TeamCreateNestedManyWithoutProjectProjectCustomersInput>;
}

export interface ProjectCreateWithoutFileInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  ChatRoom_ChatRoomToProject?: Maybe<ChatRoomCreateNestedOneWithoutProjectsInput>;
  User_ProjectToUser?: Maybe<UserCreateNestedOneWithoutProjectsProjectToUserInput>;
  Resource_Project_ResourceToResource?: Maybe<ResourceCreateNestedOneWithoutProjectsProjectResourceToResourceInput>;
  Team_ProjectToTeam?: Maybe<TeamCreateNestedOneWithoutProjectsProjectToTeamInput>;
  EthAccounts?: Maybe<EthAccountCreateNestedManyWithoutProjectEthAccountToProjectInput>;
  ProjectMembers?: Maybe<ProjectMemberCreateNestedManyWithoutProjectProjectToProjectMemberInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutProjectProjectToProjectTaskInput>;
  Resources_ProjectToResource_PrismaProject?: Maybe<ResourceCreateNestedManyWithoutProjectProjectToResourcePrismaProjectInput>;
  Templates_ProjectToTemplate_PrismaProject?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplatePrismaProjectInput>;
  Templates_ProjectToTemplate_Project?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplateProjectInput>;
  User_PrismaProjectUsers?: Maybe<UserCreateNestedManyWithoutProjectsPrismaProjectUsersInput>;
  Team_ProjectCustomers?: Maybe<TeamCreateNestedManyWithoutProjectProjectCustomersInput>;
}

export interface ProjectCreateWithoutProjectMembersInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  ChatRoom_ChatRoomToProject?: Maybe<ChatRoomCreateNestedOneWithoutProjectsInput>;
  User_ProjectToUser?: Maybe<UserCreateNestedOneWithoutProjectsProjectToUserInput>;
  File?: Maybe<FileCreateNestedOneWithoutProjectsInput>;
  Resource_Project_ResourceToResource?: Maybe<ResourceCreateNestedOneWithoutProjectsProjectResourceToResourceInput>;
  Team_ProjectToTeam?: Maybe<TeamCreateNestedOneWithoutProjectsProjectToTeamInput>;
  EthAccounts?: Maybe<EthAccountCreateNestedManyWithoutProjectEthAccountToProjectInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutProjectProjectToProjectTaskInput>;
  Resources_ProjectToResource_PrismaProject?: Maybe<ResourceCreateNestedManyWithoutProjectProjectToResourcePrismaProjectInput>;
  Templates_ProjectToTemplate_PrismaProject?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplatePrismaProjectInput>;
  Templates_ProjectToTemplate_Project?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplateProjectInput>;
  User_PrismaProjectUsers?: Maybe<UserCreateNestedManyWithoutProjectsPrismaProjectUsersInput>;
  Team_ProjectCustomers?: Maybe<TeamCreateNestedManyWithoutProjectProjectCustomersInput>;
}

export interface ProjectCreateWithoutProjectTasksInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  ChatRoom_ChatRoomToProject?: Maybe<ChatRoomCreateNestedOneWithoutProjectsInput>;
  User_ProjectToUser?: Maybe<UserCreateNestedOneWithoutProjectsProjectToUserInput>;
  File?: Maybe<FileCreateNestedOneWithoutProjectsInput>;
  Resource_Project_ResourceToResource?: Maybe<ResourceCreateNestedOneWithoutProjectsProjectResourceToResourceInput>;
  Team_ProjectToTeam?: Maybe<TeamCreateNestedOneWithoutProjectsProjectToTeamInput>;
  EthAccounts?: Maybe<EthAccountCreateNestedManyWithoutProjectEthAccountToProjectInput>;
  ProjectMembers?: Maybe<ProjectMemberCreateNestedManyWithoutProjectProjectToProjectMemberInput>;
  Resources_ProjectToResource_PrismaProject?: Maybe<ResourceCreateNestedManyWithoutProjectProjectToResourcePrismaProjectInput>;
  Templates_ProjectToTemplate_PrismaProject?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplatePrismaProjectInput>;
  Templates_ProjectToTemplate_Project?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplateProjectInput>;
  User_PrismaProjectUsers?: Maybe<UserCreateNestedManyWithoutProjectsPrismaProjectUsersInput>;
  Team_ProjectCustomers?: Maybe<TeamCreateNestedManyWithoutProjectProjectCustomersInput>;
}

export interface ProjectCreateWithoutResourceProjectResourceToResourceInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  ChatRoom_ChatRoomToProject?: Maybe<ChatRoomCreateNestedOneWithoutProjectsInput>;
  User_ProjectToUser?: Maybe<UserCreateNestedOneWithoutProjectsProjectToUserInput>;
  File?: Maybe<FileCreateNestedOneWithoutProjectsInput>;
  Team_ProjectToTeam?: Maybe<TeamCreateNestedOneWithoutProjectsProjectToTeamInput>;
  EthAccounts?: Maybe<EthAccountCreateNestedManyWithoutProjectEthAccountToProjectInput>;
  ProjectMembers?: Maybe<ProjectMemberCreateNestedManyWithoutProjectProjectToProjectMemberInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutProjectProjectToProjectTaskInput>;
  Resources_ProjectToResource_PrismaProject?: Maybe<ResourceCreateNestedManyWithoutProjectProjectToResourcePrismaProjectInput>;
  Templates_ProjectToTemplate_PrismaProject?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplatePrismaProjectInput>;
  Templates_ProjectToTemplate_Project?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplateProjectInput>;
  User_PrismaProjectUsers?: Maybe<UserCreateNestedManyWithoutProjectsPrismaProjectUsersInput>;
  Team_ProjectCustomers?: Maybe<TeamCreateNestedManyWithoutProjectProjectCustomersInput>;
}

export interface ProjectCreateWithoutResourcesProjectToResourcePrismaProjectInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  ChatRoom_ChatRoomToProject?: Maybe<ChatRoomCreateNestedOneWithoutProjectsInput>;
  User_ProjectToUser?: Maybe<UserCreateNestedOneWithoutProjectsProjectToUserInput>;
  File?: Maybe<FileCreateNestedOneWithoutProjectsInput>;
  Resource_Project_ResourceToResource?: Maybe<ResourceCreateNestedOneWithoutProjectsProjectResourceToResourceInput>;
  Team_ProjectToTeam?: Maybe<TeamCreateNestedOneWithoutProjectsProjectToTeamInput>;
  EthAccounts?: Maybe<EthAccountCreateNestedManyWithoutProjectEthAccountToProjectInput>;
  ProjectMembers?: Maybe<ProjectMemberCreateNestedManyWithoutProjectProjectToProjectMemberInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutProjectProjectToProjectTaskInput>;
  Templates_ProjectToTemplate_PrismaProject?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplatePrismaProjectInput>;
  Templates_ProjectToTemplate_Project?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplateProjectInput>;
  User_PrismaProjectUsers?: Maybe<UserCreateNestedManyWithoutProjectsPrismaProjectUsersInput>;
  Team_ProjectCustomers?: Maybe<TeamCreateNestedManyWithoutProjectProjectCustomersInput>;
}

export interface ProjectCreateWithoutTeamProjectCustomersInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  ChatRoom_ChatRoomToProject?: Maybe<ChatRoomCreateNestedOneWithoutProjectsInput>;
  User_ProjectToUser?: Maybe<UserCreateNestedOneWithoutProjectsProjectToUserInput>;
  File?: Maybe<FileCreateNestedOneWithoutProjectsInput>;
  Resource_Project_ResourceToResource?: Maybe<ResourceCreateNestedOneWithoutProjectsProjectResourceToResourceInput>;
  Team_ProjectToTeam?: Maybe<TeamCreateNestedOneWithoutProjectsProjectToTeamInput>;
  EthAccounts?: Maybe<EthAccountCreateNestedManyWithoutProjectEthAccountToProjectInput>;
  ProjectMembers?: Maybe<ProjectMemberCreateNestedManyWithoutProjectProjectToProjectMemberInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutProjectProjectToProjectTaskInput>;
  Resources_ProjectToResource_PrismaProject?: Maybe<ResourceCreateNestedManyWithoutProjectProjectToResourcePrismaProjectInput>;
  Templates_ProjectToTemplate_PrismaProject?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplatePrismaProjectInput>;
  Templates_ProjectToTemplate_Project?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplateProjectInput>;
  User_PrismaProjectUsers?: Maybe<UserCreateNestedManyWithoutProjectsPrismaProjectUsersInput>;
}

export interface ProjectCreateWithoutTeamProjectToTeamInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  ChatRoom_ChatRoomToProject?: Maybe<ChatRoomCreateNestedOneWithoutProjectsInput>;
  User_ProjectToUser?: Maybe<UserCreateNestedOneWithoutProjectsProjectToUserInput>;
  File?: Maybe<FileCreateNestedOneWithoutProjectsInput>;
  Resource_Project_ResourceToResource?: Maybe<ResourceCreateNestedOneWithoutProjectsProjectResourceToResourceInput>;
  EthAccounts?: Maybe<EthAccountCreateNestedManyWithoutProjectEthAccountToProjectInput>;
  ProjectMembers?: Maybe<ProjectMemberCreateNestedManyWithoutProjectProjectToProjectMemberInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutProjectProjectToProjectTaskInput>;
  Resources_ProjectToResource_PrismaProject?: Maybe<ResourceCreateNestedManyWithoutProjectProjectToResourcePrismaProjectInput>;
  Templates_ProjectToTemplate_PrismaProject?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplatePrismaProjectInput>;
  Templates_ProjectToTemplate_Project?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplateProjectInput>;
  User_PrismaProjectUsers?: Maybe<UserCreateNestedManyWithoutProjectsPrismaProjectUsersInput>;
  Team_ProjectCustomers?: Maybe<TeamCreateNestedManyWithoutProjectProjectCustomersInput>;
}

export interface ProjectCreateWithoutTemplatesProjectToTemplatePrismaProjectInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  ChatRoom_ChatRoomToProject?: Maybe<ChatRoomCreateNestedOneWithoutProjectsInput>;
  User_ProjectToUser?: Maybe<UserCreateNestedOneWithoutProjectsProjectToUserInput>;
  File?: Maybe<FileCreateNestedOneWithoutProjectsInput>;
  Resource_Project_ResourceToResource?: Maybe<ResourceCreateNestedOneWithoutProjectsProjectResourceToResourceInput>;
  Team_ProjectToTeam?: Maybe<TeamCreateNestedOneWithoutProjectsProjectToTeamInput>;
  EthAccounts?: Maybe<EthAccountCreateNestedManyWithoutProjectEthAccountToProjectInput>;
  ProjectMembers?: Maybe<ProjectMemberCreateNestedManyWithoutProjectProjectToProjectMemberInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutProjectProjectToProjectTaskInput>;
  Resources_ProjectToResource_PrismaProject?: Maybe<ResourceCreateNestedManyWithoutProjectProjectToResourcePrismaProjectInput>;
  Templates_ProjectToTemplate_Project?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplateProjectInput>;
  User_PrismaProjectUsers?: Maybe<UserCreateNestedManyWithoutProjectsPrismaProjectUsersInput>;
  Team_ProjectCustomers?: Maybe<TeamCreateNestedManyWithoutProjectProjectCustomersInput>;
}

export interface ProjectCreateWithoutTemplatesProjectToTemplateProjectInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  ChatRoom_ChatRoomToProject?: Maybe<ChatRoomCreateNestedOneWithoutProjectsInput>;
  User_ProjectToUser?: Maybe<UserCreateNestedOneWithoutProjectsProjectToUserInput>;
  File?: Maybe<FileCreateNestedOneWithoutProjectsInput>;
  Resource_Project_ResourceToResource?: Maybe<ResourceCreateNestedOneWithoutProjectsProjectResourceToResourceInput>;
  Team_ProjectToTeam?: Maybe<TeamCreateNestedOneWithoutProjectsProjectToTeamInput>;
  EthAccounts?: Maybe<EthAccountCreateNestedManyWithoutProjectEthAccountToProjectInput>;
  ProjectMembers?: Maybe<ProjectMemberCreateNestedManyWithoutProjectProjectToProjectMemberInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutProjectProjectToProjectTaskInput>;
  Resources_ProjectToResource_PrismaProject?: Maybe<ResourceCreateNestedManyWithoutProjectProjectToResourcePrismaProjectInput>;
  Templates_ProjectToTemplate_PrismaProject?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplatePrismaProjectInput>;
  User_PrismaProjectUsers?: Maybe<UserCreateNestedManyWithoutProjectsPrismaProjectUsersInput>;
  Team_ProjectCustomers?: Maybe<TeamCreateNestedManyWithoutProjectProjectCustomersInput>;
}

export interface ProjectCreateWithoutUserPrismaProjectUsersInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  ChatRoom_ChatRoomToProject?: Maybe<ChatRoomCreateNestedOneWithoutProjectsInput>;
  User_ProjectToUser?: Maybe<UserCreateNestedOneWithoutProjectsProjectToUserInput>;
  File?: Maybe<FileCreateNestedOneWithoutProjectsInput>;
  Resource_Project_ResourceToResource?: Maybe<ResourceCreateNestedOneWithoutProjectsProjectResourceToResourceInput>;
  Team_ProjectToTeam?: Maybe<TeamCreateNestedOneWithoutProjectsProjectToTeamInput>;
  EthAccounts?: Maybe<EthAccountCreateNestedManyWithoutProjectEthAccountToProjectInput>;
  ProjectMembers?: Maybe<ProjectMemberCreateNestedManyWithoutProjectProjectToProjectMemberInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutProjectProjectToProjectTaskInput>;
  Resources_ProjectToResource_PrismaProject?: Maybe<ResourceCreateNestedManyWithoutProjectProjectToResourcePrismaProjectInput>;
  Templates_ProjectToTemplate_PrismaProject?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplatePrismaProjectInput>;
  Templates_ProjectToTemplate_Project?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplateProjectInput>;
  Team_ProjectCustomers?: Maybe<TeamCreateNestedManyWithoutProjectProjectCustomersInput>;
}

export interface ProjectCreateWithoutUserProjectToUserInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  ChatRoom_ChatRoomToProject?: Maybe<ChatRoomCreateNestedOneWithoutProjectsInput>;
  File?: Maybe<FileCreateNestedOneWithoutProjectsInput>;
  Resource_Project_ResourceToResource?: Maybe<ResourceCreateNestedOneWithoutProjectsProjectResourceToResourceInput>;
  Team_ProjectToTeam?: Maybe<TeamCreateNestedOneWithoutProjectsProjectToTeamInput>;
  EthAccounts?: Maybe<EthAccountCreateNestedManyWithoutProjectEthAccountToProjectInput>;
  ProjectMembers?: Maybe<ProjectMemberCreateNestedManyWithoutProjectProjectToProjectMemberInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutProjectProjectToProjectTaskInput>;
  Resources_ProjectToResource_PrismaProject?: Maybe<ResourceCreateNestedManyWithoutProjectProjectToResourcePrismaProjectInput>;
  Templates_ProjectToTemplate_PrismaProject?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplatePrismaProjectInput>;
  Templates_ProjectToTemplate_Project?: Maybe<TemplateCreateNestedManyWithoutProjectProjectToTemplateProjectInput>;
  User_PrismaProjectUsers?: Maybe<UserCreateNestedManyWithoutProjectsPrismaProjectUsersInput>;
  Team_ProjectCustomers?: Maybe<TeamCreateNestedManyWithoutProjectProjectCustomersInput>;
}

export interface ProjectListRelationFilter {
  every?: Maybe<ProjectWhereInput>;
  some?: Maybe<ProjectWhereInput>;
  none?: Maybe<ProjectWhereInput>;
}

export interface ProjectMember {
  __typename?: 'ProjectMember';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  User?: Maybe<User>;
  status?: Maybe<ProjectMemberStatus>;
  Project?: Maybe<Project>;
}

export interface ProjectMemberCreateManyProjectProjectToProjectMemberInput {
  id?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectMemberStatus>;
  User?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface ProjectMemberCreateManyProjectProjectToProjectMemberInputEnvelope {
  data?: Maybe<Array<ProjectMemberCreateManyProjectProjectToProjectMemberInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ProjectMemberCreateManyUserProjectMemberCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectMemberStatus>;
  User?: Maybe<Scalars['String']>;
  Project?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface ProjectMemberCreateManyUserProjectMemberCreatedByToUserInputEnvelope {
  data?: Maybe<Array<ProjectMemberCreateManyUserProjectMemberCreatedByToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ProjectMemberCreateManyUserProjectMemberUserToUserInput {
  id?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectMemberStatus>;
  CreatedBy?: Maybe<Scalars['String']>;
  Project?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface ProjectMemberCreateManyUserProjectMemberUserToUserInputEnvelope {
  data?: Maybe<Array<ProjectMemberCreateManyUserProjectMemberUserToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ProjectMemberCreateNestedManyWithoutProjectProjectToProjectMemberInput {
  create?: Maybe<Array<ProjectMemberCreateWithoutProjectProjectToProjectMemberInput>>;
  connectOrCreate?: Maybe<Array<ProjectMemberCreateOrConnectWithoutProjectProjectToProjectMemberInput>>;
  createMany?: Maybe<ProjectMemberCreateManyProjectProjectToProjectMemberInputEnvelope>;
  connect?: Maybe<Array<ProjectMemberWhereUniqueInput>>;
}

export interface ProjectMemberCreateNestedManyWithoutServicesInput {
  create?: Maybe<Array<ProjectMemberCreateWithoutServicesInput>>;
  connectOrCreate?: Maybe<Array<ProjectMemberCreateOrConnectWithoutServicesInput>>;
  connect?: Maybe<Array<ProjectMemberWhereUniqueInput>>;
}

export interface ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput {
  create?: Maybe<Array<ProjectMemberCreateWithoutUserProjectMemberCreatedByToUserInput>>;
  connectOrCreate?: Maybe<Array<ProjectMemberCreateOrConnectWithoutUserProjectMemberCreatedByToUserInput>>;
  createMany?: Maybe<ProjectMemberCreateManyUserProjectMemberCreatedByToUserInputEnvelope>;
  connect?: Maybe<Array<ProjectMemberWhereUniqueInput>>;
}

export interface ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput {
  create?: Maybe<Array<ProjectMemberCreateWithoutUserProjectMemberUserToUserInput>>;
  connectOrCreate?: Maybe<Array<ProjectMemberCreateOrConnectWithoutUserProjectMemberUserToUserInput>>;
  createMany?: Maybe<ProjectMemberCreateManyUserProjectMemberUserToUserInputEnvelope>;
  connect?: Maybe<Array<ProjectMemberWhereUniqueInput>>;
}

export interface ProjectMemberCreateOrConnectWithoutProjectProjectToProjectMemberInput {
  where: ProjectMemberWhereUniqueInput;
  create: ProjectMemberCreateWithoutProjectProjectToProjectMemberInput;
}

export interface ProjectMemberCreateOrConnectWithoutServicesInput {
  where: ProjectMemberWhereUniqueInput;
  create: ProjectMemberCreateWithoutServicesInput;
}

export interface ProjectMemberCreateOrConnectWithoutUserProjectMemberCreatedByToUserInput {
  where: ProjectMemberWhereUniqueInput;
  create: ProjectMemberCreateWithoutUserProjectMemberCreatedByToUserInput;
}

export interface ProjectMemberCreateOrConnectWithoutUserProjectMemberUserToUserInput {
  where: ProjectMemberWhereUniqueInput;
  create: ProjectMemberCreateWithoutUserProjectMemberUserToUserInput;
}

export interface ProjectMemberCreateWithoutProjectProjectToProjectMemberInput {
  id?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectMemberStatus>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User_ProjectMember_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutProjectMembersProjectMemberCreatedByToUserInput>;
  User_ProjectMember_UserToUser?: Maybe<UserCreateNestedOneWithoutProjectMembersProjectMemberUserToUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutProjectMembersInput>;
}

export interface ProjectMemberCreateWithoutServicesInput {
  id?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectMemberStatus>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User_ProjectMember_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutProjectMembersProjectMemberCreatedByToUserInput>;
  Project_ProjectToProjectMember?: Maybe<ProjectCreateNestedOneWithoutProjectMembersInput>;
  User_ProjectMember_UserToUser?: Maybe<UserCreateNestedOneWithoutProjectMembersProjectMemberUserToUserInput>;
}

export interface ProjectMemberCreateWithoutUserProjectMemberCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectMemberStatus>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  Project_ProjectToProjectMember?: Maybe<ProjectCreateNestedOneWithoutProjectMembersInput>;
  User_ProjectMember_UserToUser?: Maybe<UserCreateNestedOneWithoutProjectMembersProjectMemberUserToUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutProjectMembersInput>;
}

export interface ProjectMemberCreateWithoutUserProjectMemberUserToUserInput {
  id?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectMemberStatus>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User_ProjectMember_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutProjectMembersProjectMemberCreatedByToUserInput>;
  Project_ProjectToProjectMember?: Maybe<ProjectCreateNestedOneWithoutProjectMembersInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutProjectMembersInput>;
}

export interface ProjectMemberListRelationFilter {
  every?: Maybe<ProjectMemberWhereInput>;
  some?: Maybe<ProjectMemberWhereInput>;
  none?: Maybe<ProjectMemberWhereInput>;
}

export interface ProjectMemberOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export enum ProjectMemberStatus {
  INVITED = 'Invited',
  ACTIVE = 'Active',
  FIRED = 'Fired',
  QUIT = 'Quit'
}

export interface ProjectMemberWhereInput {
  AND?: Maybe<Array<ProjectMemberWhereInput>>;
  OR?: Maybe<Array<ProjectMemberWhereInput>>;
  NOT?: Maybe<Array<ProjectMemberWhereInput>>;
  id?: Maybe<StringFilter>;
  status?: Maybe<EnumProjectMemberStatusFilter>;
  User?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  Project?: Maybe<StringNullableFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  User_ProjectMember_CreatedByToUser?: Maybe<UserWhereInput>;
  Project_ProjectToProjectMember?: Maybe<ProjectWhereInput>;
  User_ProjectMember_UserToUser?: Maybe<UserWhereInput>;
  Services?: Maybe<ServiceListRelationFilter>;
}

export interface ProjectMemberWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface ProjectOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface ProjectOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  domain?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  description?: Maybe<SortOrder>;
  url?: Maybe<SortOrder>;
  sequence?: Maybe<SortOrder>;
  content?: Maybe<SortOrder>;
  contentText?: Maybe<SortOrder>;
  status?: Maybe<SortOrder>;
  public?: Maybe<SortOrder>;
  oldID?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  Image?: Maybe<SortOrder>;
  ChatRoom?: Maybe<SortOrder>;
  Team?: Maybe<SortOrder>;
  Resource?: Maybe<SortOrder>;
  type?: Maybe<SortOrder>;
  ChatRoom_ChatRoomToProject?: Maybe<ChatRoomOrderByWithRelationInput>;
  User_ProjectToUser?: Maybe<UserOrderByWithRelationInput>;
  File?: Maybe<FileOrderByWithRelationInput>;
  Resource_Project_ResourceToResource?: Maybe<ResourceOrderByWithRelationInput>;
  Team_ProjectToTeam?: Maybe<TeamOrderByWithRelationInput>;
  EthAccounts?: Maybe<EthAccountOrderByRelationAggregateInput>;
  ProjectMembers?: Maybe<ProjectMemberOrderByRelationAggregateInput>;
  ProjectTasks?: Maybe<ProjectTaskOrderByRelationAggregateInput>;
  Resources_ProjectToResource_PrismaProject?: Maybe<ResourceOrderByRelationAggregateInput>;
  Templates_ProjectToTemplate_PrismaProject?: Maybe<TemplateOrderByRelationAggregateInput>;
  Templates_ProjectToTemplate_Project?: Maybe<TemplateOrderByRelationAggregateInput>;
  User_PrismaProjectUsers?: Maybe<UserOrderByRelationAggregateInput>;
  Team_ProjectCustomers?: Maybe<TeamOrderByRelationAggregateInput>;
}

export interface ProjectResponse {
  __typename?: 'ProjectResponse';
  success: Scalars['Boolean'];
  message: Scalars['String'];
  errors: Array<RequestError>;
  data?: Maybe<Project>;
}

export enum ProjectStatus {
  NEW = 'New',
  ACCEPTED = 'Accepted',
  REJECTED = 'Rejected',
  PROCESSING = 'Processing',
  COMPLETED = 'Completed',
  REOPENED = 'Reopened'
}

export interface ProjectTask {
  __typename?: 'ProjectTask';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  CreatedBy?: Maybe<User>;
  Project?: Maybe<Project>;
  Task?: Maybe<Task>;
}

export interface ProjectTaskCreateManyProjectProjectToProjectTaskInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  Task?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
}

export interface ProjectTaskCreateManyProjectProjectToProjectTaskInputEnvelope {
  data?: Maybe<Array<ProjectTaskCreateManyProjectProjectToProjectTaskInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ProjectTaskCreateManyTaskProjectTaskToTaskInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  Project?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
}

export interface ProjectTaskCreateManyTaskProjectTaskToTaskInputEnvelope {
  data?: Maybe<Array<ProjectTaskCreateManyTaskProjectTaskToTaskInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ProjectTaskCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  Project?: Maybe<Scalars['String']>;
  Task?: Maybe<Scalars['String']>;
}

export interface ProjectTaskCreateManyUserInputEnvelope {
  data?: Maybe<Array<ProjectTaskCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ProjectTaskCreateNestedManyWithoutProjectProjectToProjectTaskInput {
  create?: Maybe<Array<ProjectTaskCreateWithoutProjectProjectToProjectTaskInput>>;
  connectOrCreate?: Maybe<Array<ProjectTaskCreateOrConnectWithoutProjectProjectToProjectTaskInput>>;
  createMany?: Maybe<ProjectTaskCreateManyProjectProjectToProjectTaskInputEnvelope>;
  connect?: Maybe<Array<ProjectTaskWhereUniqueInput>>;
}

export interface ProjectTaskCreateNestedManyWithoutTaskProjectTaskToTaskInput {
  create?: Maybe<Array<ProjectTaskCreateWithoutTaskProjectTaskToTaskInput>>;
  connectOrCreate?: Maybe<Array<ProjectTaskCreateOrConnectWithoutTaskProjectTaskToTaskInput>>;
  createMany?: Maybe<ProjectTaskCreateManyTaskProjectTaskToTaskInputEnvelope>;
  connect?: Maybe<Array<ProjectTaskWhereUniqueInput>>;
}

export interface ProjectTaskCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<ProjectTaskCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<ProjectTaskCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<ProjectTaskCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<ProjectTaskWhereUniqueInput>>;
}

export interface ProjectTaskCreateOrConnectWithoutProjectProjectToProjectTaskInput {
  where: ProjectTaskWhereUniqueInput;
  create: ProjectTaskCreateWithoutProjectProjectToProjectTaskInput;
}

export interface ProjectTaskCreateOrConnectWithoutTaskProjectTaskToTaskInput {
  where: ProjectTaskWhereUniqueInput;
  create: ProjectTaskCreateWithoutTaskProjectTaskToTaskInput;
}

export interface ProjectTaskCreateOrConnectWithoutUserInput {
  where: ProjectTaskWhereUniqueInput;
  create: ProjectTaskCreateWithoutUserInput;
}

export interface ProjectTaskCreateWithoutProjectProjectToProjectTaskInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User?: Maybe<UserCreateNestedOneWithoutProjectTasksInput>;
  Task_ProjectTaskToTask?: Maybe<TaskCreateNestedOneWithoutProjectTasksInput>;
}

export interface ProjectTaskCreateWithoutTaskProjectTaskToTaskInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User?: Maybe<UserCreateNestedOneWithoutProjectTasksInput>;
  Project_ProjectToProjectTask?: Maybe<ProjectCreateNestedOneWithoutProjectTasksInput>;
}

export interface ProjectTaskCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  Project_ProjectToProjectTask?: Maybe<ProjectCreateNestedOneWithoutProjectTasksInput>;
  Task_ProjectTaskToTask?: Maybe<TaskCreateNestedOneWithoutProjectTasksInput>;
}

export interface ProjectTaskListRelationFilter {
  every?: Maybe<ProjectTaskWhereInput>;
  some?: Maybe<ProjectTaskWhereInput>;
  none?: Maybe<ProjectTaskWhereInput>;
}

export interface ProjectTaskOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface ProjectTaskOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  Project?: Maybe<SortOrder>;
  Task?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  User?: Maybe<UserOrderByWithRelationInput>;
  Project_ProjectToProjectTask?: Maybe<ProjectOrderByWithRelationInput>;
  Task_ProjectTaskToTask?: Maybe<TaskOrderByWithRelationInput>;
}

export enum ProjectTaskType {
  BLOG = 'Blog',
  COMMENT = 'Comment',
  PERSONALBLOG = 'PersonalBlog',
  PROJECT = 'Project',
  PROJECTTASK = 'ProjectTask',
  SERVICE = 'Service',
  TEAM = 'Team',
  TOPIC = 'Topic'
}

export interface ProjectTaskWhereInput {
  AND?: Maybe<Array<ProjectTaskWhereInput>>;
  OR?: Maybe<Array<ProjectTaskWhereInput>>;
  NOT?: Maybe<Array<ProjectTaskWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  Project?: Maybe<StringNullableFilter>;
  Task?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  User?: Maybe<UserWhereInput>;
  Project_ProjectToProjectTask?: Maybe<ProjectWhereInput>;
  Task_ProjectTaskToTask?: Maybe<TaskWhereInput>;
}

export interface ProjectTaskWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export enum ProjectType {
  EDUCATION = 'Education'
}

export interface ProjectUpdateInput {
  name?: Maybe<Scalars['String']>;
}

export interface ProjectWhereInput {
  AND?: Maybe<Array<ProjectWhereInput>>;
  OR?: Maybe<Array<ProjectWhereInput>>;
  NOT?: Maybe<Array<ProjectWhereInput>>;
  id?: Maybe<StringFilter>;
  name?: Maybe<StringFilter>;
  domain?: Maybe<StringNullableFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  description?: Maybe<StringNullableFilter>;
  url?: Maybe<StringNullableFilter>;
  sequence?: Maybe<IntNullableFilter>;
  content?: Maybe<JsonNullableFilter>;
  contentText?: Maybe<StringNullableFilter>;
  status?: Maybe<EnumProjectStatusNullableFilter>;
  public?: Maybe<BoolNullableFilter>;
  oldID?: Maybe<IntNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  Image?: Maybe<StringNullableFilter>;
  ChatRoom?: Maybe<StringNullableFilter>;
  Team?: Maybe<StringNullableFilter>;
  Resource?: Maybe<StringNullableFilter>;
  type?: Maybe<EnumProjectTypeNullableFilter>;
  ChatRoom_ChatRoomToProject?: Maybe<ChatRoomWhereInput>;
  User_ProjectToUser?: Maybe<UserWhereInput>;
  File?: Maybe<FileWhereInput>;
  Resource_Project_ResourceToResource?: Maybe<ResourceWhereInput>;
  Team_ProjectToTeam?: Maybe<TeamWhereInput>;
  EthAccounts?: Maybe<EthAccountListRelationFilter>;
  ProjectMembers?: Maybe<ProjectMemberListRelationFilter>;
  ProjectTasks?: Maybe<ProjectTaskListRelationFilter>;
  Resources_ProjectToResource_PrismaProject?: Maybe<ResourceListRelationFilter>;
  Templates_ProjectToTemplate_PrismaProject?: Maybe<TemplateListRelationFilter>;
  Templates_ProjectToTemplate_Project?: Maybe<TemplateListRelationFilter>;
  User_PrismaProjectUsers?: Maybe<UserListRelationFilter>;
  Team_ProjectCustomers?: Maybe<TeamListRelationFilter>;
}

export interface ProjectWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
}

export interface Query {
  __typename?: 'Query';
  /** Список файлов */
  files: Array<File>;
  /** Количество файлов */
  filesCount: Scalars['Int'];
  /** Файл */
  file?: Maybe<File>;
  resource?: Maybe<Resource>;
  resources: Array<Resource>;
  resourcesCount: Scalars['Int'];
  chatMessage?: Maybe<ChatMessage>;
  chatMessages: Array<ChatMessage>;
  chatMessagesCount: Scalars['Int'];
  chatRoom?: Maybe<ChatRoom>;
  chatRooms: Array<ChatRoom>;
  /** Количество чат-комнат */
  chatRoomsCount: Scalars['Int'];
  codeChallengeCompletion?: Maybe<CodeChallengeCompletion>;
  codeChallengeCompletions: Array<CodeChallengeCompletion>;
  timer?: Maybe<Timer>;
  timers: Array<Timer>;
  /** Количество таймеров */
  timersCount: Scalars['Int'];
  /** Уведомление */
  notice?: Maybe<Notice>;
  /** Список уведомлений */
  notices: Array<Notice>;
  /** Количество уведомлений */
  noticesCount: Scalars['Int'];
  /** Список уведомлений */
  notificationTypes: Array<NotificationType>;
  /** Количество уведомлений */
  notificationTypesCount: Scalars['Int'];
  project?: Maybe<Project>;
  projects: Array<Project>;
  projectsCount: Scalars['Int'];
  projectTasks: Array<ProjectTask>;
  task?: Maybe<Task>;
  tasks: Array<Task>;
  tasksCount: Scalars['Int'];
  technology?: Maybe<Technology>;
  technologies: Array<Technology>;
  technologiesCount: Scalars['Int'];
  userTechnology?: Maybe<UserTechnology>;
  userTechnologies: Array<UserTechnology>;
  userTechnologysCount: Scalars['Int'];
  codeChallenge?: Maybe<CodeChallenge>;
  codeChallenges: Array<CodeChallenge>;
  codeChallengeBlocks: Array<CodeChallengeBlock>;
  codeChallengeBlocksCount: Scalars['Int'];
  codeChallengeBlock?: Maybe<CodeChallengeBlock>;
  tag?: Maybe<Tag>;
  tags: Array<Tag>;
  tagsCount: Scalars['Int'];
  taskTechnology?: Maybe<TaskTechnology>;
  taskTechnologies: Array<TaskTechnology>;
  taskTechnologysCount: Scalars['Int'];
  learnStrategy?: Maybe<LearnStrategy>;
  learnStrategies: Array<LearnStrategy>;
  learnStrategiesCount: Scalars['Int'];
  userLearnStrategy?: Maybe<UserLearnStrategy>;
  userLearnStrategies: Array<UserLearnStrategy>;
  userLearnStrategiesCount: Scalars['Int'];
  learnStrategyStage?: Maybe<LearnStrategyStage>;
  learnStrategyStages: Array<LearnStrategyStage>;
  learnStrategyStagesCount: Scalars['Int'];
  mentorMentee?: Maybe<MentorMentee>;
  mentorMentees: Array<MentorMentee>;
  mentorMenteesCount: Scalars['Int'];
  donate?: Maybe<Donate>;
  donates: Array<Donate>;
  donatesCount: Scalars['Int'];
  /** Список пользователей */
  users: Array<User>;
  /** Количество пользователей */
  usersCount: Scalars['Int'];
  /** Пользователь */
  user?: Maybe<User>;
  me?: Maybe<User>;
}


export type QueryFilesArgs = {
  where?: Maybe<FileWhereInput>;
  orderBy?: Maybe<Array<FileOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<FileWhereUniqueInput>;
};


export type QueryFilesCountArgs = {
  where?: Maybe<FileWhereInput>;
};


export type QueryFileArgs = {
  where: FileWhereUniqueInput;
};


export type QueryResourceArgs = {
  where: ResourceWhereUniqueInput;
};


export type QueryResourcesArgs = {
  where?: Maybe<ResourceWhereInput>;
  orderBy?: Maybe<Array<ResourceOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<ResourceWhereUniqueInput>;
};


export type QueryResourcesCountArgs = {
  where?: Maybe<ResourceWhereInput>;
};


export type QueryChatMessageArgs = {
  where: ChatMessageWhereUniqueInput;
};


export type QueryChatMessagesArgs = {
  where?: Maybe<ChatMessageWhereInput>;
  orderBy?: Maybe<Array<ChatMessageOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<ChatMessageWhereUniqueInput>;
};


export type QueryChatMessagesCountArgs = {
  where?: Maybe<ChatMessageWhereInput>;
};


export type QueryChatRoomArgs = {
  where: ChatRoomWhereUniqueInput;
};


export type QueryChatRoomsArgs = {
  where?: Maybe<ChatRoomWhereInput>;
  orderBy?: Maybe<Array<ChatRoomOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<ChatRoomWhereUniqueInput>;
};


export type QueryChatRoomsCountArgs = {
  where?: Maybe<ChatRoomWhereInput>;
};


export type QueryCodeChallengeCompletionArgs = {
  where: CodeChallengeCompletionWhereUniqueInput;
};


export type QueryCodeChallengeCompletionsArgs = {
  where?: Maybe<CodeChallengeCompletionWhereInput>;
  orderBy?: Maybe<Array<CodeChallengeCompletionOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<CodeChallengeCompletionWhereUniqueInput>;
};


export type QueryTimerArgs = {
  where: TimerWhereUniqueInput;
};


export type QueryTimersArgs = {
  where?: Maybe<TimerWhereInput>;
  orderBy?: Maybe<Array<TimerOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<TimerWhereUniqueInput>;
};


export type QueryTimersCountArgs = {
  where?: Maybe<TimerWhereInput>;
};


export type QueryNoticeArgs = {
  where: NoticeWhereUniqueInput;
};


export type QueryNoticesArgs = {
  where?: Maybe<NoticeWhereInput>;
  orderBy?: Maybe<Array<NoticeOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<NoticeWhereUniqueInput>;
};


export type QueryNoticesCountArgs = {
  where?: Maybe<NoticeWhereInput>;
};


export type QueryNotificationTypesArgs = {
  where?: Maybe<NotificationTypeWhereInput>;
  orderBy?: Maybe<Array<NotificationTypeOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<NotificationTypeWhereUniqueInput>;
};


export type QueryNotificationTypesCountArgs = {
  where?: Maybe<NotificationTypeWhereInput>;
};


export type QueryProjectArgs = {
  where: ProjectWhereUniqueInput;
};


export type QueryProjectsArgs = {
  where?: Maybe<ProjectWhereInput>;
  orderBy?: Maybe<Array<ProjectOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<ProjectWhereUniqueInput>;
};


export type QueryProjectsCountArgs = {
  where?: Maybe<ProjectWhereInput>;
};


export type QueryProjectTasksArgs = {
  where?: Maybe<ProjectTaskWhereInput>;
  orderBy?: Maybe<Array<ProjectTaskOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<ProjectTaskWhereUniqueInput>;
};


export type QueryTaskArgs = {
  where: TaskWhereUniqueInput;
};


export type QueryTasksArgs = {
  where?: Maybe<TaskWhereInput>;
  orderBy?: Maybe<Array<TaskOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<TaskWhereUniqueInput>;
};


export type QueryTasksCountArgs = {
  where?: Maybe<TaskWhereInput>;
};


export type QueryTechnologyArgs = {
  where: TechnologyWhereUniqueInput;
};


export type QueryTechnologiesArgs = {
  where?: Maybe<TechnologyWhereInput>;
  orderBy?: Maybe<Array<TechnologyOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<TechnologyWhereUniqueInput>;
};


export type QueryTechnologiesCountArgs = {
  where?: Maybe<TechnologyWhereInput>;
};


export type QueryUserTechnologyArgs = {
  where: UserTechnologyWhereUniqueInput;
};


export type QueryUserTechnologiesArgs = {
  where?: Maybe<UserTechnologyWhereInput>;
  orderBy?: Maybe<Array<UserTechnologyOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<UserTechnologyWhereUniqueInput>;
};


export type QueryUserTechnologysCountArgs = {
  where?: Maybe<UserTechnologyWhereInput>;
};


export type QueryCodeChallengeArgs = {
  where: CodeChallengeWhereUniqueInput;
};


export type QueryCodeChallengesArgs = {
  where?: Maybe<CodeChallengeWhereInput>;
  orderBy?: Maybe<Array<CodeChallengeOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<CodeChallengeWhereUniqueInput>;
};


export type QueryCodeChallengeBlocksArgs = {
  where?: Maybe<CodeChallengeBlockWhereInput>;
  orderBy?: Maybe<Array<CodeChallengeBlockOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<CodeChallengeBlockWhereUniqueInput>;
};


export type QueryCodeChallengeBlocksCountArgs = {
  where?: Maybe<CodeChallengeBlockWhereInput>;
};


export type QueryCodeChallengeBlockArgs = {
  where: CodeChallengeBlockWhereUniqueInput;
};


export type QueryTagArgs = {
  where: TagWhereUniqueInput;
};


export type QueryTagsArgs = {
  where?: Maybe<TagWhereInput>;
  orderBy?: Maybe<Array<TagOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<TagWhereUniqueInput>;
};


export type QueryTagsCountArgs = {
  where?: Maybe<TagWhereInput>;
};


export type QueryTaskTechnologyArgs = {
  where: TaskTechnologyWhereUniqueInput;
};


export type QueryTaskTechnologiesArgs = {
  where?: Maybe<TaskTechnologyWhereInput>;
  orderBy?: Maybe<Array<TaskTechnologyOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<TaskTechnologyWhereUniqueInput>;
};


export type QueryTaskTechnologysCountArgs = {
  where?: Maybe<TaskTechnologyWhereInput>;
};


export type QueryLearnStrategyArgs = {
  where: LearnStrategyWhereUniqueInput;
};


export type QueryLearnStrategiesArgs = {
  where?: Maybe<LearnStrategyWhereInput>;
  orderBy?: Maybe<Array<LearnStrategyOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<LearnStrategyWhereUniqueInput>;
};


export type QueryLearnStrategiesCountArgs = {
  where?: Maybe<LearnStrategyWhereInput>;
};


export type QueryUserLearnStrategyArgs = {
  where: UserLearnStrategyWhereUniqueInput;
};


export type QueryUserLearnStrategiesArgs = {
  where?: Maybe<UserLearnStrategyWhereInput>;
  orderBy?: Maybe<Array<UserLearnStrategyOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<UserLearnStrategyWhereUniqueInput>;
};


export type QueryUserLearnStrategiesCountArgs = {
  where?: Maybe<UserLearnStrategyWhereInput>;
};


export type QueryLearnStrategyStageArgs = {
  where: LearnStrategyStageWhereUniqueInput;
};


export type QueryLearnStrategyStagesArgs = {
  where?: Maybe<LearnStrategyStageWhereInput>;
  orderBy?: Maybe<Array<LearnStrategyStageOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<LearnStrategyStageWhereUniqueInput>;
};


export type QueryLearnStrategyStagesCountArgs = {
  where?: Maybe<LearnStrategyStageWhereInput>;
};


export type QueryMentorMenteeArgs = {
  where: MentorMenteeWhereUniqueInput;
};


export type QueryMentorMenteesArgs = {
  where?: Maybe<MentorMenteeWhereInput>;
  orderBy?: Maybe<Array<MentorMenteeOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<MentorMenteeWhereUniqueInput>;
};


export type QueryMentorMenteesCountArgs = {
  where?: Maybe<MentorMenteeWhereInput>;
};


export type QueryDonateArgs = {
  where: DonateWhereUniqueInput;
};


export type QueryDonatesArgs = {
  where?: Maybe<DonateWhereInput>;
  orderBy?: Maybe<Array<DonateOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<DonateWhereUniqueInput>;
};


export type QueryDonatesCountArgs = {
  where?: Maybe<DonateWhereInput>;
};


export type QueryUsersArgs = {
  where?: Maybe<UserWhereInput>;
  orderBy?: Maybe<Array<UserOrderByWithRelationInput>>;
  take?: Maybe<Scalars['Int']>;
  skip?: Maybe<Scalars['Int']>;
  cursor?: Maybe<UserWhereUniqueInput>;
};


export type QueryUsersCountArgs = {
  where?: Maybe<UserWhereInput>;
};


export type QueryUserArgs = {
  where: UserWhereUniqueInput;
};

/** Объект ошибки */
export interface RequestError {
  __typename?: 'RequestError';
  key: Scalars['String'];
  message: Scalars['String'];
}

export interface ResetPassword {
  __typename?: 'ResetPassword';
  id: Scalars['ID'];
  foo?: Maybe<Scalars['String']>;
}

export interface ResetPasswordCreateManyUserResetPasswordToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  code: Scalars['String'];
  password: Scalars['String'];
  validTill?: Maybe<Scalars['DateTime']>;
}

export interface ResetPasswordCreateManyUserResetPasswordToUserInputEnvelope {
  data?: Maybe<Array<ResetPasswordCreateManyUserResetPasswordToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput {
  create?: Maybe<Array<ResetPasswordCreateWithoutUserResetPasswordToUserInput>>;
  connectOrCreate?: Maybe<Array<ResetPasswordCreateOrConnectWithoutUserResetPasswordToUserInput>>;
  createMany?: Maybe<ResetPasswordCreateManyUserResetPasswordToUserInputEnvelope>;
  connect?: Maybe<Array<ResetPasswordWhereUniqueInput>>;
}

export interface ResetPasswordCreateOrConnectWithoutUserResetPasswordToUserInput {
  where: ResetPasswordWhereUniqueInput;
  create: ResetPasswordCreateWithoutUserResetPasswordToUserInput;
}

export interface ResetPasswordCreateWithoutUserResetPasswordToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  code: Scalars['String'];
  password: Scalars['String'];
  validTill?: Maybe<Scalars['DateTime']>;
}

export interface ResetPasswordListRelationFilter {
  every?: Maybe<ResetPasswordWhereInput>;
  some?: Maybe<ResetPasswordWhereInput>;
  none?: Maybe<ResetPasswordWhereInput>;
}

export interface ResetPasswordOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface ResetPasswordProcessorWhereInput {
  User: UserWhereUniqueInput;
  code: Scalars['ID'];
}

export interface ResetPasswordResponse {
  __typename?: 'ResetPasswordResponse';
  success: Scalars['Boolean'];
  message: Scalars['String'];
  errors: Array<RequestError>;
  data?: Maybe<ResetPassword>;
}

export interface ResetPasswordWhereInput {
  AND?: Maybe<Array<ResetPasswordWhereInput>>;
  OR?: Maybe<Array<ResetPasswordWhereInput>>;
  NOT?: Maybe<Array<ResetPasswordWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  code?: Maybe<StringFilter>;
  password?: Maybe<StringFilter>;
  validTill?: Maybe<DateTimeNullableFilter>;
  User?: Maybe<StringFilter>;
  User_ResetPasswordToUser?: Maybe<UserWhereInput>;
}

export interface ResetPasswordWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface Resource {
  __typename?: 'Resource';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['JSON']>;
  components?: Maybe<Scalars['JSON']>;
  contentText?: Maybe<Scalars['String']>;
  published: Scalars['Boolean'];
  deleted: Scalars['Boolean'];
  hidemenu: Scalars['Boolean'];
  searchable: Scalars['Boolean'];
  isfolder: Scalars['Boolean'];
  uri: Scalars['String'];
  class_key?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<User>;
  /** Комментарии */
  Comments?: Maybe<Array<Resource>>;
  Topic?: Maybe<Resource>;
  Blog?: Maybe<Resource>;
  Task?: Maybe<Task>;
  Image?: Maybe<File>;
  CodeChallenge?: Maybe<CodeChallenge>;
  Tags?: Maybe<Array<ResourceTag>>;
}


export type ResourceCommentsArgs = {
  orderBy?: Maybe<ResourceOrderByWithRelationInput>;
};

export interface ResourceCreateManyEthAccountEthAccountToResourceInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Parent?: Maybe<Scalars['String']>;
  Team?: Maybe<Scalars['String']>;
  Service?: Maybe<Scalars['String']>;
  PrismaProject?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
  Topic?: Maybe<Scalars['String']>;
  Blog?: Maybe<Scalars['String']>;
  Task?: Maybe<Scalars['String']>;
}

export interface ResourceCreateManyEthAccountEthAccountToResourceInputEnvelope {
  data?: Maybe<Array<ResourceCreateManyEthAccountEthAccountToResourceInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ResourceCreateManyProjectProjectToResourcePrismaProjectInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Parent?: Maybe<Scalars['String']>;
  Team?: Maybe<Scalars['String']>;
  Service?: Maybe<Scalars['String']>;
  EthAccount?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
  Topic?: Maybe<Scalars['String']>;
  Blog?: Maybe<Scalars['String']>;
  Task?: Maybe<Scalars['String']>;
}

export interface ResourceCreateManyProjectProjectToResourcePrismaProjectInputEnvelope {
  data?: Maybe<Array<ResourceCreateManyProjectProjectToResourcePrismaProjectInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ResourceCreateManyResourceResourceToResourceBlogInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Parent?: Maybe<Scalars['String']>;
  Team?: Maybe<Scalars['String']>;
  Service?: Maybe<Scalars['String']>;
  EthAccount?: Maybe<Scalars['String']>;
  PrismaProject?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
  Topic?: Maybe<Scalars['String']>;
  Task?: Maybe<Scalars['String']>;
}

export interface ResourceCreateManyResourceResourceToResourceBlogInputEnvelope {
  data?: Maybe<Array<ResourceCreateManyResourceResourceToResourceBlogInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ResourceCreateManyResourceResourceToResourceParentInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Team?: Maybe<Scalars['String']>;
  Service?: Maybe<Scalars['String']>;
  EthAccount?: Maybe<Scalars['String']>;
  PrismaProject?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
  Topic?: Maybe<Scalars['String']>;
  Blog?: Maybe<Scalars['String']>;
  Task?: Maybe<Scalars['String']>;
}

export interface ResourceCreateManyResourceResourceToResourceParentInputEnvelope {
  data?: Maybe<Array<ResourceCreateManyResourceResourceToResourceParentInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ResourceCreateManyResourceResourceToResourceTopicInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Parent?: Maybe<Scalars['String']>;
  Team?: Maybe<Scalars['String']>;
  Service?: Maybe<Scalars['String']>;
  EthAccount?: Maybe<Scalars['String']>;
  PrismaProject?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
  Blog?: Maybe<Scalars['String']>;
  Task?: Maybe<Scalars['String']>;
}

export interface ResourceCreateManyResourceResourceToResourceTopicInputEnvelope {
  data?: Maybe<Array<ResourceCreateManyResourceResourceToResourceTopicInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ResourceCreateManyServiceResourceToServiceInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Parent?: Maybe<Scalars['String']>;
  Team?: Maybe<Scalars['String']>;
  EthAccount?: Maybe<Scalars['String']>;
  PrismaProject?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
  Topic?: Maybe<Scalars['String']>;
  Blog?: Maybe<Scalars['String']>;
  Task?: Maybe<Scalars['String']>;
}

export interface ResourceCreateManyServiceResourceToServiceInputEnvelope {
  data?: Maybe<Array<ResourceCreateManyServiceResourceToServiceInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ResourceCreateManyTaskResourceToTaskInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Parent?: Maybe<Scalars['String']>;
  Team?: Maybe<Scalars['String']>;
  Service?: Maybe<Scalars['String']>;
  EthAccount?: Maybe<Scalars['String']>;
  PrismaProject?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
  Topic?: Maybe<Scalars['String']>;
  Blog?: Maybe<Scalars['String']>;
}

export interface ResourceCreateManyTaskResourceToTaskInputEnvelope {
  data?: Maybe<Array<ResourceCreateManyTaskResourceToTaskInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ResourceCreateManyTeamResourceToTeamInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Parent?: Maybe<Scalars['String']>;
  Service?: Maybe<Scalars['String']>;
  EthAccount?: Maybe<Scalars['String']>;
  PrismaProject?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
  Topic?: Maybe<Scalars['String']>;
  Blog?: Maybe<Scalars['String']>;
  Task?: Maybe<Scalars['String']>;
}

export interface ResourceCreateManyTeamResourceToTeamInputEnvelope {
  data?: Maybe<Array<ResourceCreateManyTeamResourceToTeamInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ResourceCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Parent?: Maybe<Scalars['String']>;
  Team?: Maybe<Scalars['String']>;
  Service?: Maybe<Scalars['String']>;
  EthAccount?: Maybe<Scalars['String']>;
  PrismaProject?: Maybe<Scalars['String']>;
  Topic?: Maybe<Scalars['String']>;
  Blog?: Maybe<Scalars['String']>;
  Task?: Maybe<Scalars['String']>;
}

export interface ResourceCreateManyUserInputEnvelope {
  data?: Maybe<Array<ResourceCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ResourceCreateNestedManyWithoutEthAccountEthAccountToResourceInput {
  create?: Maybe<Array<ResourceCreateWithoutEthAccountEthAccountToResourceInput>>;
  connectOrCreate?: Maybe<Array<ResourceCreateOrConnectWithoutEthAccountEthAccountToResourceInput>>;
  createMany?: Maybe<ResourceCreateManyEthAccountEthAccountToResourceInputEnvelope>;
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
}

export interface ResourceCreateNestedManyWithoutProjectProjectToResourcePrismaProjectInput {
  create?: Maybe<Array<ResourceCreateWithoutProjectProjectToResourcePrismaProjectInput>>;
  connectOrCreate?: Maybe<Array<ResourceCreateOrConnectWithoutProjectProjectToResourcePrismaProjectInput>>;
  createMany?: Maybe<ResourceCreateManyProjectProjectToResourcePrismaProjectInputEnvelope>;
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
}

export interface ResourceCreateNestedManyWithoutResourceResourceToResourceBlogInput {
  create?: Maybe<Array<ResourceCreateWithoutResourceResourceToResourceBlogInput>>;
  connectOrCreate?: Maybe<Array<ResourceCreateOrConnectWithoutResourceResourceToResourceBlogInput>>;
  createMany?: Maybe<ResourceCreateManyResourceResourceToResourceBlogInputEnvelope>;
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
}

export interface ResourceCreateNestedManyWithoutResourceResourceToResourceParentInput {
  create?: Maybe<Array<ResourceCreateWithoutResourceResourceToResourceParentInput>>;
  connectOrCreate?: Maybe<Array<ResourceCreateOrConnectWithoutResourceResourceToResourceParentInput>>;
  createMany?: Maybe<ResourceCreateManyResourceResourceToResourceParentInputEnvelope>;
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
}

export interface ResourceCreateNestedManyWithoutResourceResourceToResourceTopicInput {
  create?: Maybe<Array<ResourceCreateWithoutResourceResourceToResourceTopicInput>>;
  connectOrCreate?: Maybe<Array<ResourceCreateOrConnectWithoutResourceResourceToResourceTopicInput>>;
  createMany?: Maybe<ResourceCreateManyResourceResourceToResourceTopicInputEnvelope>;
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
}

export interface ResourceCreateNestedManyWithoutServiceResourceToServiceInput {
  create?: Maybe<Array<ResourceCreateWithoutServiceResourceToServiceInput>>;
  connectOrCreate?: Maybe<Array<ResourceCreateOrConnectWithoutServiceResourceToServiceInput>>;
  createMany?: Maybe<ResourceCreateManyServiceResourceToServiceInputEnvelope>;
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
}

export interface ResourceCreateNestedManyWithoutTaskResourceToTaskInput {
  create?: Maybe<Array<ResourceCreateWithoutTaskResourceToTaskInput>>;
  connectOrCreate?: Maybe<Array<ResourceCreateOrConnectWithoutTaskResourceToTaskInput>>;
  createMany?: Maybe<ResourceCreateManyTaskResourceToTaskInputEnvelope>;
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
}

export interface ResourceCreateNestedManyWithoutTeamResourceToTeamInput {
  create?: Maybe<Array<ResourceCreateWithoutTeamResourceToTeamInput>>;
  connectOrCreate?: Maybe<Array<ResourceCreateOrConnectWithoutTeamResourceToTeamInput>>;
  createMany?: Maybe<ResourceCreateManyTeamResourceToTeamInputEnvelope>;
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
}

export interface ResourceCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<ResourceCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<ResourceCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<ResourceCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
}

export interface ResourceCreateNestedOneWithoutCodeChallengesInput {
  create?: Maybe<ResourceCreateWithoutCodeChallengesInput>;
  connectOrCreate?: Maybe<ResourceCreateOrConnectWithoutCodeChallengesInput>;
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface ResourceCreateNestedOneWithoutFilesInput {
  create?: Maybe<ResourceCreateWithoutFilesInput>;
  connectOrCreate?: Maybe<ResourceCreateOrConnectWithoutFilesInput>;
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface ResourceCreateNestedOneWithoutGalleriesInput {
  create?: Maybe<ResourceCreateWithoutGalleriesInput>;
  connectOrCreate?: Maybe<ResourceCreateOrConnectWithoutGalleriesInput>;
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface ResourceCreateNestedOneWithoutOtherResourceResourceToResourceBlogsInput {
  create?: Maybe<ResourceCreateWithoutOtherResourceResourceToResourceBlogsInput>;
  connectOrCreate?: Maybe<ResourceCreateOrConnectWithoutOtherResourceResourceToResourceBlogsInput>;
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface ResourceCreateNestedOneWithoutOtherResourceResourceToResourceParentsInput {
  create?: Maybe<ResourceCreateWithoutOtherResourceResourceToResourceParentsInput>;
  connectOrCreate?: Maybe<ResourceCreateOrConnectWithoutOtherResourceResourceToResourceParentsInput>;
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface ResourceCreateNestedOneWithoutOtherResourceResourceToResourceTopicsInput {
  create?: Maybe<ResourceCreateWithoutOtherResourceResourceToResourceTopicsInput>;
  connectOrCreate?: Maybe<ResourceCreateOrConnectWithoutOtherResourceResourceToResourceTopicsInput>;
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface ResourceCreateNestedOneWithoutProjectsProjectResourceToResourceInput {
  create?: Maybe<ResourceCreateWithoutProjectsProjectResourceToResourceInput>;
  connectOrCreate?: Maybe<ResourceCreateOrConnectWithoutProjectsProjectResourceToResourceInput>;
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface ResourceCreateNestedOneWithoutResourceTagsInput {
  create?: Maybe<ResourceCreateWithoutResourceTagsInput>;
  connectOrCreate?: Maybe<ResourceCreateOrConnectWithoutResourceTagsInput>;
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface ResourceCreateNestedOneWithoutVotesInput {
  create?: Maybe<ResourceCreateWithoutVotesInput>;
  connectOrCreate?: Maybe<ResourceCreateOrConnectWithoutVotesInput>;
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface ResourceCreateOrConnectWithoutCodeChallengesInput {
  where: ResourceWhereUniqueInput;
  create: ResourceCreateWithoutCodeChallengesInput;
}

export interface ResourceCreateOrConnectWithoutEthAccountEthAccountToResourceInput {
  where: ResourceWhereUniqueInput;
  create: ResourceCreateWithoutEthAccountEthAccountToResourceInput;
}

export interface ResourceCreateOrConnectWithoutFilesInput {
  where: ResourceWhereUniqueInput;
  create: ResourceCreateWithoutFilesInput;
}

export interface ResourceCreateOrConnectWithoutGalleriesInput {
  where: ResourceWhereUniqueInput;
  create: ResourceCreateWithoutGalleriesInput;
}

export interface ResourceCreateOrConnectWithoutOtherResourceResourceToResourceBlogsInput {
  where: ResourceWhereUniqueInput;
  create: ResourceCreateWithoutOtherResourceResourceToResourceBlogsInput;
}

export interface ResourceCreateOrConnectWithoutOtherResourceResourceToResourceParentsInput {
  where: ResourceWhereUniqueInput;
  create: ResourceCreateWithoutOtherResourceResourceToResourceParentsInput;
}

export interface ResourceCreateOrConnectWithoutOtherResourceResourceToResourceTopicsInput {
  where: ResourceWhereUniqueInput;
  create: ResourceCreateWithoutOtherResourceResourceToResourceTopicsInput;
}

export interface ResourceCreateOrConnectWithoutProjectProjectToResourcePrismaProjectInput {
  where: ResourceWhereUniqueInput;
  create: ResourceCreateWithoutProjectProjectToResourcePrismaProjectInput;
}

export interface ResourceCreateOrConnectWithoutProjectsProjectResourceToResourceInput {
  where: ResourceWhereUniqueInput;
  create: ResourceCreateWithoutProjectsProjectResourceToResourceInput;
}

export interface ResourceCreateOrConnectWithoutResourceTagsInput {
  where: ResourceWhereUniqueInput;
  create: ResourceCreateWithoutResourceTagsInput;
}

export interface ResourceCreateOrConnectWithoutResourceResourceToResourceBlogInput {
  where: ResourceWhereUniqueInput;
  create: ResourceCreateWithoutResourceResourceToResourceBlogInput;
}

export interface ResourceCreateOrConnectWithoutResourceResourceToResourceParentInput {
  where: ResourceWhereUniqueInput;
  create: ResourceCreateWithoutResourceResourceToResourceParentInput;
}

export interface ResourceCreateOrConnectWithoutResourceResourceToResourceTopicInput {
  where: ResourceWhereUniqueInput;
  create: ResourceCreateWithoutResourceResourceToResourceTopicInput;
}

export interface ResourceCreateOrConnectWithoutServiceResourceToServiceInput {
  where: ResourceWhereUniqueInput;
  create: ResourceCreateWithoutServiceResourceToServiceInput;
}

export interface ResourceCreateOrConnectWithoutTaskResourceToTaskInput {
  where: ResourceWhereUniqueInput;
  create: ResourceCreateWithoutTaskResourceToTaskInput;
}

export interface ResourceCreateOrConnectWithoutTeamResourceToTeamInput {
  where: ResourceWhereUniqueInput;
  create: ResourceCreateWithoutTeamResourceToTeamInput;
}

export interface ResourceCreateOrConnectWithoutUserInput {
  where: ResourceWhereUniqueInput;
  create: ResourceCreateWithoutUserInput;
}

export interface ResourceCreateOrConnectWithoutVotesInput {
  where: ResourceWhereUniqueInput;
  create: ResourceCreateWithoutVotesInput;
}

export interface ResourceCreateWithoutCodeChallengesInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Resource_ResourceToResource_Blog?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceBlogsInput>;
  User?: Maybe<UserCreateNestedOneWithoutResourcesInput>;
  EthAccount_EthAccountToResource?: Maybe<EthAccountCreateNestedOneWithoutResourceInput>;
  Resource_ResourceToResource_Parent?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceParentsInput>;
  Project_ProjectToResource_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutResourcesProjectToResourcePrismaProjectInput>;
  Service_ResourceToService?: Maybe<ServiceCreateNestedOneWithoutResourcesInput>;
  Task_ResourceToTask?: Maybe<TaskCreateNestedOneWithoutResourcesInput>;
  Team_ResourceToTeam?: Maybe<TeamCreateNestedOneWithoutResourcesInput>;
  Resource_ResourceToResource_Topic?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceTopicsInput>;
  Files?: Maybe<FileCreateNestedManyWithoutResourceInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutResourceGalleryToResourceInput>;
  Projects_Project_ResourceToResource?: Maybe<ProjectCreateNestedManyWithoutResourceProjectResourceToResourceInput>;
  other_Resource_ResourceToResource_Blogs?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceBlogInput>;
  other_Resource_ResourceToResource_Parents?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceParentInput>;
  other_Resource_ResourceToResource_Topics?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceTopicInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutResourceResourceToResourceTagInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutResourceResourceToVoteInput>;
}

export interface ResourceCreateWithoutEthAccountEthAccountToResourceInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Resource_ResourceToResource_Blog?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceBlogsInput>;
  User?: Maybe<UserCreateNestedOneWithoutResourcesInput>;
  Resource_ResourceToResource_Parent?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceParentsInput>;
  Project_ProjectToResource_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutResourcesProjectToResourcePrismaProjectInput>;
  Service_ResourceToService?: Maybe<ServiceCreateNestedOneWithoutResourcesInput>;
  Task_ResourceToTask?: Maybe<TaskCreateNestedOneWithoutResourcesInput>;
  Team_ResourceToTeam?: Maybe<TeamCreateNestedOneWithoutResourcesInput>;
  Resource_ResourceToResource_Topic?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceTopicsInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutResourceInput>;
  Files?: Maybe<FileCreateNestedManyWithoutResourceInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutResourceGalleryToResourceInput>;
  Projects_Project_ResourceToResource?: Maybe<ProjectCreateNestedManyWithoutResourceProjectResourceToResourceInput>;
  other_Resource_ResourceToResource_Blogs?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceBlogInput>;
  other_Resource_ResourceToResource_Parents?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceParentInput>;
  other_Resource_ResourceToResource_Topics?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceTopicInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutResourceResourceToResourceTagInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutResourceResourceToVoteInput>;
}

export interface ResourceCreateWithoutFilesInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Resource_ResourceToResource_Blog?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceBlogsInput>;
  User?: Maybe<UserCreateNestedOneWithoutResourcesInput>;
  EthAccount_EthAccountToResource?: Maybe<EthAccountCreateNestedOneWithoutResourceInput>;
  Resource_ResourceToResource_Parent?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceParentsInput>;
  Project_ProjectToResource_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutResourcesProjectToResourcePrismaProjectInput>;
  Service_ResourceToService?: Maybe<ServiceCreateNestedOneWithoutResourcesInput>;
  Task_ResourceToTask?: Maybe<TaskCreateNestedOneWithoutResourcesInput>;
  Team_ResourceToTeam?: Maybe<TeamCreateNestedOneWithoutResourcesInput>;
  Resource_ResourceToResource_Topic?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceTopicsInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutResourceInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutResourceGalleryToResourceInput>;
  Projects_Project_ResourceToResource?: Maybe<ProjectCreateNestedManyWithoutResourceProjectResourceToResourceInput>;
  other_Resource_ResourceToResource_Blogs?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceBlogInput>;
  other_Resource_ResourceToResource_Parents?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceParentInput>;
  other_Resource_ResourceToResource_Topics?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceTopicInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutResourceResourceToResourceTagInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutResourceResourceToVoteInput>;
}

export interface ResourceCreateWithoutGalleriesInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Resource_ResourceToResource_Blog?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceBlogsInput>;
  User?: Maybe<UserCreateNestedOneWithoutResourcesInput>;
  EthAccount_EthAccountToResource?: Maybe<EthAccountCreateNestedOneWithoutResourceInput>;
  Resource_ResourceToResource_Parent?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceParentsInput>;
  Project_ProjectToResource_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutResourcesProjectToResourcePrismaProjectInput>;
  Service_ResourceToService?: Maybe<ServiceCreateNestedOneWithoutResourcesInput>;
  Task_ResourceToTask?: Maybe<TaskCreateNestedOneWithoutResourcesInput>;
  Team_ResourceToTeam?: Maybe<TeamCreateNestedOneWithoutResourcesInput>;
  Resource_ResourceToResource_Topic?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceTopicsInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutResourceInput>;
  Files?: Maybe<FileCreateNestedManyWithoutResourceInput>;
  Projects_Project_ResourceToResource?: Maybe<ProjectCreateNestedManyWithoutResourceProjectResourceToResourceInput>;
  other_Resource_ResourceToResource_Blogs?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceBlogInput>;
  other_Resource_ResourceToResource_Parents?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceParentInput>;
  other_Resource_ResourceToResource_Topics?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceTopicInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutResourceResourceToResourceTagInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutResourceResourceToVoteInput>;
}

export interface ResourceCreateWithoutOtherResourceResourceToResourceBlogsInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Resource_ResourceToResource_Blog?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceBlogsInput>;
  User?: Maybe<UserCreateNestedOneWithoutResourcesInput>;
  EthAccount_EthAccountToResource?: Maybe<EthAccountCreateNestedOneWithoutResourceInput>;
  Resource_ResourceToResource_Parent?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceParentsInput>;
  Project_ProjectToResource_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutResourcesProjectToResourcePrismaProjectInput>;
  Service_ResourceToService?: Maybe<ServiceCreateNestedOneWithoutResourcesInput>;
  Task_ResourceToTask?: Maybe<TaskCreateNestedOneWithoutResourcesInput>;
  Team_ResourceToTeam?: Maybe<TeamCreateNestedOneWithoutResourcesInput>;
  Resource_ResourceToResource_Topic?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceTopicsInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutResourceInput>;
  Files?: Maybe<FileCreateNestedManyWithoutResourceInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutResourceGalleryToResourceInput>;
  Projects_Project_ResourceToResource?: Maybe<ProjectCreateNestedManyWithoutResourceProjectResourceToResourceInput>;
  other_Resource_ResourceToResource_Parents?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceParentInput>;
  other_Resource_ResourceToResource_Topics?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceTopicInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutResourceResourceToResourceTagInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutResourceResourceToVoteInput>;
}

export interface ResourceCreateWithoutOtherResourceResourceToResourceParentsInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Resource_ResourceToResource_Blog?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceBlogsInput>;
  User?: Maybe<UserCreateNestedOneWithoutResourcesInput>;
  EthAccount_EthAccountToResource?: Maybe<EthAccountCreateNestedOneWithoutResourceInput>;
  Resource_ResourceToResource_Parent?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceParentsInput>;
  Project_ProjectToResource_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutResourcesProjectToResourcePrismaProjectInput>;
  Service_ResourceToService?: Maybe<ServiceCreateNestedOneWithoutResourcesInput>;
  Task_ResourceToTask?: Maybe<TaskCreateNestedOneWithoutResourcesInput>;
  Team_ResourceToTeam?: Maybe<TeamCreateNestedOneWithoutResourcesInput>;
  Resource_ResourceToResource_Topic?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceTopicsInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutResourceInput>;
  Files?: Maybe<FileCreateNestedManyWithoutResourceInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutResourceGalleryToResourceInput>;
  Projects_Project_ResourceToResource?: Maybe<ProjectCreateNestedManyWithoutResourceProjectResourceToResourceInput>;
  other_Resource_ResourceToResource_Blogs?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceBlogInput>;
  other_Resource_ResourceToResource_Topics?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceTopicInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutResourceResourceToResourceTagInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutResourceResourceToVoteInput>;
}

export interface ResourceCreateWithoutOtherResourceResourceToResourceTopicsInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Resource_ResourceToResource_Blog?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceBlogsInput>;
  User?: Maybe<UserCreateNestedOneWithoutResourcesInput>;
  EthAccount_EthAccountToResource?: Maybe<EthAccountCreateNestedOneWithoutResourceInput>;
  Resource_ResourceToResource_Parent?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceParentsInput>;
  Project_ProjectToResource_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutResourcesProjectToResourcePrismaProjectInput>;
  Service_ResourceToService?: Maybe<ServiceCreateNestedOneWithoutResourcesInput>;
  Task_ResourceToTask?: Maybe<TaskCreateNestedOneWithoutResourcesInput>;
  Team_ResourceToTeam?: Maybe<TeamCreateNestedOneWithoutResourcesInput>;
  Resource_ResourceToResource_Topic?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceTopicsInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutResourceInput>;
  Files?: Maybe<FileCreateNestedManyWithoutResourceInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutResourceGalleryToResourceInput>;
  Projects_Project_ResourceToResource?: Maybe<ProjectCreateNestedManyWithoutResourceProjectResourceToResourceInput>;
  other_Resource_ResourceToResource_Blogs?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceBlogInput>;
  other_Resource_ResourceToResource_Parents?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceParentInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutResourceResourceToResourceTagInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutResourceResourceToVoteInput>;
}

export interface ResourceCreateWithoutProjectProjectToResourcePrismaProjectInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Resource_ResourceToResource_Blog?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceBlogsInput>;
  User?: Maybe<UserCreateNestedOneWithoutResourcesInput>;
  EthAccount_EthAccountToResource?: Maybe<EthAccountCreateNestedOneWithoutResourceInput>;
  Resource_ResourceToResource_Parent?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceParentsInput>;
  Service_ResourceToService?: Maybe<ServiceCreateNestedOneWithoutResourcesInput>;
  Task_ResourceToTask?: Maybe<TaskCreateNestedOneWithoutResourcesInput>;
  Team_ResourceToTeam?: Maybe<TeamCreateNestedOneWithoutResourcesInput>;
  Resource_ResourceToResource_Topic?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceTopicsInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutResourceInput>;
  Files?: Maybe<FileCreateNestedManyWithoutResourceInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutResourceGalleryToResourceInput>;
  Projects_Project_ResourceToResource?: Maybe<ProjectCreateNestedManyWithoutResourceProjectResourceToResourceInput>;
  other_Resource_ResourceToResource_Blogs?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceBlogInput>;
  other_Resource_ResourceToResource_Parents?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceParentInput>;
  other_Resource_ResourceToResource_Topics?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceTopicInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutResourceResourceToResourceTagInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutResourceResourceToVoteInput>;
}

export interface ResourceCreateWithoutProjectsProjectResourceToResourceInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Resource_ResourceToResource_Blog?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceBlogsInput>;
  User?: Maybe<UserCreateNestedOneWithoutResourcesInput>;
  EthAccount_EthAccountToResource?: Maybe<EthAccountCreateNestedOneWithoutResourceInput>;
  Resource_ResourceToResource_Parent?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceParentsInput>;
  Project_ProjectToResource_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutResourcesProjectToResourcePrismaProjectInput>;
  Service_ResourceToService?: Maybe<ServiceCreateNestedOneWithoutResourcesInput>;
  Task_ResourceToTask?: Maybe<TaskCreateNestedOneWithoutResourcesInput>;
  Team_ResourceToTeam?: Maybe<TeamCreateNestedOneWithoutResourcesInput>;
  Resource_ResourceToResource_Topic?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceTopicsInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutResourceInput>;
  Files?: Maybe<FileCreateNestedManyWithoutResourceInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutResourceGalleryToResourceInput>;
  other_Resource_ResourceToResource_Blogs?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceBlogInput>;
  other_Resource_ResourceToResource_Parents?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceParentInput>;
  other_Resource_ResourceToResource_Topics?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceTopicInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutResourceResourceToResourceTagInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutResourceResourceToVoteInput>;
}

export interface ResourceCreateWithoutResourceTagsInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Resource_ResourceToResource_Blog?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceBlogsInput>;
  User?: Maybe<UserCreateNestedOneWithoutResourcesInput>;
  EthAccount_EthAccountToResource?: Maybe<EthAccountCreateNestedOneWithoutResourceInput>;
  Resource_ResourceToResource_Parent?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceParentsInput>;
  Project_ProjectToResource_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutResourcesProjectToResourcePrismaProjectInput>;
  Service_ResourceToService?: Maybe<ServiceCreateNestedOneWithoutResourcesInput>;
  Task_ResourceToTask?: Maybe<TaskCreateNestedOneWithoutResourcesInput>;
  Team_ResourceToTeam?: Maybe<TeamCreateNestedOneWithoutResourcesInput>;
  Resource_ResourceToResource_Topic?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceTopicsInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutResourceInput>;
  Files?: Maybe<FileCreateNestedManyWithoutResourceInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutResourceGalleryToResourceInput>;
  Projects_Project_ResourceToResource?: Maybe<ProjectCreateNestedManyWithoutResourceProjectResourceToResourceInput>;
  other_Resource_ResourceToResource_Blogs?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceBlogInput>;
  other_Resource_ResourceToResource_Parents?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceParentInput>;
  other_Resource_ResourceToResource_Topics?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceTopicInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutResourceResourceToVoteInput>;
}

export interface ResourceCreateWithoutResourceResourceToResourceBlogInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  User?: Maybe<UserCreateNestedOneWithoutResourcesInput>;
  EthAccount_EthAccountToResource?: Maybe<EthAccountCreateNestedOneWithoutResourceInput>;
  Resource_ResourceToResource_Parent?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceParentsInput>;
  Project_ProjectToResource_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutResourcesProjectToResourcePrismaProjectInput>;
  Service_ResourceToService?: Maybe<ServiceCreateNestedOneWithoutResourcesInput>;
  Task_ResourceToTask?: Maybe<TaskCreateNestedOneWithoutResourcesInput>;
  Team_ResourceToTeam?: Maybe<TeamCreateNestedOneWithoutResourcesInput>;
  Resource_ResourceToResource_Topic?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceTopicsInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutResourceInput>;
  Files?: Maybe<FileCreateNestedManyWithoutResourceInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutResourceGalleryToResourceInput>;
  Projects_Project_ResourceToResource?: Maybe<ProjectCreateNestedManyWithoutResourceProjectResourceToResourceInput>;
  other_Resource_ResourceToResource_Blogs?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceBlogInput>;
  other_Resource_ResourceToResource_Parents?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceParentInput>;
  other_Resource_ResourceToResource_Topics?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceTopicInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutResourceResourceToResourceTagInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutResourceResourceToVoteInput>;
}

export interface ResourceCreateWithoutResourceResourceToResourceParentInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Resource_ResourceToResource_Blog?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceBlogsInput>;
  User?: Maybe<UserCreateNestedOneWithoutResourcesInput>;
  EthAccount_EthAccountToResource?: Maybe<EthAccountCreateNestedOneWithoutResourceInput>;
  Project_ProjectToResource_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutResourcesProjectToResourcePrismaProjectInput>;
  Service_ResourceToService?: Maybe<ServiceCreateNestedOneWithoutResourcesInput>;
  Task_ResourceToTask?: Maybe<TaskCreateNestedOneWithoutResourcesInput>;
  Team_ResourceToTeam?: Maybe<TeamCreateNestedOneWithoutResourcesInput>;
  Resource_ResourceToResource_Topic?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceTopicsInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutResourceInput>;
  Files?: Maybe<FileCreateNestedManyWithoutResourceInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutResourceGalleryToResourceInput>;
  Projects_Project_ResourceToResource?: Maybe<ProjectCreateNestedManyWithoutResourceProjectResourceToResourceInput>;
  other_Resource_ResourceToResource_Blogs?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceBlogInput>;
  other_Resource_ResourceToResource_Parents?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceParentInput>;
  other_Resource_ResourceToResource_Topics?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceTopicInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutResourceResourceToResourceTagInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutResourceResourceToVoteInput>;
}

export interface ResourceCreateWithoutResourceResourceToResourceTopicInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Resource_ResourceToResource_Blog?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceBlogsInput>;
  User?: Maybe<UserCreateNestedOneWithoutResourcesInput>;
  EthAccount_EthAccountToResource?: Maybe<EthAccountCreateNestedOneWithoutResourceInput>;
  Resource_ResourceToResource_Parent?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceParentsInput>;
  Project_ProjectToResource_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutResourcesProjectToResourcePrismaProjectInput>;
  Service_ResourceToService?: Maybe<ServiceCreateNestedOneWithoutResourcesInput>;
  Task_ResourceToTask?: Maybe<TaskCreateNestedOneWithoutResourcesInput>;
  Team_ResourceToTeam?: Maybe<TeamCreateNestedOneWithoutResourcesInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutResourceInput>;
  Files?: Maybe<FileCreateNestedManyWithoutResourceInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutResourceGalleryToResourceInput>;
  Projects_Project_ResourceToResource?: Maybe<ProjectCreateNestedManyWithoutResourceProjectResourceToResourceInput>;
  other_Resource_ResourceToResource_Blogs?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceBlogInput>;
  other_Resource_ResourceToResource_Parents?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceParentInput>;
  other_Resource_ResourceToResource_Topics?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceTopicInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutResourceResourceToResourceTagInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutResourceResourceToVoteInput>;
}

export interface ResourceCreateWithoutServiceResourceToServiceInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Resource_ResourceToResource_Blog?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceBlogsInput>;
  User?: Maybe<UserCreateNestedOneWithoutResourcesInput>;
  EthAccount_EthAccountToResource?: Maybe<EthAccountCreateNestedOneWithoutResourceInput>;
  Resource_ResourceToResource_Parent?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceParentsInput>;
  Project_ProjectToResource_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutResourcesProjectToResourcePrismaProjectInput>;
  Task_ResourceToTask?: Maybe<TaskCreateNestedOneWithoutResourcesInput>;
  Team_ResourceToTeam?: Maybe<TeamCreateNestedOneWithoutResourcesInput>;
  Resource_ResourceToResource_Topic?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceTopicsInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutResourceInput>;
  Files?: Maybe<FileCreateNestedManyWithoutResourceInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutResourceGalleryToResourceInput>;
  Projects_Project_ResourceToResource?: Maybe<ProjectCreateNestedManyWithoutResourceProjectResourceToResourceInput>;
  other_Resource_ResourceToResource_Blogs?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceBlogInput>;
  other_Resource_ResourceToResource_Parents?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceParentInput>;
  other_Resource_ResourceToResource_Topics?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceTopicInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutResourceResourceToResourceTagInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutResourceResourceToVoteInput>;
}

export interface ResourceCreateWithoutTaskResourceToTaskInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Resource_ResourceToResource_Blog?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceBlogsInput>;
  User?: Maybe<UserCreateNestedOneWithoutResourcesInput>;
  EthAccount_EthAccountToResource?: Maybe<EthAccountCreateNestedOneWithoutResourceInput>;
  Resource_ResourceToResource_Parent?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceParentsInput>;
  Project_ProjectToResource_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutResourcesProjectToResourcePrismaProjectInput>;
  Service_ResourceToService?: Maybe<ServiceCreateNestedOneWithoutResourcesInput>;
  Team_ResourceToTeam?: Maybe<TeamCreateNestedOneWithoutResourcesInput>;
  Resource_ResourceToResource_Topic?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceTopicsInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutResourceInput>;
  Files?: Maybe<FileCreateNestedManyWithoutResourceInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutResourceGalleryToResourceInput>;
  Projects_Project_ResourceToResource?: Maybe<ProjectCreateNestedManyWithoutResourceProjectResourceToResourceInput>;
  other_Resource_ResourceToResource_Blogs?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceBlogInput>;
  other_Resource_ResourceToResource_Parents?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceParentInput>;
  other_Resource_ResourceToResource_Topics?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceTopicInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutResourceResourceToResourceTagInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutResourceResourceToVoteInput>;
}

export interface ResourceCreateWithoutTeamResourceToTeamInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Resource_ResourceToResource_Blog?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceBlogsInput>;
  User?: Maybe<UserCreateNestedOneWithoutResourcesInput>;
  EthAccount_EthAccountToResource?: Maybe<EthAccountCreateNestedOneWithoutResourceInput>;
  Resource_ResourceToResource_Parent?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceParentsInput>;
  Project_ProjectToResource_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutResourcesProjectToResourcePrismaProjectInput>;
  Service_ResourceToService?: Maybe<ServiceCreateNestedOneWithoutResourcesInput>;
  Task_ResourceToTask?: Maybe<TaskCreateNestedOneWithoutResourcesInput>;
  Resource_ResourceToResource_Topic?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceTopicsInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutResourceInput>;
  Files?: Maybe<FileCreateNestedManyWithoutResourceInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutResourceGalleryToResourceInput>;
  Projects_Project_ResourceToResource?: Maybe<ProjectCreateNestedManyWithoutResourceProjectResourceToResourceInput>;
  other_Resource_ResourceToResource_Blogs?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceBlogInput>;
  other_Resource_ResourceToResource_Parents?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceParentInput>;
  other_Resource_ResourceToResource_Topics?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceTopicInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutResourceResourceToResourceTagInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutResourceResourceToVoteInput>;
}

export interface ResourceCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Resource_ResourceToResource_Blog?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceBlogsInput>;
  EthAccount_EthAccountToResource?: Maybe<EthAccountCreateNestedOneWithoutResourceInput>;
  Resource_ResourceToResource_Parent?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceParentsInput>;
  Project_ProjectToResource_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutResourcesProjectToResourcePrismaProjectInput>;
  Service_ResourceToService?: Maybe<ServiceCreateNestedOneWithoutResourcesInput>;
  Task_ResourceToTask?: Maybe<TaskCreateNestedOneWithoutResourcesInput>;
  Team_ResourceToTeam?: Maybe<TeamCreateNestedOneWithoutResourcesInput>;
  Resource_ResourceToResource_Topic?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceTopicsInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutResourceInput>;
  Files?: Maybe<FileCreateNestedManyWithoutResourceInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutResourceGalleryToResourceInput>;
  Projects_Project_ResourceToResource?: Maybe<ProjectCreateNestedManyWithoutResourceProjectResourceToResourceInput>;
  other_Resource_ResourceToResource_Blogs?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceBlogInput>;
  other_Resource_ResourceToResource_Parents?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceParentInput>;
  other_Resource_ResourceToResource_Topics?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceTopicInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutResourceResourceToResourceTagInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutResourceResourceToVoteInput>;
}

export interface ResourceCreateWithoutVotesInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Decimal']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  Resource_ResourceToResource_Blog?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceBlogsInput>;
  User?: Maybe<UserCreateNestedOneWithoutResourcesInput>;
  EthAccount_EthAccountToResource?: Maybe<EthAccountCreateNestedOneWithoutResourceInput>;
  Resource_ResourceToResource_Parent?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceParentsInput>;
  Project_ProjectToResource_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutResourcesProjectToResourcePrismaProjectInput>;
  Service_ResourceToService?: Maybe<ServiceCreateNestedOneWithoutResourcesInput>;
  Task_ResourceToTask?: Maybe<TaskCreateNestedOneWithoutResourcesInput>;
  Team_ResourceToTeam?: Maybe<TeamCreateNestedOneWithoutResourcesInput>;
  Resource_ResourceToResource_Topic?: Maybe<ResourceCreateNestedOneWithoutOtherResourceResourceToResourceTopicsInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutResourceInput>;
  Files?: Maybe<FileCreateNestedManyWithoutResourceInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutResourceGalleryToResourceInput>;
  Projects_Project_ResourceToResource?: Maybe<ProjectCreateNestedManyWithoutResourceProjectResourceToResourceInput>;
  other_Resource_ResourceToResource_Blogs?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceBlogInput>;
  other_Resource_ResourceToResource_Parents?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceParentInput>;
  other_Resource_ResourceToResource_Topics?: Maybe<ResourceCreateNestedManyWithoutResourceResourceToResourceTopicInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutResourceResourceToResourceTagInput>;
}

export interface ResourceListRelationFilter {
  every?: Maybe<ResourceWhereInput>;
  some?: Maybe<ResourceWhereInput>;
  none?: Maybe<ResourceWhereInput>;
}

export interface ResourceOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface ResourceOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  code?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  type?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  longtitle?: Maybe<SortOrder>;
  content?: Maybe<SortOrder>;
  contentText?: Maybe<SortOrder>;
  published?: Maybe<SortOrder>;
  deleted?: Maybe<SortOrder>;
  hidemenu?: Maybe<SortOrder>;
  searchable?: Maybe<SortOrder>;
  uri?: Maybe<SortOrder>;
  isfolder?: Maybe<SortOrder>;
  rating?: Maybe<SortOrder>;
  positiveVotesCount?: Maybe<SortOrder>;
  negativeVotesCount?: Maybe<SortOrder>;
  neutralVotesCount?: Maybe<SortOrder>;
  oldID?: Maybe<SortOrder>;
  commentOldID?: Maybe<SortOrder>;
  class_key?: Maybe<SortOrder>;
  template?: Maybe<SortOrder>;
  mockUpdate?: Maybe<SortOrder>;
  components?: Maybe<SortOrder>;
  Parent?: Maybe<SortOrder>;
  Team?: Maybe<SortOrder>;
  Service?: Maybe<SortOrder>;
  EthAccount?: Maybe<SortOrder>;
  PrismaProject?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  Topic?: Maybe<SortOrder>;
  Blog?: Maybe<SortOrder>;
  Task?: Maybe<SortOrder>;
  Resource_ResourceToResource_Blog?: Maybe<ResourceOrderByWithRelationInput>;
  User?: Maybe<UserOrderByWithRelationInput>;
  EthAccount_EthAccountToResource?: Maybe<EthAccountOrderByWithRelationInput>;
  Resource_ResourceToResource_Parent?: Maybe<ResourceOrderByWithRelationInput>;
  Project_ProjectToResource_PrismaProject?: Maybe<ProjectOrderByWithRelationInput>;
  Service_ResourceToService?: Maybe<ServiceOrderByWithRelationInput>;
  Task_ResourceToTask?: Maybe<TaskOrderByWithRelationInput>;
  Team_ResourceToTeam?: Maybe<TeamOrderByWithRelationInput>;
  Resource_ResourceToResource_Topic?: Maybe<ResourceOrderByWithRelationInput>;
  CodeChallenges?: Maybe<CodeChallengeOrderByRelationAggregateInput>;
  Files?: Maybe<FileOrderByRelationAggregateInput>;
  Galleries?: Maybe<GalleryOrderByRelationAggregateInput>;
  Projects_Project_ResourceToResource?: Maybe<ProjectOrderByRelationAggregateInput>;
  other_Resource_ResourceToResource_Blogs?: Maybe<ResourceOrderByRelationAggregateInput>;
  other_Resource_ResourceToResource_Parents?: Maybe<ResourceOrderByRelationAggregateInput>;
  other_Resource_ResourceToResource_Topics?: Maybe<ResourceOrderByRelationAggregateInput>;
  ResourceTags?: Maybe<ResourceTagOrderByRelationAggregateInput>;
  Votes?: Maybe<VoteOrderByRelationAggregateInput>;
}

export interface ResourceResponse {
  __typename?: 'ResourceResponse';
  success: Scalars['Boolean'];
  message: Scalars['String'];
  errors: Array<RequestError>;
  data?: Maybe<Resource>;
}

export interface ResourceTag {
  __typename?: 'ResourceTag';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  status: TagStatus;
  CreatedBy?: Maybe<User>;
  Resource?: Maybe<Resource>;
  Tag?: Maybe<Tag>;
}

export interface ResourceTagCreateManyResourceResourceToResourceTagInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  status: Scalars['String'];
  CreatedBy?: Maybe<Scalars['String']>;
  Tag?: Maybe<Scalars['String']>;
}

export interface ResourceTagCreateManyResourceResourceToResourceTagInputEnvelope {
  data?: Maybe<Array<ResourceTagCreateManyResourceResourceToResourceTagInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ResourceTagCreateManyTagResourceTagToTagInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  status: Scalars['String'];
  CreatedBy?: Maybe<Scalars['String']>;
  Resource?: Maybe<Scalars['String']>;
}

export interface ResourceTagCreateManyTagResourceTagToTagInputEnvelope {
  data?: Maybe<Array<ResourceTagCreateManyTagResourceTagToTagInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ResourceTagCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  status: Scalars['String'];
  Resource?: Maybe<Scalars['String']>;
  Tag?: Maybe<Scalars['String']>;
}

export interface ResourceTagCreateManyUserInputEnvelope {
  data?: Maybe<Array<ResourceTagCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ResourceTagCreateNestedManyWithoutResourceResourceToResourceTagInput {
  create?: Maybe<Array<ResourceTagCreateWithoutResourceResourceToResourceTagInput>>;
  connectOrCreate?: Maybe<Array<ResourceTagCreateOrConnectWithoutResourceResourceToResourceTagInput>>;
  createMany?: Maybe<ResourceTagCreateManyResourceResourceToResourceTagInputEnvelope>;
  connect?: Maybe<Array<ResourceTagWhereUniqueInput>>;
}

export interface ResourceTagCreateNestedManyWithoutTagResourceTagToTagInput {
  create?: Maybe<Array<ResourceTagCreateWithoutTagResourceTagToTagInput>>;
  connectOrCreate?: Maybe<Array<ResourceTagCreateOrConnectWithoutTagResourceTagToTagInput>>;
  createMany?: Maybe<ResourceTagCreateManyTagResourceTagToTagInputEnvelope>;
  connect?: Maybe<Array<ResourceTagWhereUniqueInput>>;
}

export interface ResourceTagCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<ResourceTagCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<ResourceTagCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<ResourceTagCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<ResourceTagWhereUniqueInput>>;
}

export interface ResourceTagCreateOrConnectWithoutResourceResourceToResourceTagInput {
  where: ResourceTagWhereUniqueInput;
  create: ResourceTagCreateWithoutResourceResourceToResourceTagInput;
}

export interface ResourceTagCreateOrConnectWithoutTagResourceTagToTagInput {
  where: ResourceTagWhereUniqueInput;
  create: ResourceTagCreateWithoutTagResourceTagToTagInput;
}

export interface ResourceTagCreateOrConnectWithoutUserInput {
  where: ResourceTagWhereUniqueInput;
  create: ResourceTagCreateWithoutUserInput;
}

export interface ResourceTagCreateWithoutResourceResourceToResourceTagInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  status: Scalars['String'];
  User?: Maybe<UserCreateNestedOneWithoutResourceTagsInput>;
  Tag_ResourceTagToTag?: Maybe<TagCreateNestedOneWithoutResourceTagsInput>;
}

export interface ResourceTagCreateWithoutTagResourceTagToTagInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  status: Scalars['String'];
  User?: Maybe<UserCreateNestedOneWithoutResourceTagsInput>;
  Resource_ResourceToResourceTag?: Maybe<ResourceCreateNestedOneWithoutResourceTagsInput>;
}

export interface ResourceTagCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  status: Scalars['String'];
  Resource_ResourceToResourceTag?: Maybe<ResourceCreateNestedOneWithoutResourceTagsInput>;
  Tag_ResourceTagToTag?: Maybe<TagCreateNestedOneWithoutResourceTagsInput>;
}

export interface ResourceTagListRelationFilter {
  every?: Maybe<ResourceTagWhereInput>;
  some?: Maybe<ResourceTagWhereInput>;
  none?: Maybe<ResourceTagWhereInput>;
}

export interface ResourceTagOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface ResourceTagWhereInput {
  AND?: Maybe<Array<ResourceTagWhereInput>>;
  OR?: Maybe<Array<ResourceTagWhereInput>>;
  NOT?: Maybe<Array<ResourceTagWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  status?: Maybe<StringFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  Resource?: Maybe<StringNullableFilter>;
  Tag?: Maybe<StringNullableFilter>;
  User?: Maybe<UserWhereInput>;
  Resource_ResourceToResourceTag?: Maybe<ResourceWhereInput>;
  Tag_ResourceTagToTag?: Maybe<TagWhereInput>;
}

export interface ResourceTagWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export enum ResourceType {
  BLOG = 'Blog',
  COMMENT = 'Comment',
  PERSONALBLOG = 'PersonalBlog',
  PROJECT = 'Project',
  RESOURCE = 'Resource',
  SERVICE = 'Service',
  TEAM = 'Team',
  TOPIC = 'Topic'
}

export interface ResourceWhereInput {
  AND?: Maybe<Array<ResourceWhereInput>>;
  OR?: Maybe<Array<ResourceWhereInput>>;
  NOT?: Maybe<Array<ResourceWhereInput>>;
  id?: Maybe<StringFilter>;
  code?: Maybe<StringNullableFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  type?: Maybe<EnumResourceTypeFilter>;
  name?: Maybe<StringNullableFilter>;
  longtitle?: Maybe<StringNullableFilter>;
  content?: Maybe<JsonNullableFilter>;
  contentText?: Maybe<StringNullableFilter>;
  published?: Maybe<BoolFilter>;
  deleted?: Maybe<BoolFilter>;
  hidemenu?: Maybe<BoolFilter>;
  searchable?: Maybe<BoolFilter>;
  uri?: Maybe<StringFilter>;
  isfolder?: Maybe<BoolFilter>;
  rating?: Maybe<DecimalNullableFilter>;
  positiveVotesCount?: Maybe<IntNullableFilter>;
  negativeVotesCount?: Maybe<IntNullableFilter>;
  neutralVotesCount?: Maybe<IntNullableFilter>;
  oldID?: Maybe<IntNullableFilter>;
  commentOldID?: Maybe<IntNullableFilter>;
  class_key?: Maybe<StringNullableFilter>;
  template?: Maybe<IntNullableFilter>;
  mockUpdate?: Maybe<DateTimeNullableFilter>;
  components?: Maybe<JsonNullableFilter>;
  Parent?: Maybe<StringNullableFilter>;
  Team?: Maybe<StringNullableFilter>;
  Service?: Maybe<StringNullableFilter>;
  EthAccount?: Maybe<StringNullableFilter>;
  PrismaProject?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  Topic?: Maybe<StringNullableFilter>;
  Blog?: Maybe<StringNullableFilter>;
  Task?: Maybe<StringNullableFilter>;
  Resource_ResourceToResource_Blog?: Maybe<ResourceWhereInput>;
  User?: Maybe<UserWhereInput>;
  EthAccount_EthAccountToResource?: Maybe<EthAccountWhereInput>;
  Resource_ResourceToResource_Parent?: Maybe<ResourceWhereInput>;
  Project_ProjectToResource_PrismaProject?: Maybe<ProjectWhereInput>;
  Service_ResourceToService?: Maybe<ServiceWhereInput>;
  Task_ResourceToTask?: Maybe<TaskWhereInput>;
  Team_ResourceToTeam?: Maybe<TeamWhereInput>;
  Resource_ResourceToResource_Topic?: Maybe<ResourceWhereInput>;
  CodeChallenges?: Maybe<CodeChallengeListRelationFilter>;
  Files?: Maybe<FileListRelationFilter>;
  Galleries?: Maybe<GalleryListRelationFilter>;
  Projects_Project_ResourceToResource?: Maybe<ProjectListRelationFilter>;
  other_Resource_ResourceToResource_Blogs?: Maybe<ResourceListRelationFilter>;
  other_Resource_ResourceToResource_Parents?: Maybe<ResourceListRelationFilter>;
  other_Resource_ResourceToResource_Topics?: Maybe<ResourceListRelationFilter>;
  ResourceTags?: Maybe<ResourceTagListRelationFilter>;
  Votes?: Maybe<VoteListRelationFilter>;
}

export interface ResourceWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  uri?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
}

export interface RouteCreateManyRouteInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  exact: Scalars['Boolean'];
  component: Scalars['String'];
  CreatedBy?: Maybe<Scalars['String']>;
}

export interface RouteCreateManyRouteInputEnvelope {
  data?: Maybe<Array<RouteCreateManyRouteInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface RouteCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  exact: Scalars['Boolean'];
  component: Scalars['String'];
  Parent?: Maybe<Scalars['String']>;
}

export interface RouteCreateManyUserInputEnvelope {
  data?: Maybe<Array<RouteCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface RouteCreateNestedManyWithoutRouteInput {
  create?: Maybe<Array<RouteCreateWithoutRouteInput>>;
  connectOrCreate?: Maybe<Array<RouteCreateOrConnectWithoutRouteInput>>;
  createMany?: Maybe<RouteCreateManyRouteInputEnvelope>;
  connect?: Maybe<Array<RouteWhereUniqueInput>>;
}

export interface RouteCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<RouteCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<RouteCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<RouteCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<RouteWhereUniqueInput>>;
}

export interface RouteCreateNestedOneWithoutOtherRoutesInput {
  create?: Maybe<RouteCreateWithoutOtherRoutesInput>;
  connectOrCreate?: Maybe<RouteCreateOrConnectWithoutOtherRoutesInput>;
  connect?: Maybe<RouteWhereUniqueInput>;
}

export interface RouteCreateOrConnectWithoutOtherRoutesInput {
  where: RouteWhereUniqueInput;
  create: RouteCreateWithoutOtherRoutesInput;
}

export interface RouteCreateOrConnectWithoutRouteInput {
  where: RouteWhereUniqueInput;
  create: RouteCreateWithoutRouteInput;
}

export interface RouteCreateOrConnectWithoutUserInput {
  where: RouteWhereUniqueInput;
  create: RouteCreateWithoutUserInput;
}

export interface RouteCreateWithoutOtherRoutesInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  exact: Scalars['Boolean'];
  component: Scalars['String'];
  User?: Maybe<UserCreateNestedOneWithoutRoutesInput>;
  Route?: Maybe<RouteCreateNestedOneWithoutOtherRoutesInput>;
}

export interface RouteCreateWithoutRouteInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  exact: Scalars['Boolean'];
  component: Scalars['String'];
  User?: Maybe<UserCreateNestedOneWithoutRoutesInput>;
  other_Routes?: Maybe<RouteCreateNestedManyWithoutRouteInput>;
}

export interface RouteCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  exact: Scalars['Boolean'];
  component: Scalars['String'];
  Route?: Maybe<RouteCreateNestedOneWithoutOtherRoutesInput>;
  other_Routes?: Maybe<RouteCreateNestedManyWithoutRouteInput>;
}

export interface RouteListRelationFilter {
  every?: Maybe<RouteWhereInput>;
  some?: Maybe<RouteWhereInput>;
  none?: Maybe<RouteWhereInput>;
}

export interface RouteOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface RouteWhereInput {
  AND?: Maybe<Array<RouteWhereInput>>;
  OR?: Maybe<Array<RouteWhereInput>>;
  NOT?: Maybe<Array<RouteWhereInput>>;
  id?: Maybe<StringFilter>;
  name?: Maybe<StringNullableFilter>;
  path?: Maybe<StringFilter>;
  exact?: Maybe<BoolFilter>;
  component?: Maybe<StringFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  Parent?: Maybe<StringNullableFilter>;
  User?: Maybe<UserWhereInput>;
  Route?: Maybe<RouteWhereInput>;
  other_Routes?: Maybe<RouteListRelationFilter>;
}

export interface RouteWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface ServiceCategoryCreateManyServiceCategoryInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface ServiceCategoryCreateManyServiceCategoryInputEnvelope {
  data?: Maybe<Array<ServiceCategoryCreateManyServiceCategoryInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ServiceCategoryCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  Parent?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface ServiceCategoryCreateManyUserInputEnvelope {
  data?: Maybe<Array<ServiceCategoryCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ServiceCategoryCreateNestedManyWithoutServiceCategoryInput {
  create?: Maybe<Array<ServiceCategoryCreateWithoutServiceCategoryInput>>;
  connectOrCreate?: Maybe<Array<ServiceCategoryCreateOrConnectWithoutServiceCategoryInput>>;
  createMany?: Maybe<ServiceCategoryCreateManyServiceCategoryInputEnvelope>;
  connect?: Maybe<Array<ServiceCategoryWhereUniqueInput>>;
}

export interface ServiceCategoryCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<ServiceCategoryCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<ServiceCategoryCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<ServiceCategoryCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<ServiceCategoryWhereUniqueInput>>;
}

export interface ServiceCategoryCreateNestedOneWithoutOtherServiceCategoriesInput {
  create?: Maybe<ServiceCategoryCreateWithoutOtherServiceCategoriesInput>;
  connectOrCreate?: Maybe<ServiceCategoryCreateOrConnectWithoutOtherServiceCategoriesInput>;
  connect?: Maybe<ServiceCategoryWhereUniqueInput>;
}

export interface ServiceCategoryCreateNestedOneWithoutServicesInput {
  create?: Maybe<ServiceCategoryCreateWithoutServicesInput>;
  connectOrCreate?: Maybe<ServiceCategoryCreateOrConnectWithoutServicesInput>;
  connect?: Maybe<ServiceCategoryWhereUniqueInput>;
}

export interface ServiceCategoryCreateOrConnectWithoutOtherServiceCategoriesInput {
  where: ServiceCategoryWhereUniqueInput;
  create: ServiceCategoryCreateWithoutOtherServiceCategoriesInput;
}

export interface ServiceCategoryCreateOrConnectWithoutServiceCategoryInput {
  where: ServiceCategoryWhereUniqueInput;
  create: ServiceCategoryCreateWithoutServiceCategoryInput;
}

export interface ServiceCategoryCreateOrConnectWithoutServicesInput {
  where: ServiceCategoryWhereUniqueInput;
  create: ServiceCategoryCreateWithoutServicesInput;
}

export interface ServiceCategoryCreateOrConnectWithoutUserInput {
  where: ServiceCategoryWhereUniqueInput;
  create: ServiceCategoryCreateWithoutUserInput;
}

export interface ServiceCategoryCreateWithoutOtherServiceCategoriesInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User?: Maybe<UserCreateNestedOneWithoutServiceCategoriesInput>;
  ServiceCategory?: Maybe<ServiceCategoryCreateNestedOneWithoutOtherServiceCategoriesInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutServiceCategoryInput>;
}

export interface ServiceCategoryCreateWithoutServiceCategoryInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User?: Maybe<UserCreateNestedOneWithoutServiceCategoriesInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutServiceCategoryInput>;
  other_ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutServiceCategoryInput>;
}

export interface ServiceCategoryCreateWithoutServicesInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User?: Maybe<UserCreateNestedOneWithoutServiceCategoriesInput>;
  ServiceCategory?: Maybe<ServiceCategoryCreateNestedOneWithoutOtherServiceCategoriesInput>;
  other_ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutServiceCategoryInput>;
}

export interface ServiceCategoryCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  ServiceCategory?: Maybe<ServiceCategoryCreateNestedOneWithoutOtherServiceCategoriesInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutServiceCategoryInput>;
  other_ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutServiceCategoryInput>;
}

export interface ServiceCategoryListRelationFilter {
  every?: Maybe<ServiceCategoryWhereInput>;
  some?: Maybe<ServiceCategoryWhereInput>;
  none?: Maybe<ServiceCategoryWhereInput>;
}

export interface ServiceCategoryOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface ServiceCategoryOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  description?: Maybe<SortOrder>;
  code?: Maybe<SortOrder>;
  Parent?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  User?: Maybe<UserOrderByWithRelationInput>;
  ServiceCategory?: Maybe<ServiceCategoryOrderByWithRelationInput>;
  Services?: Maybe<ServiceOrderByRelationAggregateInput>;
  other_ServiceCategories?: Maybe<ServiceCategoryOrderByRelationAggregateInput>;
}

export interface ServiceCategoryWhereInput {
  AND?: Maybe<Array<ServiceCategoryWhereInput>>;
  OR?: Maybe<Array<ServiceCategoryWhereInput>>;
  NOT?: Maybe<Array<ServiceCategoryWhereInput>>;
  id?: Maybe<StringFilter>;
  name?: Maybe<StringFilter>;
  description?: Maybe<StringNullableFilter>;
  code?: Maybe<StringNullableFilter>;
  Parent?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  User?: Maybe<UserWhereInput>;
  ServiceCategory?: Maybe<ServiceCategoryWhereInput>;
  Services?: Maybe<ServiceListRelationFilter>;
  other_ServiceCategories?: Maybe<ServiceCategoryListRelationFilter>;
}

export interface ServiceCategoryWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
}

export interface ServiceCreateManyServiceCategoryInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  Parent?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface ServiceCreateManyServiceCategoryInputEnvelope {
  data?: Maybe<Array<ServiceCreateManyServiceCategoryInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ServiceCreateManyServiceInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  Category?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface ServiceCreateManyServiceInputEnvelope {
  data?: Maybe<Array<ServiceCreateManyServiceInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ServiceCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  Category?: Maybe<Scalars['String']>;
  Parent?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface ServiceCreateManyUserInputEnvelope {
  data?: Maybe<Array<ServiceCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface ServiceCreateNestedManyWithoutProjectMembersInput {
  create?: Maybe<Array<ServiceCreateWithoutProjectMembersInput>>;
  connectOrCreate?: Maybe<Array<ServiceCreateOrConnectWithoutProjectMembersInput>>;
  connect?: Maybe<Array<ServiceWhereUniqueInput>>;
}

export interface ServiceCreateNestedManyWithoutServiceCategoryInput {
  create?: Maybe<Array<ServiceCreateWithoutServiceCategoryInput>>;
  connectOrCreate?: Maybe<Array<ServiceCreateOrConnectWithoutServiceCategoryInput>>;
  createMany?: Maybe<ServiceCreateManyServiceCategoryInputEnvelope>;
  connect?: Maybe<Array<ServiceWhereUniqueInput>>;
}

export interface ServiceCreateNestedManyWithoutServiceInput {
  create?: Maybe<Array<ServiceCreateWithoutServiceInput>>;
  connectOrCreate?: Maybe<Array<ServiceCreateOrConnectWithoutServiceInput>>;
  createMany?: Maybe<ServiceCreateManyServiceInputEnvelope>;
  connect?: Maybe<Array<ServiceWhereUniqueInput>>;
}

export interface ServiceCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<ServiceCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<ServiceCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<ServiceCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<ServiceWhereUniqueInput>>;
}

export interface ServiceCreateNestedOneWithoutOtherServicesInput {
  create?: Maybe<ServiceCreateWithoutOtherServicesInput>;
  connectOrCreate?: Maybe<ServiceCreateOrConnectWithoutOtherServicesInput>;
  connect?: Maybe<ServiceWhereUniqueInput>;
}

export interface ServiceCreateNestedOneWithoutResourcesInput {
  create?: Maybe<ServiceCreateWithoutResourcesInput>;
  connectOrCreate?: Maybe<ServiceCreateOrConnectWithoutResourcesInput>;
  connect?: Maybe<ServiceWhereUniqueInput>;
}

export interface ServiceCreateOrConnectWithoutOtherServicesInput {
  where: ServiceWhereUniqueInput;
  create: ServiceCreateWithoutOtherServicesInput;
}

export interface ServiceCreateOrConnectWithoutProjectMembersInput {
  where: ServiceWhereUniqueInput;
  create: ServiceCreateWithoutProjectMembersInput;
}

export interface ServiceCreateOrConnectWithoutResourcesInput {
  where: ServiceWhereUniqueInput;
  create: ServiceCreateWithoutResourcesInput;
}

export interface ServiceCreateOrConnectWithoutServiceCategoryInput {
  where: ServiceWhereUniqueInput;
  create: ServiceCreateWithoutServiceCategoryInput;
}

export interface ServiceCreateOrConnectWithoutServiceInput {
  where: ServiceWhereUniqueInput;
  create: ServiceCreateWithoutServiceInput;
}

export interface ServiceCreateOrConnectWithoutUserInput {
  where: ServiceWhereUniqueInput;
  create: ServiceCreateWithoutUserInput;
}

export interface ServiceCreateWithoutOtherServicesInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  ServiceCategory?: Maybe<ServiceCategoryCreateNestedOneWithoutServicesInput>;
  User?: Maybe<UserCreateNestedOneWithoutServicesInput>;
  Service?: Maybe<ServiceCreateNestedOneWithoutOtherServicesInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutServiceResourceToServiceInput>;
  ProjectMembers?: Maybe<ProjectMemberCreateNestedManyWithoutServicesInput>;
}

export interface ServiceCreateWithoutProjectMembersInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  ServiceCategory?: Maybe<ServiceCategoryCreateNestedOneWithoutServicesInput>;
  User?: Maybe<UserCreateNestedOneWithoutServicesInput>;
  Service?: Maybe<ServiceCreateNestedOneWithoutOtherServicesInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutServiceResourceToServiceInput>;
  other_Services?: Maybe<ServiceCreateNestedManyWithoutServiceInput>;
}

export interface ServiceCreateWithoutResourcesInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  ServiceCategory?: Maybe<ServiceCategoryCreateNestedOneWithoutServicesInput>;
  User?: Maybe<UserCreateNestedOneWithoutServicesInput>;
  Service?: Maybe<ServiceCreateNestedOneWithoutOtherServicesInput>;
  other_Services?: Maybe<ServiceCreateNestedManyWithoutServiceInput>;
  ProjectMembers?: Maybe<ProjectMemberCreateNestedManyWithoutServicesInput>;
}

export interface ServiceCreateWithoutServiceCategoryInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User?: Maybe<UserCreateNestedOneWithoutServicesInput>;
  Service?: Maybe<ServiceCreateNestedOneWithoutOtherServicesInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutServiceResourceToServiceInput>;
  other_Services?: Maybe<ServiceCreateNestedManyWithoutServiceInput>;
  ProjectMembers?: Maybe<ProjectMemberCreateNestedManyWithoutServicesInput>;
}

export interface ServiceCreateWithoutServiceInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  ServiceCategory?: Maybe<ServiceCategoryCreateNestedOneWithoutServicesInput>;
  User?: Maybe<UserCreateNestedOneWithoutServicesInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutServiceResourceToServiceInput>;
  other_Services?: Maybe<ServiceCreateNestedManyWithoutServiceInput>;
  ProjectMembers?: Maybe<ProjectMemberCreateNestedManyWithoutServicesInput>;
}

export interface ServiceCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  ServiceCategory?: Maybe<ServiceCategoryCreateNestedOneWithoutServicesInput>;
  Service?: Maybe<ServiceCreateNestedOneWithoutOtherServicesInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutServiceResourceToServiceInput>;
  other_Services?: Maybe<ServiceCreateNestedManyWithoutServiceInput>;
  ProjectMembers?: Maybe<ProjectMemberCreateNestedManyWithoutServicesInput>;
}

export interface ServiceListRelationFilter {
  every?: Maybe<ServiceWhereInput>;
  some?: Maybe<ServiceWhereInput>;
  none?: Maybe<ServiceWhereInput>;
}

export interface ServiceOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface ServiceOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  description?: Maybe<SortOrder>;
  code?: Maybe<SortOrder>;
  rank?: Maybe<SortOrder>;
  oldID?: Maybe<SortOrder>;
  Category?: Maybe<SortOrder>;
  Parent?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  ServiceCategory?: Maybe<ServiceCategoryOrderByWithRelationInput>;
  User?: Maybe<UserOrderByWithRelationInput>;
  Service?: Maybe<ServiceOrderByWithRelationInput>;
  Resources?: Maybe<ResourceOrderByRelationAggregateInput>;
  other_Services?: Maybe<ServiceOrderByRelationAggregateInput>;
  ProjectMembers?: Maybe<ProjectMemberOrderByRelationAggregateInput>;
}

export interface ServiceWhereInput {
  AND?: Maybe<Array<ServiceWhereInput>>;
  OR?: Maybe<Array<ServiceWhereInput>>;
  NOT?: Maybe<Array<ServiceWhereInput>>;
  id?: Maybe<StringFilter>;
  name?: Maybe<StringNullableFilter>;
  description?: Maybe<StringNullableFilter>;
  code?: Maybe<StringNullableFilter>;
  rank?: Maybe<IntNullableFilter>;
  oldID?: Maybe<IntNullableFilter>;
  Category?: Maybe<StringNullableFilter>;
  Parent?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  ServiceCategory?: Maybe<ServiceCategoryWhereInput>;
  User?: Maybe<UserWhereInput>;
  Service?: Maybe<ServiceWhereInput>;
  Resources?: Maybe<ResourceListRelationFilter>;
  other_Services?: Maybe<ServiceListRelationFilter>;
  ProjectMembers?: Maybe<ProjectMemberListRelationFilter>;
}

export interface ServiceWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
}

export interface SettingsCreateManyUserSettingsToUserInput {
  id?: Maybe<Scalars['String']>;
  renderDistance: Scalars['Int'];
}

export interface SettingsCreateManyUserSettingsToUserInputEnvelope {
  data?: Maybe<Array<SettingsCreateManyUserSettingsToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface SettingsCreateNestedManyWithoutUserSettingsToUserInput {
  create?: Maybe<Array<SettingsCreateWithoutUserSettingsToUserInput>>;
  connectOrCreate?: Maybe<Array<SettingsCreateOrConnectWithoutUserSettingsToUserInput>>;
  createMany?: Maybe<SettingsCreateManyUserSettingsToUserInputEnvelope>;
  connect?: Maybe<Array<SettingsWhereUniqueInput>>;
}

export interface SettingsCreateOrConnectWithoutUserSettingsToUserInput {
  where: SettingsWhereUniqueInput;
  create: SettingsCreateWithoutUserSettingsToUserInput;
}

export interface SettingsCreateWithoutUserSettingsToUserInput {
  id?: Maybe<Scalars['String']>;
  renderDistance: Scalars['Int'];
}

export interface SettingsListRelationFilter {
  every?: Maybe<SettingsWhereInput>;
  some?: Maybe<SettingsWhereInput>;
  none?: Maybe<SettingsWhereInput>;
}

export interface SettingsOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface SettingsWhereInput {
  AND?: Maybe<Array<SettingsWhereInput>>;
  OR?: Maybe<Array<SettingsWhereInput>>;
  NOT?: Maybe<Array<SettingsWhereInput>>;
  id?: Maybe<StringFilter>;
  renderDistance?: Maybe<IntFilter>;
  User?: Maybe<StringNullableFilter>;
  User_SettingsToUser?: Maybe<UserWhereInput>;
}

export interface SettingsWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface SingleUploadInput {
  file: Scalars['Upload'];
  /** Пользовательское имя файла */
  name?: Maybe<Scalars['String']>;
  /** В какую директорю загружать файл */
  directory?: Maybe<Scalars['String']>;
}

export interface SmsMessageCreateManySmsProviderInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  from: Scalars['String'];
  text: Scalars['String'];
  deletOnSend?: Maybe<Scalars['Boolean']>;
  Status?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
}

export interface SmsMessageCreateManySmsProviderInputEnvelope {
  data?: Maybe<Array<SmsMessageCreateManySmsProviderInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface SmsMessageCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  from: Scalars['String'];
  text: Scalars['String'];
  deletOnSend?: Maybe<Scalars['Boolean']>;
  Status?: Maybe<Scalars['String']>;
  Provider?: Maybe<Scalars['String']>;
}

export interface SmsMessageCreateManyUserInputEnvelope {
  data?: Maybe<Array<SmsMessageCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface SmsMessageCreateNestedManyWithoutSmsProviderInput {
  create?: Maybe<Array<SmsMessageCreateWithoutSmsProviderInput>>;
  connectOrCreate?: Maybe<Array<SmsMessageCreateOrConnectWithoutSmsProviderInput>>;
  createMany?: Maybe<SmsMessageCreateManySmsProviderInputEnvelope>;
  connect?: Maybe<Array<SmsMessageWhereUniqueInput>>;
}

export interface SmsMessageCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<SmsMessageCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<SmsMessageCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<SmsMessageCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<SmsMessageWhereUniqueInput>>;
}

export interface SmsMessageCreateOrConnectWithoutSmsProviderInput {
  where: SmsMessageWhereUniqueInput;
  create: SmsMessageCreateWithoutSmsProviderInput;
}

export interface SmsMessageCreateOrConnectWithoutUserInput {
  where: SmsMessageWhereUniqueInput;
  create: SmsMessageCreateWithoutUserInput;
}

export interface SmsMessageCreateWithoutSmsProviderInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  from: Scalars['String'];
  text: Scalars['String'];
  deletOnSend?: Maybe<Scalars['Boolean']>;
  User?: Maybe<UserCreateNestedOneWithoutSmsMessagesInput>;
  LetsadsSmsMessageStatus?: Maybe<LetsadsSmsMessageStatusCreateNestedOneWithoutSmsMessageInput>;
  SmsMessage_recipients?: Maybe<SmsMessageRecipientsCreateNestedManyWithoutSmsMessageInput>;
}

export interface SmsMessageCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  from: Scalars['String'];
  text: Scalars['String'];
  deletOnSend?: Maybe<Scalars['Boolean']>;
  SmsProvider?: Maybe<SmsProviderCreateNestedOneWithoutSmsMessagesInput>;
  LetsadsSmsMessageStatus?: Maybe<LetsadsSmsMessageStatusCreateNestedOneWithoutSmsMessageInput>;
  SmsMessage_recipients?: Maybe<SmsMessageRecipientsCreateNestedManyWithoutSmsMessageInput>;
}

export interface SmsMessageListRelationFilter {
  every?: Maybe<SmsMessageWhereInput>;
  some?: Maybe<SmsMessageWhereInput>;
  none?: Maybe<SmsMessageWhereInput>;
}

export interface SmsMessageOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface SmsMessageWhereInput {
  AND?: Maybe<Array<SmsMessageWhereInput>>;
  OR?: Maybe<Array<SmsMessageWhereInput>>;
  NOT?: Maybe<Array<SmsMessageWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  from?: Maybe<StringFilter>;
  text?: Maybe<StringFilter>;
  deletOnSend?: Maybe<BoolNullableFilter>;
  Status?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  Provider?: Maybe<StringNullableFilter>;
  User?: Maybe<UserWhereInput>;
  SmsProvider?: Maybe<SmsProviderWhereInput>;
  LetsadsSmsMessageStatus?: Maybe<LetsadsSmsMessageStatusWhereInput>;
  SmsMessage_recipients?: Maybe<SmsMessageRecipientsListRelationFilter>;
}

export interface SmsMessageWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface SmsMessageRecipientsCreateManySmsMessageInput {
  position: Scalars['Int'];
  value: Scalars['String'];
}

export interface SmsMessageRecipientsCreateManySmsMessageInputEnvelope {
  data?: Maybe<Array<SmsMessageRecipientsCreateManySmsMessageInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface SmsMessageRecipientsCreateNestedManyWithoutSmsMessageInput {
  create?: Maybe<Array<SmsMessageRecipientsCreateWithoutSmsMessageInput>>;
  connectOrCreate?: Maybe<Array<SmsMessageRecipientsCreateOrConnectWithoutSmsMessageInput>>;
  createMany?: Maybe<SmsMessageRecipientsCreateManySmsMessageInputEnvelope>;
  connect?: Maybe<Array<SmsMessageRecipientsWhereUniqueInput>>;
}

export interface SmsMessageRecipientsCreateOrConnectWithoutSmsMessageInput {
  where: SmsMessageRecipientsWhereUniqueInput;
  create: SmsMessageRecipientsCreateWithoutSmsMessageInput;
}

export interface SmsMessageRecipientsCreateWithoutSmsMessageInput {
  position: Scalars['Int'];
  value: Scalars['String'];
}

export interface SmsMessageRecipientsListRelationFilter {
  every?: Maybe<SmsMessageRecipientsWhereInput>;
  some?: Maybe<SmsMessageRecipientsWhereInput>;
  none?: Maybe<SmsMessageRecipientsWhereInput>;
}

export interface SmsMessageRecipientsNodeIdPositionCompoundUniqueInput {
  nodeId: Scalars['String'];
  position: Scalars['Int'];
}

export interface SmsMessageRecipientsWhereInput {
  AND?: Maybe<Array<SmsMessageRecipientsWhereInput>>;
  OR?: Maybe<Array<SmsMessageRecipientsWhereInput>>;
  NOT?: Maybe<Array<SmsMessageRecipientsWhereInput>>;
  nodeId?: Maybe<StringFilter>;
  position?: Maybe<IntFilter>;
  value?: Maybe<StringFilter>;
  SmsMessage?: Maybe<SmsMessageWhereInput>;
}

export interface SmsMessageRecipientsWhereUniqueInput {
  nodeId_position?: Maybe<SmsMessageRecipientsNodeIdPositionCompoundUniqueInput>;
}

export interface SmsProviderCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  credentials?: Maybe<NullableJsonNullValueInput>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface SmsProviderCreateManyUserInputEnvelope {
  data?: Maybe<Array<SmsProviderCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface SmsProviderCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<SmsProviderCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<SmsProviderCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<SmsProviderCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<SmsProviderWhereUniqueInput>>;
}

export interface SmsProviderCreateNestedOneWithoutSmsMessagesInput {
  create?: Maybe<SmsProviderCreateWithoutSmsMessagesInput>;
  connectOrCreate?: Maybe<SmsProviderCreateOrConnectWithoutSmsMessagesInput>;
  connect?: Maybe<SmsProviderWhereUniqueInput>;
}

export interface SmsProviderCreateOrConnectWithoutSmsMessagesInput {
  where: SmsProviderWhereUniqueInput;
  create: SmsProviderCreateWithoutSmsMessagesInput;
}

export interface SmsProviderCreateOrConnectWithoutUserInput {
  where: SmsProviderWhereUniqueInput;
  create: SmsProviderCreateWithoutUserInput;
}

export interface SmsProviderCreateWithoutSmsMessagesInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  credentials?: Maybe<NullableJsonNullValueInput>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User?: Maybe<UserCreateNestedOneWithoutSmsProvidersInput>;
}

export interface SmsProviderCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  credentials?: Maybe<NullableJsonNullValueInput>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutSmsProviderInput>;
}

export interface SmsProviderListRelationFilter {
  every?: Maybe<SmsProviderWhereInput>;
  some?: Maybe<SmsProviderWhereInput>;
  none?: Maybe<SmsProviderWhereInput>;
}

export interface SmsProviderOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface SmsProviderWhereInput {
  AND?: Maybe<Array<SmsProviderWhereInput>>;
  OR?: Maybe<Array<SmsProviderWhereInput>>;
  NOT?: Maybe<Array<SmsProviderWhereInput>>;
  id?: Maybe<StringFilter>;
  name?: Maybe<StringFilter>;
  credentials?: Maybe<JsonNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  User?: Maybe<UserWhereInput>;
  SmsMessages?: Maybe<SmsMessageListRelationFilter>;
}

export interface SmsProviderWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export enum SortOrder {
  ASC = 'asc',
  DESC = 'desc'
}

export interface StringFilter {
  equals?: Maybe<Scalars['String']>;
  in?: Maybe<Array<Scalars['String']>>;
  notIn?: Maybe<Array<Scalars['String']>>;
  lt?: Maybe<Scalars['String']>;
  lte?: Maybe<Scalars['String']>;
  gt?: Maybe<Scalars['String']>;
  gte?: Maybe<Scalars['String']>;
  contains?: Maybe<Scalars['String']>;
  startsWith?: Maybe<Scalars['String']>;
  endsWith?: Maybe<Scalars['String']>;
  not?: Maybe<NestedStringFilter>;
}

export interface StringNullableFilter {
  equals?: Maybe<Scalars['String']>;
  in?: Maybe<Array<Scalars['String']>>;
  notIn?: Maybe<Array<Scalars['String']>>;
  lt?: Maybe<Scalars['String']>;
  lte?: Maybe<Scalars['String']>;
  gt?: Maybe<Scalars['String']>;
  gte?: Maybe<Scalars['String']>;
  contains?: Maybe<Scalars['String']>;
  startsWith?: Maybe<Scalars['String']>;
  endsWith?: Maybe<Scalars['String']>;
  not?: Maybe<NestedStringNullableFilter>;
}

export interface Tag {
  __typename?: 'Tag';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  CreatedBy?: Maybe<User>;
  Resources?: Maybe<Array<ResourceTag>>;
}

export interface TagCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  status?: Maybe<TagStatus>;
}

export interface TagCreateManyUserInputEnvelope {
  data?: Maybe<Array<TagCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TagCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<TagCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<TagCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<TagCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<TagWhereUniqueInput>>;
}

export interface TagCreateNestedOneWithoutResourceTagsInput {
  create?: Maybe<TagCreateWithoutResourceTagsInput>;
  connectOrCreate?: Maybe<TagCreateOrConnectWithoutResourceTagsInput>;
  connect?: Maybe<TagWhereUniqueInput>;
}

export interface TagCreateOrConnectWithoutResourceTagsInput {
  where: TagWhereUniqueInput;
  create: TagCreateWithoutResourceTagsInput;
}

export interface TagCreateOrConnectWithoutUserInput {
  where: TagWhereUniqueInput;
  create: TagCreateWithoutUserInput;
}

export interface TagCreateWithoutResourceTagsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  status?: Maybe<TagStatus>;
  User?: Maybe<UserCreateNestedOneWithoutTagsInput>;
}

export interface TagCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  status?: Maybe<TagStatus>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutTagResourceTagToTagInput>;
}

export interface TagListRelationFilter {
  every?: Maybe<TagWhereInput>;
  some?: Maybe<TagWhereInput>;
  none?: Maybe<TagWhereInput>;
}

export interface TagOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface TagOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  status?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  User?: Maybe<UserOrderByWithRelationInput>;
  ResourceTags?: Maybe<ResourceTagOrderByRelationAggregateInput>;
}

export enum TagStatus {
  ACTIVE = 'Active',
  MODERATED = 'Moderated',
  BLOCKED = 'Blocked'
}

export interface TagWhereInput {
  AND?: Maybe<Array<TagWhereInput>>;
  OR?: Maybe<Array<TagWhereInput>>;
  NOT?: Maybe<Array<TagWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  name?: Maybe<StringFilter>;
  status?: Maybe<EnumTagStatusFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  User?: Maybe<UserWhereInput>;
  ResourceTags?: Maybe<ResourceTagListRelationFilter>;
}

export interface TagWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
}

export interface Task {
  __typename?: 'Task';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  status: TaskStatus;
  content?: Maybe<Scalars['JSON']>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  CreatedBy?: Maybe<User>;
  TaskProjects?: Maybe<Array<ProjectTask>>;
  TaskTechnologies?: Maybe<Array<TaskTechnology>>;
  Parent?: Maybe<Task>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletion>;
  Timers?: Maybe<Array<Timer>>;
  Comments?: Maybe<Array<Resource>>;
}


export type TaskTimersArgs = {
  orderBy?: Maybe<TimerOrderByWithRelationInput>;
  where?: Maybe<TimerWhereInput>;
};


export type TaskCommentsArgs = {
  orderBy?: Maybe<ResourceOrderByWithRelationInput>;
  where?: Maybe<ResourceWhereInput>;
};

export interface TaskCreateInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['JSON']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  Project?: Maybe<ProjectCreateOneWithoutProjectTasksInput>;
  Parent?: Maybe<TaskCreateOneWithoutChildsInput>;
}

export interface TaskCreateManyChatRoomChatRoomToTaskInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<Scalars['String']>;
  Parent?: Maybe<Scalars['String']>;
  needHelp?: Maybe<Scalars['Boolean']>;
}

export interface TaskCreateManyChatRoomChatRoomToTaskInputEnvelope {
  data?: Maybe<Array<TaskCreateManyChatRoomChatRoomToTaskInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TaskCreateManyTaskInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<Scalars['String']>;
  ChatRoom?: Maybe<Scalars['String']>;
  needHelp?: Maybe<Scalars['Boolean']>;
}

export interface TaskCreateManyTaskInputEnvelope {
  data?: Maybe<Array<TaskCreateManyTaskInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TaskCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  Parent?: Maybe<Scalars['String']>;
  ChatRoom?: Maybe<Scalars['String']>;
  needHelp?: Maybe<Scalars['Boolean']>;
}

export interface TaskCreateManyUserInputEnvelope {
  data?: Maybe<Array<TaskCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TaskCreateNestedManyWithoutChatRoomChatRoomToTaskInput {
  create?: Maybe<Array<TaskCreateWithoutChatRoomChatRoomToTaskInput>>;
  connectOrCreate?: Maybe<Array<TaskCreateOrConnectWithoutChatRoomChatRoomToTaskInput>>;
  createMany?: Maybe<TaskCreateManyChatRoomChatRoomToTaskInputEnvelope>;
  connect?: Maybe<Array<TaskWhereUniqueInput>>;
}

export interface TaskCreateNestedManyWithoutTaskInput {
  create?: Maybe<Array<TaskCreateWithoutTaskInput>>;
  connectOrCreate?: Maybe<Array<TaskCreateOrConnectWithoutTaskInput>>;
  createMany?: Maybe<TaskCreateManyTaskInputEnvelope>;
  connect?: Maybe<Array<TaskWhereUniqueInput>>;
}

export interface TaskCreateNestedManyWithoutTasksAInput {
  create?: Maybe<Array<TaskCreateWithoutTasksAInput>>;
  connectOrCreate?: Maybe<Array<TaskCreateOrConnectWithoutTasksAInput>>;
  connect?: Maybe<Array<TaskWhereUniqueInput>>;
}

export interface TaskCreateNestedManyWithoutTasksBInput {
  create?: Maybe<Array<TaskCreateWithoutTasksBInput>>;
  connectOrCreate?: Maybe<Array<TaskCreateOrConnectWithoutTasksBInput>>;
  connect?: Maybe<Array<TaskWhereUniqueInput>>;
}

export interface TaskCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<TaskCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<TaskCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<TaskCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<TaskWhereUniqueInput>>;
}

export interface TaskCreateNestedOneWithoutCodeChallengeCompletionsInput {
  create?: Maybe<TaskCreateWithoutCodeChallengeCompletionsInput>;
  connectOrCreate?: Maybe<TaskCreateOrConnectWithoutCodeChallengeCompletionsInput>;
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TaskCreateNestedOneWithoutOtherTasksInput {
  create?: Maybe<TaskCreateWithoutOtherTasksInput>;
  connectOrCreate?: Maybe<TaskCreateOrConnectWithoutOtherTasksInput>;
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TaskCreateNestedOneWithoutProjectTasksInput {
  create?: Maybe<TaskCreateWithoutProjectTasksInput>;
  connectOrCreate?: Maybe<TaskCreateOrConnectWithoutProjectTasksInput>;
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TaskCreateNestedOneWithoutResourcesInput {
  create?: Maybe<TaskCreateWithoutResourcesInput>;
  connectOrCreate?: Maybe<TaskCreateOrConnectWithoutResourcesInput>;
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TaskCreateNestedOneWithoutTaskMembersInput {
  create?: Maybe<TaskCreateWithoutTaskMembersInput>;
  connectOrCreate?: Maybe<TaskCreateOrConnectWithoutTaskMembersInput>;
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TaskCreateNestedOneWithoutTaskReactionsInput {
  create?: Maybe<TaskCreateWithoutTaskReactionsInput>;
  connectOrCreate?: Maybe<TaskCreateOrConnectWithoutTaskReactionsInput>;
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TaskCreateNestedOneWithoutTaskTechnologiesInput {
  create?: Maybe<TaskCreateWithoutTaskTechnologiesInput>;
  connectOrCreate?: Maybe<TaskCreateOrConnectWithoutTaskTechnologiesInput>;
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TaskCreateNestedOneWithoutTimersInput {
  create?: Maybe<TaskCreateWithoutTimersInput>;
  connectOrCreate?: Maybe<TaskCreateOrConnectWithoutTimersInput>;
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TaskCreateOneWithoutChildsInput {
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TaskCreateOneWithoutCommentsInput {
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TaskCreateOneWithoutTaskTechnologiesInput {
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TaskCreateOneWithoutTimersInput {
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TaskCreateOrConnectWithoutChatRoomChatRoomToTaskInput {
  where: TaskWhereUniqueInput;
  create: TaskCreateWithoutChatRoomChatRoomToTaskInput;
}

export interface TaskCreateOrConnectWithoutCodeChallengeCompletionsInput {
  where: TaskWhereUniqueInput;
  create: TaskCreateWithoutCodeChallengeCompletionsInput;
}

export interface TaskCreateOrConnectWithoutOtherTasksInput {
  where: TaskWhereUniqueInput;
  create: TaskCreateWithoutOtherTasksInput;
}

export interface TaskCreateOrConnectWithoutProjectTasksInput {
  where: TaskWhereUniqueInput;
  create: TaskCreateWithoutProjectTasksInput;
}

export interface TaskCreateOrConnectWithoutResourcesInput {
  where: TaskWhereUniqueInput;
  create: TaskCreateWithoutResourcesInput;
}

export interface TaskCreateOrConnectWithoutTaskInput {
  where: TaskWhereUniqueInput;
  create: TaskCreateWithoutTaskInput;
}

export interface TaskCreateOrConnectWithoutTaskMembersInput {
  where: TaskWhereUniqueInput;
  create: TaskCreateWithoutTaskMembersInput;
}

export interface TaskCreateOrConnectWithoutTaskReactionsInput {
  where: TaskWhereUniqueInput;
  create: TaskCreateWithoutTaskReactionsInput;
}

export interface TaskCreateOrConnectWithoutTaskTechnologiesInput {
  where: TaskWhereUniqueInput;
  create: TaskCreateWithoutTaskTechnologiesInput;
}

export interface TaskCreateOrConnectWithoutTasksAInput {
  where: TaskWhereUniqueInput;
  create: TaskCreateWithoutTasksAInput;
}

export interface TaskCreateOrConnectWithoutTasksBInput {
  where: TaskWhereUniqueInput;
  create: TaskCreateWithoutTasksBInput;
}

export interface TaskCreateOrConnectWithoutTimersInput {
  where: TaskWhereUniqueInput;
  create: TaskCreateWithoutTimersInput;
}

export interface TaskCreateOrConnectWithoutUserInput {
  where: TaskWhereUniqueInput;
  create: TaskCreateWithoutUserInput;
}

export interface TaskCreateWithoutChatRoomChatRoomToTaskInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  User?: Maybe<UserCreateNestedOneWithoutTasksInput>;
  Task?: Maybe<TaskCreateNestedOneWithoutOtherTasksInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutTaskCodeChallengeCompletionToTaskInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutTaskProjectTaskToTaskInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutTaskResourceToTaskInput>;
  other_Tasks?: Maybe<TaskCreateNestedManyWithoutTaskInput>;
  TaskMembers?: Maybe<TaskMemberCreateNestedManyWithoutTaskTaskToTaskMemberInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutTaskTaskToTaskReactionInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutTaskTaskToTaskTechnologyInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutTaskTaskToTimerInput>;
  Tasks_B?: Maybe<TaskCreateNestedManyWithoutTasksAInput>;
  Tasks_A?: Maybe<TaskCreateNestedManyWithoutTasksBInput>;
}

export interface TaskCreateWithoutCodeChallengeCompletionsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  ChatRoom_ChatRoomToTask?: Maybe<ChatRoomCreateNestedOneWithoutTasksInput>;
  User?: Maybe<UserCreateNestedOneWithoutTasksInput>;
  Task?: Maybe<TaskCreateNestedOneWithoutOtherTasksInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutTaskProjectTaskToTaskInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutTaskResourceToTaskInput>;
  other_Tasks?: Maybe<TaskCreateNestedManyWithoutTaskInput>;
  TaskMembers?: Maybe<TaskMemberCreateNestedManyWithoutTaskTaskToTaskMemberInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutTaskTaskToTaskReactionInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutTaskTaskToTaskTechnologyInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutTaskTaskToTimerInput>;
  Tasks_B?: Maybe<TaskCreateNestedManyWithoutTasksAInput>;
  Tasks_A?: Maybe<TaskCreateNestedManyWithoutTasksBInput>;
}

export interface TaskCreateWithoutOtherTasksInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  ChatRoom_ChatRoomToTask?: Maybe<ChatRoomCreateNestedOneWithoutTasksInput>;
  User?: Maybe<UserCreateNestedOneWithoutTasksInput>;
  Task?: Maybe<TaskCreateNestedOneWithoutOtherTasksInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutTaskCodeChallengeCompletionToTaskInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutTaskProjectTaskToTaskInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutTaskResourceToTaskInput>;
  TaskMembers?: Maybe<TaskMemberCreateNestedManyWithoutTaskTaskToTaskMemberInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutTaskTaskToTaskReactionInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutTaskTaskToTaskTechnologyInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutTaskTaskToTimerInput>;
  Tasks_B?: Maybe<TaskCreateNestedManyWithoutTasksAInput>;
  Tasks_A?: Maybe<TaskCreateNestedManyWithoutTasksBInput>;
}

export interface TaskCreateWithoutProjectTasksInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  ChatRoom_ChatRoomToTask?: Maybe<ChatRoomCreateNestedOneWithoutTasksInput>;
  User?: Maybe<UserCreateNestedOneWithoutTasksInput>;
  Task?: Maybe<TaskCreateNestedOneWithoutOtherTasksInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutTaskCodeChallengeCompletionToTaskInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutTaskResourceToTaskInput>;
  other_Tasks?: Maybe<TaskCreateNestedManyWithoutTaskInput>;
  TaskMembers?: Maybe<TaskMemberCreateNestedManyWithoutTaskTaskToTaskMemberInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutTaskTaskToTaskReactionInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutTaskTaskToTaskTechnologyInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutTaskTaskToTimerInput>;
  Tasks_B?: Maybe<TaskCreateNestedManyWithoutTasksAInput>;
  Tasks_A?: Maybe<TaskCreateNestedManyWithoutTasksBInput>;
}

export interface TaskCreateWithoutResourcesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  ChatRoom_ChatRoomToTask?: Maybe<ChatRoomCreateNestedOneWithoutTasksInput>;
  User?: Maybe<UserCreateNestedOneWithoutTasksInput>;
  Task?: Maybe<TaskCreateNestedOneWithoutOtherTasksInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutTaskCodeChallengeCompletionToTaskInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutTaskProjectTaskToTaskInput>;
  other_Tasks?: Maybe<TaskCreateNestedManyWithoutTaskInput>;
  TaskMembers?: Maybe<TaskMemberCreateNestedManyWithoutTaskTaskToTaskMemberInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutTaskTaskToTaskReactionInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutTaskTaskToTaskTechnologyInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutTaskTaskToTimerInput>;
  Tasks_B?: Maybe<TaskCreateNestedManyWithoutTasksAInput>;
  Tasks_A?: Maybe<TaskCreateNestedManyWithoutTasksBInput>;
}

export interface TaskCreateWithoutTaskInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  ChatRoom_ChatRoomToTask?: Maybe<ChatRoomCreateNestedOneWithoutTasksInput>;
  User?: Maybe<UserCreateNestedOneWithoutTasksInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutTaskCodeChallengeCompletionToTaskInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutTaskProjectTaskToTaskInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutTaskResourceToTaskInput>;
  other_Tasks?: Maybe<TaskCreateNestedManyWithoutTaskInput>;
  TaskMembers?: Maybe<TaskMemberCreateNestedManyWithoutTaskTaskToTaskMemberInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutTaskTaskToTaskReactionInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutTaskTaskToTaskTechnologyInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutTaskTaskToTimerInput>;
  Tasks_B?: Maybe<TaskCreateNestedManyWithoutTasksAInput>;
  Tasks_A?: Maybe<TaskCreateNestedManyWithoutTasksBInput>;
}

export interface TaskCreateWithoutTaskMembersInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  ChatRoom_ChatRoomToTask?: Maybe<ChatRoomCreateNestedOneWithoutTasksInput>;
  User?: Maybe<UserCreateNestedOneWithoutTasksInput>;
  Task?: Maybe<TaskCreateNestedOneWithoutOtherTasksInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutTaskCodeChallengeCompletionToTaskInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutTaskProjectTaskToTaskInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutTaskResourceToTaskInput>;
  other_Tasks?: Maybe<TaskCreateNestedManyWithoutTaskInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutTaskTaskToTaskReactionInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutTaskTaskToTaskTechnologyInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutTaskTaskToTimerInput>;
  Tasks_B?: Maybe<TaskCreateNestedManyWithoutTasksAInput>;
  Tasks_A?: Maybe<TaskCreateNestedManyWithoutTasksBInput>;
}

export interface TaskCreateWithoutTaskReactionsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  ChatRoom_ChatRoomToTask?: Maybe<ChatRoomCreateNestedOneWithoutTasksInput>;
  User?: Maybe<UserCreateNestedOneWithoutTasksInput>;
  Task?: Maybe<TaskCreateNestedOneWithoutOtherTasksInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutTaskCodeChallengeCompletionToTaskInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutTaskProjectTaskToTaskInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutTaskResourceToTaskInput>;
  other_Tasks?: Maybe<TaskCreateNestedManyWithoutTaskInput>;
  TaskMembers?: Maybe<TaskMemberCreateNestedManyWithoutTaskTaskToTaskMemberInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutTaskTaskToTaskTechnologyInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutTaskTaskToTimerInput>;
  Tasks_B?: Maybe<TaskCreateNestedManyWithoutTasksAInput>;
  Tasks_A?: Maybe<TaskCreateNestedManyWithoutTasksBInput>;
}

export interface TaskCreateWithoutTaskTechnologiesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  ChatRoom_ChatRoomToTask?: Maybe<ChatRoomCreateNestedOneWithoutTasksInput>;
  User?: Maybe<UserCreateNestedOneWithoutTasksInput>;
  Task?: Maybe<TaskCreateNestedOneWithoutOtherTasksInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutTaskCodeChallengeCompletionToTaskInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutTaskProjectTaskToTaskInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutTaskResourceToTaskInput>;
  other_Tasks?: Maybe<TaskCreateNestedManyWithoutTaskInput>;
  TaskMembers?: Maybe<TaskMemberCreateNestedManyWithoutTaskTaskToTaskMemberInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutTaskTaskToTaskReactionInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutTaskTaskToTimerInput>;
  Tasks_B?: Maybe<TaskCreateNestedManyWithoutTasksAInput>;
  Tasks_A?: Maybe<TaskCreateNestedManyWithoutTasksBInput>;
}

export interface TaskCreateWithoutTasksAInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  ChatRoom_ChatRoomToTask?: Maybe<ChatRoomCreateNestedOneWithoutTasksInput>;
  User?: Maybe<UserCreateNestedOneWithoutTasksInput>;
  Task?: Maybe<TaskCreateNestedOneWithoutOtherTasksInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutTaskCodeChallengeCompletionToTaskInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutTaskProjectTaskToTaskInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutTaskResourceToTaskInput>;
  other_Tasks?: Maybe<TaskCreateNestedManyWithoutTaskInput>;
  TaskMembers?: Maybe<TaskMemberCreateNestedManyWithoutTaskTaskToTaskMemberInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutTaskTaskToTaskReactionInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutTaskTaskToTaskTechnologyInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutTaskTaskToTimerInput>;
  Tasks_B?: Maybe<TaskCreateNestedManyWithoutTasksAInput>;
}

export interface TaskCreateWithoutTasksBInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  ChatRoom_ChatRoomToTask?: Maybe<ChatRoomCreateNestedOneWithoutTasksInput>;
  User?: Maybe<UserCreateNestedOneWithoutTasksInput>;
  Task?: Maybe<TaskCreateNestedOneWithoutOtherTasksInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutTaskCodeChallengeCompletionToTaskInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutTaskProjectTaskToTaskInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutTaskResourceToTaskInput>;
  other_Tasks?: Maybe<TaskCreateNestedManyWithoutTaskInput>;
  TaskMembers?: Maybe<TaskMemberCreateNestedManyWithoutTaskTaskToTaskMemberInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutTaskTaskToTaskReactionInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutTaskTaskToTaskTechnologyInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutTaskTaskToTimerInput>;
  Tasks_A?: Maybe<TaskCreateNestedManyWithoutTasksBInput>;
}

export interface TaskCreateWithoutTimersInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  ChatRoom_ChatRoomToTask?: Maybe<ChatRoomCreateNestedOneWithoutTasksInput>;
  User?: Maybe<UserCreateNestedOneWithoutTasksInput>;
  Task?: Maybe<TaskCreateNestedOneWithoutOtherTasksInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutTaskCodeChallengeCompletionToTaskInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutTaskProjectTaskToTaskInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutTaskResourceToTaskInput>;
  other_Tasks?: Maybe<TaskCreateNestedManyWithoutTaskInput>;
  TaskMembers?: Maybe<TaskMemberCreateNestedManyWithoutTaskTaskToTaskMemberInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutTaskTaskToTaskReactionInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutTaskTaskToTaskTechnologyInput>;
  Tasks_B?: Maybe<TaskCreateNestedManyWithoutTasksAInput>;
  Tasks_A?: Maybe<TaskCreateNestedManyWithoutTasksBInput>;
}

export interface TaskCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<NullableJsonNullValueInput>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  ChatRoom_ChatRoomToTask?: Maybe<ChatRoomCreateNestedOneWithoutTasksInput>;
  Task?: Maybe<TaskCreateNestedOneWithoutOtherTasksInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutTaskCodeChallengeCompletionToTaskInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutTaskProjectTaskToTaskInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutTaskResourceToTaskInput>;
  other_Tasks?: Maybe<TaskCreateNestedManyWithoutTaskInput>;
  TaskMembers?: Maybe<TaskMemberCreateNestedManyWithoutTaskTaskToTaskMemberInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutTaskTaskToTaskReactionInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutTaskTaskToTaskTechnologyInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutTaskTaskToTimerInput>;
  Tasks_B?: Maybe<TaskCreateNestedManyWithoutTasksAInput>;
  Tasks_A?: Maybe<TaskCreateNestedManyWithoutTasksBInput>;
}

export interface TaskListRelationFilter {
  every?: Maybe<TaskWhereInput>;
  some?: Maybe<TaskWhereInput>;
  none?: Maybe<TaskWhereInput>;
}

export interface TaskMemberCreateManyTaskTaskToTaskMemberInput {
  id?: Maybe<Scalars['String']>;
  status?: Maybe<TaskMemberStatus>;
  User?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface TaskMemberCreateManyTaskTaskToTaskMemberInputEnvelope {
  data?: Maybe<Array<TaskMemberCreateManyTaskTaskToTaskMemberInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TaskMemberCreateManyUserTaskMemberCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  status?: Maybe<TaskMemberStatus>;
  Task?: Maybe<Scalars['String']>;
  User?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface TaskMemberCreateManyUserTaskMemberCreatedByToUserInputEnvelope {
  data?: Maybe<Array<TaskMemberCreateManyUserTaskMemberCreatedByToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TaskMemberCreateManyUserTaskMemberUserToUserInput {
  id?: Maybe<Scalars['String']>;
  status?: Maybe<TaskMemberStatus>;
  Task?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface TaskMemberCreateManyUserTaskMemberUserToUserInputEnvelope {
  data?: Maybe<Array<TaskMemberCreateManyUserTaskMemberUserToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TaskMemberCreateNestedManyWithoutTaskTaskToTaskMemberInput {
  create?: Maybe<Array<TaskMemberCreateWithoutTaskTaskToTaskMemberInput>>;
  connectOrCreate?: Maybe<Array<TaskMemberCreateOrConnectWithoutTaskTaskToTaskMemberInput>>;
  createMany?: Maybe<TaskMemberCreateManyTaskTaskToTaskMemberInputEnvelope>;
  connect?: Maybe<Array<TaskMemberWhereUniqueInput>>;
}

export interface TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput {
  create?: Maybe<Array<TaskMemberCreateWithoutUserTaskMemberCreatedByToUserInput>>;
  connectOrCreate?: Maybe<Array<TaskMemberCreateOrConnectWithoutUserTaskMemberCreatedByToUserInput>>;
  createMany?: Maybe<TaskMemberCreateManyUserTaskMemberCreatedByToUserInputEnvelope>;
  connect?: Maybe<Array<TaskMemberWhereUniqueInput>>;
}

export interface TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput {
  create?: Maybe<Array<TaskMemberCreateWithoutUserTaskMemberUserToUserInput>>;
  connectOrCreate?: Maybe<Array<TaskMemberCreateOrConnectWithoutUserTaskMemberUserToUserInput>>;
  createMany?: Maybe<TaskMemberCreateManyUserTaskMemberUserToUserInputEnvelope>;
  connect?: Maybe<Array<TaskMemberWhereUniqueInput>>;
}

export interface TaskMemberCreateOrConnectWithoutTaskTaskToTaskMemberInput {
  where: TaskMemberWhereUniqueInput;
  create: TaskMemberCreateWithoutTaskTaskToTaskMemberInput;
}

export interface TaskMemberCreateOrConnectWithoutUserTaskMemberCreatedByToUserInput {
  where: TaskMemberWhereUniqueInput;
  create: TaskMemberCreateWithoutUserTaskMemberCreatedByToUserInput;
}

export interface TaskMemberCreateOrConnectWithoutUserTaskMemberUserToUserInput {
  where: TaskMemberWhereUniqueInput;
  create: TaskMemberCreateWithoutUserTaskMemberUserToUserInput;
}

export interface TaskMemberCreateWithoutTaskTaskToTaskMemberInput {
  id?: Maybe<Scalars['String']>;
  status?: Maybe<TaskMemberStatus>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User_TaskMember_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutTaskMembersTaskMemberCreatedByToUserInput>;
  User_TaskMember_UserToUser?: Maybe<UserCreateNestedOneWithoutTaskMembersTaskMemberUserToUserInput>;
}

export interface TaskMemberCreateWithoutUserTaskMemberCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  status?: Maybe<TaskMemberStatus>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  Task_TaskToTaskMember?: Maybe<TaskCreateNestedOneWithoutTaskMembersInput>;
  User_TaskMember_UserToUser?: Maybe<UserCreateNestedOneWithoutTaskMembersTaskMemberUserToUserInput>;
}

export interface TaskMemberCreateWithoutUserTaskMemberUserToUserInput {
  id?: Maybe<Scalars['String']>;
  status?: Maybe<TaskMemberStatus>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User_TaskMember_CreatedByToUser?: Maybe<UserCreateNestedOneWithoutTaskMembersTaskMemberCreatedByToUserInput>;
  Task_TaskToTaskMember?: Maybe<TaskCreateNestedOneWithoutTaskMembersInput>;
}

export interface TaskMemberListRelationFilter {
  every?: Maybe<TaskMemberWhereInput>;
  some?: Maybe<TaskMemberWhereInput>;
  none?: Maybe<TaskMemberWhereInput>;
}

export interface TaskMemberOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export enum TaskMemberStatus {
  INVITED = 'Invited',
  ACTIVE = 'Active',
  FIRED = 'Fired',
  QUIT = 'Quit'
}

export interface TaskMemberWhereInput {
  AND?: Maybe<Array<TaskMemberWhereInput>>;
  OR?: Maybe<Array<TaskMemberWhereInput>>;
  NOT?: Maybe<Array<TaskMemberWhereInput>>;
  id?: Maybe<StringFilter>;
  status?: Maybe<EnumTaskMemberStatusFilter>;
  Task?: Maybe<StringNullableFilter>;
  User?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  User_TaskMember_CreatedByToUser?: Maybe<UserWhereInput>;
  Task_TaskToTaskMember?: Maybe<TaskWhereInput>;
  User_TaskMember_UserToUser?: Maybe<UserWhereInput>;
}

export interface TaskMemberWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface TaskOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface TaskOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  description?: Maybe<SortOrder>;
  content?: Maybe<SortOrder>;
  status?: Maybe<SortOrder>;
  startDatePlaning?: Maybe<SortOrder>;
  endDatePlaning?: Maybe<SortOrder>;
  startDate?: Maybe<SortOrder>;
  endDate?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  Parent?: Maybe<SortOrder>;
  ChatRoom?: Maybe<SortOrder>;
  needHelp?: Maybe<SortOrder>;
  ChatRoom_ChatRoomToTask?: Maybe<ChatRoomOrderByWithRelationInput>;
  User?: Maybe<UserOrderByWithRelationInput>;
  Task?: Maybe<TaskOrderByWithRelationInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionOrderByRelationAggregateInput>;
  ProjectTasks?: Maybe<ProjectTaskOrderByRelationAggregateInput>;
  Resources?: Maybe<ResourceOrderByRelationAggregateInput>;
  other_Tasks?: Maybe<TaskOrderByRelationAggregateInput>;
  TaskMembers?: Maybe<TaskMemberOrderByRelationAggregateInput>;
  TaskReactions?: Maybe<TaskReactionOrderByRelationAggregateInput>;
  TaskTechnologies?: Maybe<TaskTechnologyOrderByRelationAggregateInput>;
  Timers?: Maybe<TimerOrderByRelationAggregateInput>;
  Tasks_B?: Maybe<TaskOrderByRelationAggregateInput>;
  Tasks_A?: Maybe<TaskOrderByRelationAggregateInput>;
}

export interface TaskReaction {
  __typename?: 'TaskReaction';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  type?: Maybe<TaskReactionType>;
}

export interface TaskReactionCreateManyTaskTaskToTaskReactionInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type: TaskReactionType;
  CreatedBy: Scalars['String'];
}

export interface TaskReactionCreateManyTaskTaskToTaskReactionInputEnvelope {
  data?: Maybe<Array<TaskReactionCreateManyTaskTaskToTaskReactionInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TaskReactionCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type: TaskReactionType;
  Task?: Maybe<Scalars['String']>;
}

export interface TaskReactionCreateManyUserInputEnvelope {
  data?: Maybe<Array<TaskReactionCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TaskReactionCreateNestedManyWithoutTaskTaskToTaskReactionInput {
  create?: Maybe<Array<TaskReactionCreateWithoutTaskTaskToTaskReactionInput>>;
  connectOrCreate?: Maybe<Array<TaskReactionCreateOrConnectWithoutTaskTaskToTaskReactionInput>>;
  createMany?: Maybe<TaskReactionCreateManyTaskTaskToTaskReactionInputEnvelope>;
  connect?: Maybe<Array<TaskReactionWhereUniqueInput>>;
}

export interface TaskReactionCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<TaskReactionCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<TaskReactionCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<TaskReactionCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<TaskReactionWhereUniqueInput>>;
}

export interface TaskReactionCreateOrConnectWithoutTaskTaskToTaskReactionInput {
  where: TaskReactionWhereUniqueInput;
  create: TaskReactionCreateWithoutTaskTaskToTaskReactionInput;
}

export interface TaskReactionCreateOrConnectWithoutUserInput {
  where: TaskReactionWhereUniqueInput;
  create: TaskReactionCreateWithoutUserInput;
}

export interface TaskReactionCreateWithoutTaskTaskToTaskReactionInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type: TaskReactionType;
  User: UserCreateNestedOneWithoutTaskReactionsInput;
}

export interface TaskReactionCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  type: TaskReactionType;
  Task_TaskToTaskReaction?: Maybe<TaskCreateNestedOneWithoutTaskReactionsInput>;
}

export interface TaskReactionListRelationFilter {
  every?: Maybe<TaskReactionWhereInput>;
  some?: Maybe<TaskReactionWhereInput>;
  none?: Maybe<TaskReactionWhereInput>;
}

export interface TaskReactionOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export enum TaskReactionType {
  UPVOTE = 'UpVote'
}

export interface TaskReactionWhereInput {
  AND?: Maybe<Array<TaskReactionWhereInput>>;
  OR?: Maybe<Array<TaskReactionWhereInput>>;
  NOT?: Maybe<Array<TaskReactionWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  type?: Maybe<EnumTaskReactionTypeFilter>;
  Task?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringFilter>;
  User?: Maybe<UserWhereInput>;
  Task_TaskToTaskReaction?: Maybe<TaskWhereInput>;
}

export interface TaskReactionWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface TaskResponse {
  __typename?: 'TaskResponse';
  success: Scalars['Boolean'];
  message: Scalars['String'];
  errors: Array<RequestError>;
  data?: Maybe<Task>;
}

export enum TaskStatus {
  NEW = 'New',
  ACCEPTED = 'Accepted',
  REJECTED = 'Rejected',
  PROGRESS = 'Progress',
  PAUSED = 'Paused',
  DONE = 'Done',
  DISCUSS = 'Discuss',
  APPROVED = 'Approved',
  REVISIONSREQUIRED = 'RevisionsRequired',
  COMPLETED = 'Completed'
}

export interface TaskTechnology {
  __typename?: 'TaskTechnology';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  level?: Maybe<Scalars['UserTechnologyLevel']>;
  CreatedBy?: Maybe<User>;
  Technology?: Maybe<Technology>;
  Task?: Maybe<Task>;
}

export interface TaskTechnologyCreateInput {
  id?: Maybe<Scalars['ID']>;
  level?: Maybe<Scalars['UserTechnologyLevel']>;
  Task: TaskCreateOneWithoutTaskTechnologiesInput;
  Technology: TechnologyCreateOneWithoutTaskTechnologiesInput;
}

export interface TaskTechnologyCreateManyTaskTaskToTaskTechnologyInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  level?: Maybe<Scalars['Int']>;
  Technology?: Maybe<Scalars['String']>;
  CreatedBy: Scalars['String'];
}

export interface TaskTechnologyCreateManyTaskTaskToTaskTechnologyInputEnvelope {
  data?: Maybe<Array<TaskTechnologyCreateManyTaskTaskToTaskTechnologyInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TaskTechnologyCreateManyTechnologyTaskTechnologyToTechnologyInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  level?: Maybe<Scalars['Int']>;
  Task?: Maybe<Scalars['String']>;
  CreatedBy: Scalars['String'];
}

export interface TaskTechnologyCreateManyTechnologyTaskTechnologyToTechnologyInputEnvelope {
  data?: Maybe<Array<TaskTechnologyCreateManyTechnologyTaskTechnologyToTechnologyInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TaskTechnologyCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  level?: Maybe<Scalars['Int']>;
  Technology?: Maybe<Scalars['String']>;
  Task?: Maybe<Scalars['String']>;
}

export interface TaskTechnologyCreateManyUserInputEnvelope {
  data?: Maybe<Array<TaskTechnologyCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TaskTechnologyCreateNestedManyWithoutTaskTaskToTaskTechnologyInput {
  create?: Maybe<Array<TaskTechnologyCreateWithoutTaskTaskToTaskTechnologyInput>>;
  connectOrCreate?: Maybe<Array<TaskTechnologyCreateOrConnectWithoutTaskTaskToTaskTechnologyInput>>;
  createMany?: Maybe<TaskTechnologyCreateManyTaskTaskToTaskTechnologyInputEnvelope>;
  connect?: Maybe<Array<TaskTechnologyWhereUniqueInput>>;
}

export interface TaskTechnologyCreateNestedManyWithoutTechnologyTaskTechnologyToTechnologyInput {
  create?: Maybe<Array<TaskTechnologyCreateWithoutTechnologyTaskTechnologyToTechnologyInput>>;
  connectOrCreate?: Maybe<Array<TaskTechnologyCreateOrConnectWithoutTechnologyTaskTechnologyToTechnologyInput>>;
  createMany?: Maybe<TaskTechnologyCreateManyTechnologyTaskTechnologyToTechnologyInputEnvelope>;
  connect?: Maybe<Array<TaskTechnologyWhereUniqueInput>>;
}

export interface TaskTechnologyCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<TaskTechnologyCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<TaskTechnologyCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<TaskTechnologyCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<TaskTechnologyWhereUniqueInput>>;
}

export interface TaskTechnologyCreateOrConnectWithoutTaskTaskToTaskTechnologyInput {
  where: TaskTechnologyWhereUniqueInput;
  create: TaskTechnologyCreateWithoutTaskTaskToTaskTechnologyInput;
}

export interface TaskTechnologyCreateOrConnectWithoutTechnologyTaskTechnologyToTechnologyInput {
  where: TaskTechnologyWhereUniqueInput;
  create: TaskTechnologyCreateWithoutTechnologyTaskTechnologyToTechnologyInput;
}

export interface TaskTechnologyCreateOrConnectWithoutUserInput {
  where: TaskTechnologyWhereUniqueInput;
  create: TaskTechnologyCreateWithoutUserInput;
}

export interface TaskTechnologyCreateWithoutTaskTaskToTaskTechnologyInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  level?: Maybe<Scalars['Int']>;
  User: UserCreateNestedOneWithoutTaskTechnologiesInput;
  Technology_TaskTechnologyToTechnology?: Maybe<TechnologyCreateNestedOneWithoutTaskTechnologiesInput>;
}

export interface TaskTechnologyCreateWithoutTechnologyTaskTechnologyToTechnologyInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  level?: Maybe<Scalars['Int']>;
  User: UserCreateNestedOneWithoutTaskTechnologiesInput;
  Task_TaskToTaskTechnology?: Maybe<TaskCreateNestedOneWithoutTaskTechnologiesInput>;
}

export interface TaskTechnologyCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  level?: Maybe<Scalars['Int']>;
  Task_TaskToTaskTechnology?: Maybe<TaskCreateNestedOneWithoutTaskTechnologiesInput>;
  Technology_TaskTechnologyToTechnology?: Maybe<TechnologyCreateNestedOneWithoutTaskTechnologiesInput>;
}

export interface TaskTechnologyListRelationFilter {
  every?: Maybe<TaskTechnologyWhereInput>;
  some?: Maybe<TaskTechnologyWhereInput>;
  none?: Maybe<TaskTechnologyWhereInput>;
}

export interface TaskTechnologyOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface TaskTechnologyOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  level?: Maybe<SortOrder>;
  Technology?: Maybe<SortOrder>;
  Task?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  User?: Maybe<UserOrderByWithRelationInput>;
  Task_TaskToTaskTechnology?: Maybe<TaskOrderByWithRelationInput>;
  Technology_TaskTechnologyToTechnology?: Maybe<TechnologyOrderByWithRelationInput>;
}

export interface TaskTechnologyResponse {
  __typename?: 'TaskTechnologyResponse';
  success: Scalars['Boolean'];
  message: Scalars['String'];
  errors: Array<RequestError>;
  data?: Maybe<TaskTechnology>;
}

export interface TaskTechnologyTaskTechnologyCompoundUniqueInput {
  Task: Scalars['String'];
  Technology: Scalars['String'];
}

export interface TaskTechnologyUpdateInput {
  level?: Maybe<Scalars['UserTechnologyLevel']>;
  Task?: Maybe<TaskCreateOneWithoutTaskTechnologiesInput>;
  Technology?: Maybe<TechnologyCreateOneWithoutTaskTechnologiesInput>;
}

export interface TaskTechnologyWhereInput {
  AND?: Maybe<Array<TaskTechnologyWhereInput>>;
  OR?: Maybe<Array<TaskTechnologyWhereInput>>;
  NOT?: Maybe<Array<TaskTechnologyWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  level?: Maybe<IntNullableFilter>;
  Technology?: Maybe<StringNullableFilter>;
  Task?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringFilter>;
  User?: Maybe<UserWhereInput>;
  Task_TaskToTaskTechnology?: Maybe<TaskWhereInput>;
  Technology_TaskTechnologyToTechnology?: Maybe<TechnologyWhereInput>;
}

export interface TaskTechnologyWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  Task_Technology?: Maybe<TaskTechnologyTaskTechnologyCompoundUniqueInput>;
}

export interface TaskUpdateInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['JSON']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  Timers?: Maybe<TimerUpdateManyWithoutTaskInput>;
}

export interface TaskWhereInput {
  AND?: Maybe<Array<TaskWhereInput>>;
  OR?: Maybe<Array<TaskWhereInput>>;
  NOT?: Maybe<Array<TaskWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  name?: Maybe<StringFilter>;
  description?: Maybe<StringNullableFilter>;
  content?: Maybe<JsonNullableFilter>;
  status?: Maybe<EnumTaskStatusFilter>;
  startDatePlaning?: Maybe<DateTimeNullableFilter>;
  endDatePlaning?: Maybe<DateTimeNullableFilter>;
  startDate?: Maybe<DateTimeNullableFilter>;
  endDate?: Maybe<DateTimeNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  Parent?: Maybe<StringNullableFilter>;
  ChatRoom?: Maybe<StringNullableFilter>;
  needHelp?: Maybe<BoolNullableFilter>;
  ChatRoom_ChatRoomToTask?: Maybe<ChatRoomWhereInput>;
  User?: Maybe<UserWhereInput>;
  Task?: Maybe<TaskWhereInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionListRelationFilter>;
  ProjectTasks?: Maybe<ProjectTaskListRelationFilter>;
  Resources?: Maybe<ResourceListRelationFilter>;
  other_Tasks?: Maybe<TaskListRelationFilter>;
  TaskMembers?: Maybe<TaskMemberListRelationFilter>;
  TaskReactions?: Maybe<TaskReactionListRelationFilter>;
  TaskTechnologies?: Maybe<TaskTechnologyListRelationFilter>;
  Timers?: Maybe<TimerListRelationFilter>;
  Tasks_B?: Maybe<TaskListRelationFilter>;
  Tasks_A?: Maybe<TaskListRelationFilter>;
}

export interface TaskWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface TeamCreateManyTeamInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  CreatedBy: Scalars['String'];
}

export interface TeamCreateManyTeamInputEnvelope {
  data?: Maybe<Array<TeamCreateManyTeamInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TeamCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  Parent?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface TeamCreateManyUserInputEnvelope {
  data?: Maybe<Array<TeamCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TeamCreateNestedManyWithoutGamesInput {
  create?: Maybe<Array<TeamCreateWithoutGamesInput>>;
  connectOrCreate?: Maybe<Array<TeamCreateOrConnectWithoutGamesInput>>;
  connect?: Maybe<Array<TeamWhereUniqueInput>>;
}

export interface TeamCreateNestedManyWithoutProjectProjectCustomersInput {
  create?: Maybe<Array<TeamCreateWithoutProjectProjectCustomersInput>>;
  connectOrCreate?: Maybe<Array<TeamCreateOrConnectWithoutProjectProjectCustomersInput>>;
  connect?: Maybe<Array<TeamWhereUniqueInput>>;
}

export interface TeamCreateNestedManyWithoutTeamInput {
  create?: Maybe<Array<TeamCreateWithoutTeamInput>>;
  connectOrCreate?: Maybe<Array<TeamCreateOrConnectWithoutTeamInput>>;
  createMany?: Maybe<TeamCreateManyTeamInputEnvelope>;
  connect?: Maybe<Array<TeamWhereUniqueInput>>;
}

export interface TeamCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<TeamCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<TeamCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<TeamCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<TeamWhereUniqueInput>>;
}

export interface TeamCreateNestedOneWithoutGameResultsInput {
  create?: Maybe<TeamCreateWithoutGameResultsInput>;
  connectOrCreate?: Maybe<TeamCreateOrConnectWithoutGameResultsInput>;
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface TeamCreateNestedOneWithoutOtherTeamsInput {
  create?: Maybe<TeamCreateWithoutOtherTeamsInput>;
  connectOrCreate?: Maybe<TeamCreateOrConnectWithoutOtherTeamsInput>;
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface TeamCreateNestedOneWithoutProjectsProjectToTeamInput {
  create?: Maybe<TeamCreateWithoutProjectsProjectToTeamInput>;
  connectOrCreate?: Maybe<TeamCreateOrConnectWithoutProjectsProjectToTeamInput>;
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface TeamCreateNestedOneWithoutResourcesInput {
  create?: Maybe<TeamCreateWithoutResourcesInput>;
  connectOrCreate?: Maybe<TeamCreateOrConnectWithoutResourcesInput>;
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface TeamCreateNestedOneWithoutTeamMembersInput {
  create?: Maybe<TeamCreateWithoutTeamMembersInput>;
  connectOrCreate?: Maybe<TeamCreateOrConnectWithoutTeamMembersInput>;
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface TeamCreateOrConnectWithoutGameResultsInput {
  where: TeamWhereUniqueInput;
  create: TeamCreateWithoutGameResultsInput;
}

export interface TeamCreateOrConnectWithoutGamesInput {
  where: TeamWhereUniqueInput;
  create: TeamCreateWithoutGamesInput;
}

export interface TeamCreateOrConnectWithoutOtherTeamsInput {
  where: TeamWhereUniqueInput;
  create: TeamCreateWithoutOtherTeamsInput;
}

export interface TeamCreateOrConnectWithoutProjectProjectCustomersInput {
  where: TeamWhereUniqueInput;
  create: TeamCreateWithoutProjectProjectCustomersInput;
}

export interface TeamCreateOrConnectWithoutProjectsProjectToTeamInput {
  where: TeamWhereUniqueInput;
  create: TeamCreateWithoutProjectsProjectToTeamInput;
}

export interface TeamCreateOrConnectWithoutResourcesInput {
  where: TeamWhereUniqueInput;
  create: TeamCreateWithoutResourcesInput;
}

export interface TeamCreateOrConnectWithoutTeamInput {
  where: TeamWhereUniqueInput;
  create: TeamCreateWithoutTeamInput;
}

export interface TeamCreateOrConnectWithoutTeamMembersInput {
  where: TeamWhereUniqueInput;
  create: TeamCreateWithoutTeamMembersInput;
}

export interface TeamCreateOrConnectWithoutUserInput {
  where: TeamWhereUniqueInput;
  create: TeamCreateWithoutUserInput;
}

export interface TeamCreateWithoutGameResultsInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User: UserCreateNestedOneWithoutTeamsInput;
  Team?: Maybe<TeamCreateNestedOneWithoutOtherTeamsInput>;
  Projects_ProjectToTeam?: Maybe<ProjectCreateNestedManyWithoutTeamProjectToTeamInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutTeamResourceToTeamInput>;
  other_Teams?: Maybe<TeamCreateNestedManyWithoutTeamInput>;
  TeamMembers?: Maybe<TeamMemberCreateNestedManyWithoutTeamTeamToTeamMemberInput>;
  Games?: Maybe<GameCreateNestedManyWithoutTeamInput>;
  Project_ProjectCustomers?: Maybe<ProjectCreateNestedManyWithoutTeamProjectCustomersInput>;
}

export interface TeamCreateWithoutGamesInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User: UserCreateNestedOneWithoutTeamsInput;
  Team?: Maybe<TeamCreateNestedOneWithoutOtherTeamsInput>;
  GameResults?: Maybe<GameResultCreateNestedManyWithoutTeamGameResultToTeamInput>;
  Projects_ProjectToTeam?: Maybe<ProjectCreateNestedManyWithoutTeamProjectToTeamInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutTeamResourceToTeamInput>;
  other_Teams?: Maybe<TeamCreateNestedManyWithoutTeamInput>;
  TeamMembers?: Maybe<TeamMemberCreateNestedManyWithoutTeamTeamToTeamMemberInput>;
  Project_ProjectCustomers?: Maybe<ProjectCreateNestedManyWithoutTeamProjectCustomersInput>;
}

export interface TeamCreateWithoutOtherTeamsInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User: UserCreateNestedOneWithoutTeamsInput;
  Team?: Maybe<TeamCreateNestedOneWithoutOtherTeamsInput>;
  GameResults?: Maybe<GameResultCreateNestedManyWithoutTeamGameResultToTeamInput>;
  Projects_ProjectToTeam?: Maybe<ProjectCreateNestedManyWithoutTeamProjectToTeamInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutTeamResourceToTeamInput>;
  TeamMembers?: Maybe<TeamMemberCreateNestedManyWithoutTeamTeamToTeamMemberInput>;
  Games?: Maybe<GameCreateNestedManyWithoutTeamInput>;
  Project_ProjectCustomers?: Maybe<ProjectCreateNestedManyWithoutTeamProjectCustomersInput>;
}

export interface TeamCreateWithoutProjectProjectCustomersInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User: UserCreateNestedOneWithoutTeamsInput;
  Team?: Maybe<TeamCreateNestedOneWithoutOtherTeamsInput>;
  GameResults?: Maybe<GameResultCreateNestedManyWithoutTeamGameResultToTeamInput>;
  Projects_ProjectToTeam?: Maybe<ProjectCreateNestedManyWithoutTeamProjectToTeamInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutTeamResourceToTeamInput>;
  other_Teams?: Maybe<TeamCreateNestedManyWithoutTeamInput>;
  TeamMembers?: Maybe<TeamMemberCreateNestedManyWithoutTeamTeamToTeamMemberInput>;
  Games?: Maybe<GameCreateNestedManyWithoutTeamInput>;
}

export interface TeamCreateWithoutProjectsProjectToTeamInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User: UserCreateNestedOneWithoutTeamsInput;
  Team?: Maybe<TeamCreateNestedOneWithoutOtherTeamsInput>;
  GameResults?: Maybe<GameResultCreateNestedManyWithoutTeamGameResultToTeamInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutTeamResourceToTeamInput>;
  other_Teams?: Maybe<TeamCreateNestedManyWithoutTeamInput>;
  TeamMembers?: Maybe<TeamMemberCreateNestedManyWithoutTeamTeamToTeamMemberInput>;
  Games?: Maybe<GameCreateNestedManyWithoutTeamInput>;
  Project_ProjectCustomers?: Maybe<ProjectCreateNestedManyWithoutTeamProjectCustomersInput>;
}

export interface TeamCreateWithoutResourcesInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User: UserCreateNestedOneWithoutTeamsInput;
  Team?: Maybe<TeamCreateNestedOneWithoutOtherTeamsInput>;
  GameResults?: Maybe<GameResultCreateNestedManyWithoutTeamGameResultToTeamInput>;
  Projects_ProjectToTeam?: Maybe<ProjectCreateNestedManyWithoutTeamProjectToTeamInput>;
  other_Teams?: Maybe<TeamCreateNestedManyWithoutTeamInput>;
  TeamMembers?: Maybe<TeamMemberCreateNestedManyWithoutTeamTeamToTeamMemberInput>;
  Games?: Maybe<GameCreateNestedManyWithoutTeamInput>;
  Project_ProjectCustomers?: Maybe<ProjectCreateNestedManyWithoutTeamProjectCustomersInput>;
}

export interface TeamCreateWithoutTeamInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User: UserCreateNestedOneWithoutTeamsInput;
  GameResults?: Maybe<GameResultCreateNestedManyWithoutTeamGameResultToTeamInput>;
  Projects_ProjectToTeam?: Maybe<ProjectCreateNestedManyWithoutTeamProjectToTeamInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutTeamResourceToTeamInput>;
  other_Teams?: Maybe<TeamCreateNestedManyWithoutTeamInput>;
  TeamMembers?: Maybe<TeamMemberCreateNestedManyWithoutTeamTeamToTeamMemberInput>;
  Games?: Maybe<GameCreateNestedManyWithoutTeamInput>;
  Project_ProjectCustomers?: Maybe<ProjectCreateNestedManyWithoutTeamProjectCustomersInput>;
}

export interface TeamCreateWithoutTeamMembersInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User: UserCreateNestedOneWithoutTeamsInput;
  Team?: Maybe<TeamCreateNestedOneWithoutOtherTeamsInput>;
  GameResults?: Maybe<GameResultCreateNestedManyWithoutTeamGameResultToTeamInput>;
  Projects_ProjectToTeam?: Maybe<ProjectCreateNestedManyWithoutTeamProjectToTeamInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutTeamResourceToTeamInput>;
  other_Teams?: Maybe<TeamCreateNestedManyWithoutTeamInput>;
  Games?: Maybe<GameCreateNestedManyWithoutTeamInput>;
  Project_ProjectCustomers?: Maybe<ProjectCreateNestedManyWithoutTeamProjectCustomersInput>;
}

export interface TeamCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  Team?: Maybe<TeamCreateNestedOneWithoutOtherTeamsInput>;
  GameResults?: Maybe<GameResultCreateNestedManyWithoutTeamGameResultToTeamInput>;
  Projects_ProjectToTeam?: Maybe<ProjectCreateNestedManyWithoutTeamProjectToTeamInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutTeamResourceToTeamInput>;
  other_Teams?: Maybe<TeamCreateNestedManyWithoutTeamInput>;
  TeamMembers?: Maybe<TeamMemberCreateNestedManyWithoutTeamTeamToTeamMemberInput>;
  Games?: Maybe<GameCreateNestedManyWithoutTeamInput>;
  Project_ProjectCustomers?: Maybe<ProjectCreateNestedManyWithoutTeamProjectCustomersInput>;
}

export interface TeamListRelationFilter {
  every?: Maybe<TeamWhereInput>;
  some?: Maybe<TeamWhereInput>;
  none?: Maybe<TeamWhereInput>;
}

export interface TeamMemberCreateManyTeamTeamToTeamMemberInput {
  id?: Maybe<Scalars['String']>;
  status?: Maybe<TeamMemberStatus>;
  User?: Maybe<Scalars['String']>;
  CreatedBy: Scalars['String'];
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface TeamMemberCreateManyTeamTeamToTeamMemberInputEnvelope {
  data?: Maybe<Array<TeamMemberCreateManyTeamTeamToTeamMemberInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TeamMemberCreateManyUserTeamMemberCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  status?: Maybe<TeamMemberStatus>;
  User?: Maybe<Scalars['String']>;
  Team?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface TeamMemberCreateManyUserTeamMemberCreatedByToUserInputEnvelope {
  data?: Maybe<Array<TeamMemberCreateManyUserTeamMemberCreatedByToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TeamMemberCreateManyUserTeamMemberUserToUserInput {
  id?: Maybe<Scalars['String']>;
  status?: Maybe<TeamMemberStatus>;
  Team?: Maybe<Scalars['String']>;
  CreatedBy: Scalars['String'];
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface TeamMemberCreateManyUserTeamMemberUserToUserInputEnvelope {
  data?: Maybe<Array<TeamMemberCreateManyUserTeamMemberUserToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TeamMemberCreateNestedManyWithoutTeamTeamToTeamMemberInput {
  create?: Maybe<Array<TeamMemberCreateWithoutTeamTeamToTeamMemberInput>>;
  connectOrCreate?: Maybe<Array<TeamMemberCreateOrConnectWithoutTeamTeamToTeamMemberInput>>;
  createMany?: Maybe<TeamMemberCreateManyTeamTeamToTeamMemberInputEnvelope>;
  connect?: Maybe<Array<TeamMemberWhereUniqueInput>>;
}

export interface TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput {
  create?: Maybe<Array<TeamMemberCreateWithoutUserTeamMemberCreatedByToUserInput>>;
  connectOrCreate?: Maybe<Array<TeamMemberCreateOrConnectWithoutUserTeamMemberCreatedByToUserInput>>;
  createMany?: Maybe<TeamMemberCreateManyUserTeamMemberCreatedByToUserInputEnvelope>;
  connect?: Maybe<Array<TeamMemberWhereUniqueInput>>;
}

export interface TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput {
  create?: Maybe<Array<TeamMemberCreateWithoutUserTeamMemberUserToUserInput>>;
  connectOrCreate?: Maybe<Array<TeamMemberCreateOrConnectWithoutUserTeamMemberUserToUserInput>>;
  createMany?: Maybe<TeamMemberCreateManyUserTeamMemberUserToUserInputEnvelope>;
  connect?: Maybe<Array<TeamMemberWhereUniqueInput>>;
}

export interface TeamMemberCreateOrConnectWithoutTeamTeamToTeamMemberInput {
  where: TeamMemberWhereUniqueInput;
  create: TeamMemberCreateWithoutTeamTeamToTeamMemberInput;
}

export interface TeamMemberCreateOrConnectWithoutUserTeamMemberCreatedByToUserInput {
  where: TeamMemberWhereUniqueInput;
  create: TeamMemberCreateWithoutUserTeamMemberCreatedByToUserInput;
}

export interface TeamMemberCreateOrConnectWithoutUserTeamMemberUserToUserInput {
  where: TeamMemberWhereUniqueInput;
  create: TeamMemberCreateWithoutUserTeamMemberUserToUserInput;
}

export interface TeamMemberCreateWithoutTeamTeamToTeamMemberInput {
  id?: Maybe<Scalars['String']>;
  status?: Maybe<TeamMemberStatus>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User_TeamMember_CreatedByToUser: UserCreateNestedOneWithoutTeamMembersTeamMemberCreatedByToUserInput;
  User_TeamMember_UserToUser?: Maybe<UserCreateNestedOneWithoutTeamMembersTeamMemberUserToUserInput>;
}

export interface TeamMemberCreateWithoutUserTeamMemberCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  status?: Maybe<TeamMemberStatus>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  Team_TeamToTeamMember?: Maybe<TeamCreateNestedOneWithoutTeamMembersInput>;
  User_TeamMember_UserToUser?: Maybe<UserCreateNestedOneWithoutTeamMembersTeamMemberUserToUserInput>;
}

export interface TeamMemberCreateWithoutUserTeamMemberUserToUserInput {
  id?: Maybe<Scalars['String']>;
  status?: Maybe<TeamMemberStatus>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User_TeamMember_CreatedByToUser: UserCreateNestedOneWithoutTeamMembersTeamMemberCreatedByToUserInput;
  Team_TeamToTeamMember?: Maybe<TeamCreateNestedOneWithoutTeamMembersInput>;
}

export interface TeamMemberListRelationFilter {
  every?: Maybe<TeamMemberWhereInput>;
  some?: Maybe<TeamMemberWhereInput>;
  none?: Maybe<TeamMemberWhereInput>;
}

export interface TeamMemberOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export enum TeamMemberStatus {
  INVITED = 'Invited',
  ACTIVE = 'Active',
  FIRED = 'Fired'
}

export interface TeamMemberWhereInput {
  AND?: Maybe<Array<TeamMemberWhereInput>>;
  OR?: Maybe<Array<TeamMemberWhereInput>>;
  NOT?: Maybe<Array<TeamMemberWhereInput>>;
  id?: Maybe<StringFilter>;
  status?: Maybe<EnumTeamMemberStatusFilter>;
  User?: Maybe<StringNullableFilter>;
  Team?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  User_TeamMember_CreatedByToUser?: Maybe<UserWhereInput>;
  Team_TeamToTeamMember?: Maybe<TeamWhereInput>;
  User_TeamMember_UserToUser?: Maybe<UserWhereInput>;
}

export interface TeamMemberWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface TeamOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface TeamOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  status?: Maybe<SortOrder>;
  oldID?: Maybe<SortOrder>;
  address?: Maybe<SortOrder>;
  website?: Maybe<SortOrder>;
  email?: Maybe<SortOrder>;
  phone?: Maybe<SortOrder>;
  Parent?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  User?: Maybe<UserOrderByWithRelationInput>;
  Team?: Maybe<TeamOrderByWithRelationInput>;
  GameResults?: Maybe<GameResultOrderByRelationAggregateInput>;
  Projects_ProjectToTeam?: Maybe<ProjectOrderByRelationAggregateInput>;
  Resources?: Maybe<ResourceOrderByRelationAggregateInput>;
  other_Teams?: Maybe<TeamOrderByRelationAggregateInput>;
  TeamMembers?: Maybe<TeamMemberOrderByRelationAggregateInput>;
  Games?: Maybe<GameOrderByRelationAggregateInput>;
  Project_ProjectCustomers?: Maybe<ProjectOrderByRelationAggregateInput>;
}

export enum TeamStatus {
  ACTIVE = 'Active',
  INACTIVE = 'Inactive'
}

export interface TeamWhereInput {
  AND?: Maybe<Array<TeamWhereInput>>;
  OR?: Maybe<Array<TeamWhereInput>>;
  NOT?: Maybe<Array<TeamWhereInput>>;
  id?: Maybe<StringFilter>;
  name?: Maybe<StringFilter>;
  status?: Maybe<EnumTeamStatusFilter>;
  oldID?: Maybe<IntNullableFilter>;
  address?: Maybe<StringNullableFilter>;
  website?: Maybe<StringNullableFilter>;
  email?: Maybe<StringNullableFilter>;
  phone?: Maybe<StringNullableFilter>;
  Parent?: Maybe<StringNullableFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  CreatedBy?: Maybe<StringFilter>;
  User?: Maybe<UserWhereInput>;
  Team?: Maybe<TeamWhereInput>;
  GameResults?: Maybe<GameResultListRelationFilter>;
  Projects_ProjectToTeam?: Maybe<ProjectListRelationFilter>;
  Resources?: Maybe<ResourceListRelationFilter>;
  other_Teams?: Maybe<TeamListRelationFilter>;
  TeamMembers?: Maybe<TeamMemberListRelationFilter>;
  Games?: Maybe<GameListRelationFilter>;
  Project_ProjectCustomers?: Maybe<ProjectListRelationFilter>;
}

export interface TeamWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
}

export interface Technology {
  __typename?: 'Technology';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['EditorComponentObject']>;
  site_url?: Maybe<Scalars['String']>;
  /** Примерное количество часов на освоение уровня */
  level1hours?: Maybe<Scalars['Int']>;
  /** Примерное количество часов на освоение уровня */
  level2hours?: Maybe<Scalars['Int']>;
  /** Примерное количество часов на освоение уровня */
  level3hours?: Maybe<Scalars['Int']>;
  /** Примерное количество часов на освоение уровня */
  level4hours?: Maybe<Scalars['Int']>;
  /** Примерное количество часов на освоение уровня */
  level5hours?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<User>;
  UserTechnologies?: Maybe<Array<UserTechnology>>;
  LearnStrategyStages?: Maybe<Array<LearnStrategyStage>>;
}


export type TechnologyUserTechnologiesArgs = {
  orderBy?: Maybe<UserTechnologyOrderByWithRelationInput>;
};


export type TechnologyLearnStrategyStagesArgs = {
  orderBy?: Maybe<LearnStrategyStageOrderByWithRelationInput>;
};

export interface TechnologyCreateInput {
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
}

export interface TechnologyCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  components?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  site_url?: Maybe<Scalars['String']>;
  level1hours?: Maybe<Scalars['Int']>;
  level2hours?: Maybe<Scalars['Int']>;
  level3hours?: Maybe<Scalars['Int']>;
  level4hours?: Maybe<Scalars['Int']>;
  level5hours?: Maybe<Scalars['Int']>;
}

export interface TechnologyCreateManyUserInputEnvelope {
  data?: Maybe<Array<TechnologyCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TechnologyCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<TechnologyCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<TechnologyCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<TechnologyCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<TechnologyWhereUniqueInput>>;
}

export interface TechnologyCreateNestedOneWithoutLearnStrategyStagesInput {
  create?: Maybe<TechnologyCreateWithoutLearnStrategyStagesInput>;
  connectOrCreate?: Maybe<TechnologyCreateOrConnectWithoutLearnStrategyStagesInput>;
  connect?: Maybe<TechnologyWhereUniqueInput>;
}

export interface TechnologyCreateNestedOneWithoutTaskTechnologiesInput {
  create?: Maybe<TechnologyCreateWithoutTaskTechnologiesInput>;
  connectOrCreate?: Maybe<TechnologyCreateOrConnectWithoutTaskTechnologiesInput>;
  connect?: Maybe<TechnologyWhereUniqueInput>;
}

export interface TechnologyCreateNestedOneWithoutTechnologyLessonsInput {
  create?: Maybe<TechnologyCreateWithoutTechnologyLessonsInput>;
  connectOrCreate?: Maybe<TechnologyCreateOrConnectWithoutTechnologyLessonsInput>;
  connect?: Maybe<TechnologyWhereUniqueInput>;
}

export interface TechnologyCreateNestedOneWithoutUserTechnologiesInput {
  create?: Maybe<TechnologyCreateWithoutUserTechnologiesInput>;
  connectOrCreate?: Maybe<TechnologyCreateOrConnectWithoutUserTechnologiesInput>;
  connect?: Maybe<TechnologyWhereUniqueInput>;
}

export interface TechnologyCreateOneWithoutTaskTechnologiesInput {
  connect?: Maybe<TechnologyWhereUniqueInput>;
}

export interface TechnologyCreateOneWithoutUserTechnologiesInput {
  connect?: Maybe<TechnologyWhereUniqueInput>;
}

export interface TechnologyCreateOrConnectWithoutLearnStrategyStagesInput {
  where: TechnologyWhereUniqueInput;
  create: TechnologyCreateWithoutLearnStrategyStagesInput;
}

export interface TechnologyCreateOrConnectWithoutTaskTechnologiesInput {
  where: TechnologyWhereUniqueInput;
  create: TechnologyCreateWithoutTaskTechnologiesInput;
}

export interface TechnologyCreateOrConnectWithoutTechnologyLessonsInput {
  where: TechnologyWhereUniqueInput;
  create: TechnologyCreateWithoutTechnologyLessonsInput;
}

export interface TechnologyCreateOrConnectWithoutUserInput {
  where: TechnologyWhereUniqueInput;
  create: TechnologyCreateWithoutUserInput;
}

export interface TechnologyCreateOrConnectWithoutUserTechnologiesInput {
  where: TechnologyWhereUniqueInput;
  create: TechnologyCreateWithoutUserTechnologiesInput;
}

export interface TechnologyCreateWithoutLearnStrategyStagesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  components?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  site_url?: Maybe<Scalars['String']>;
  level1hours?: Maybe<Scalars['Int']>;
  level2hours?: Maybe<Scalars['Int']>;
  level3hours?: Maybe<Scalars['Int']>;
  level4hours?: Maybe<Scalars['Int']>;
  level5hours?: Maybe<Scalars['Int']>;
  User: UserCreateNestedOneWithoutTechnologiesInput;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutTechnologyTaskTechnologyToTechnologyInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutTechnologyTechnologyToTechnologyLessonInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutTechnologyTechnologyToUserTechnologyInput>;
}

export interface TechnologyCreateWithoutTaskTechnologiesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  components?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  site_url?: Maybe<Scalars['String']>;
  level1hours?: Maybe<Scalars['Int']>;
  level2hours?: Maybe<Scalars['Int']>;
  level3hours?: Maybe<Scalars['Int']>;
  level4hours?: Maybe<Scalars['Int']>;
  level5hours?: Maybe<Scalars['Int']>;
  User: UserCreateNestedOneWithoutTechnologiesInput;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutTechnologyTechnologyToTechnologyLessonInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutTechnologyTechnologyToUserTechnologyInput>;
  LearnStrategyStages?: Maybe<LearnStrategyStageCreateNestedManyWithoutTechnologyInput>;
}

export interface TechnologyCreateWithoutTechnologyLessonsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  components?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  site_url?: Maybe<Scalars['String']>;
  level1hours?: Maybe<Scalars['Int']>;
  level2hours?: Maybe<Scalars['Int']>;
  level3hours?: Maybe<Scalars['Int']>;
  level4hours?: Maybe<Scalars['Int']>;
  level5hours?: Maybe<Scalars['Int']>;
  User: UserCreateNestedOneWithoutTechnologiesInput;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutTechnologyTaskTechnologyToTechnologyInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutTechnologyTechnologyToUserTechnologyInput>;
  LearnStrategyStages?: Maybe<LearnStrategyStageCreateNestedManyWithoutTechnologyInput>;
}

export interface TechnologyCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  components?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  site_url?: Maybe<Scalars['String']>;
  level1hours?: Maybe<Scalars['Int']>;
  level2hours?: Maybe<Scalars['Int']>;
  level3hours?: Maybe<Scalars['Int']>;
  level4hours?: Maybe<Scalars['Int']>;
  level5hours?: Maybe<Scalars['Int']>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutTechnologyTaskTechnologyToTechnologyInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutTechnologyTechnologyToTechnologyLessonInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutTechnologyTechnologyToUserTechnologyInput>;
  LearnStrategyStages?: Maybe<LearnStrategyStageCreateNestedManyWithoutTechnologyInput>;
}

export interface TechnologyCreateWithoutUserTechnologiesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  components?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  site_url?: Maybe<Scalars['String']>;
  level1hours?: Maybe<Scalars['Int']>;
  level2hours?: Maybe<Scalars['Int']>;
  level3hours?: Maybe<Scalars['Int']>;
  level4hours?: Maybe<Scalars['Int']>;
  level5hours?: Maybe<Scalars['Int']>;
  User: UserCreateNestedOneWithoutTechnologiesInput;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutTechnologyTaskTechnologyToTechnologyInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutTechnologyTechnologyToTechnologyLessonInput>;
  LearnStrategyStages?: Maybe<LearnStrategyStageCreateNestedManyWithoutTechnologyInput>;
}

export interface TechnologyLessonCreateManyTechnologyTechnologyToTechnologyLessonInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  components?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  CreatedBy: Scalars['String'];
}

export interface TechnologyLessonCreateManyTechnologyTechnologyToTechnologyLessonInputEnvelope {
  data?: Maybe<Array<TechnologyLessonCreateManyTechnologyTechnologyToTechnologyLessonInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TechnologyLessonCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  components?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  Technology: Scalars['String'];
}

export interface TechnologyLessonCreateManyUserInputEnvelope {
  data?: Maybe<Array<TechnologyLessonCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TechnologyLessonCreateNestedManyWithoutTechnologyTechnologyToTechnologyLessonInput {
  create?: Maybe<Array<TechnologyLessonCreateWithoutTechnologyTechnologyToTechnologyLessonInput>>;
  connectOrCreate?: Maybe<Array<TechnologyLessonCreateOrConnectWithoutTechnologyTechnologyToTechnologyLessonInput>>;
  createMany?: Maybe<TechnologyLessonCreateManyTechnologyTechnologyToTechnologyLessonInputEnvelope>;
  connect?: Maybe<Array<TechnologyLessonWhereUniqueInput>>;
}

export interface TechnologyLessonCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<TechnologyLessonCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<TechnologyLessonCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<TechnologyLessonCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<TechnologyLessonWhereUniqueInput>>;
}

export interface TechnologyLessonCreateNestedOneWithoutCommentsInput {
  create?: Maybe<TechnologyLessonCreateWithoutCommentsInput>;
  connectOrCreate?: Maybe<TechnologyLessonCreateOrConnectWithoutCommentsInput>;
  connect?: Maybe<TechnologyLessonWhereUniqueInput>;
}

export interface TechnologyLessonCreateNestedOneWithoutTechnologyLessonUsersInput {
  create?: Maybe<TechnologyLessonCreateWithoutTechnologyLessonUsersInput>;
  connectOrCreate?: Maybe<TechnologyLessonCreateOrConnectWithoutTechnologyLessonUsersInput>;
  connect?: Maybe<TechnologyLessonWhereUniqueInput>;
}

export interface TechnologyLessonCreateOrConnectWithoutCommentsInput {
  where: TechnologyLessonWhereUniqueInput;
  create: TechnologyLessonCreateWithoutCommentsInput;
}

export interface TechnologyLessonCreateOrConnectWithoutTechnologyLessonUsersInput {
  where: TechnologyLessonWhereUniqueInput;
  create: TechnologyLessonCreateWithoutTechnologyLessonUsersInput;
}

export interface TechnologyLessonCreateOrConnectWithoutTechnologyTechnologyToTechnologyLessonInput {
  where: TechnologyLessonWhereUniqueInput;
  create: TechnologyLessonCreateWithoutTechnologyTechnologyToTechnologyLessonInput;
}

export interface TechnologyLessonCreateOrConnectWithoutUserInput {
  where: TechnologyLessonWhereUniqueInput;
  create: TechnologyLessonCreateWithoutUserInput;
}

export interface TechnologyLessonCreateWithoutCommentsInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  components?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  User: UserCreateNestedOneWithoutTechnologyLessonsInput;
  Technology_TechnologyToTechnologyLesson: TechnologyCreateNestedOneWithoutTechnologyLessonsInput;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutTechnologyLessonInput>;
}

export interface TechnologyLessonCreateWithoutTechnologyLessonUsersInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  components?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  User: UserCreateNestedOneWithoutTechnologyLessonsInput;
  Technology_TechnologyToTechnologyLesson: TechnologyCreateNestedOneWithoutTechnologyLessonsInput;
  Comments?: Maybe<CommentCreateNestedManyWithoutTechnologyLessonCommentToTechnologyLessonInput>;
}

export interface TechnologyLessonCreateWithoutTechnologyTechnologyToTechnologyLessonInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  components?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  User: UserCreateNestedOneWithoutTechnologyLessonsInput;
  Comments?: Maybe<CommentCreateNestedManyWithoutTechnologyLessonCommentToTechnologyLessonInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutTechnologyLessonInput>;
}

export interface TechnologyLessonCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  components?: Maybe<NullableJsonNullValueInput>;
  contentText?: Maybe<Scalars['String']>;
  Technology_TechnologyToTechnologyLesson: TechnologyCreateNestedOneWithoutTechnologyLessonsInput;
  Comments?: Maybe<CommentCreateNestedManyWithoutTechnologyLessonCommentToTechnologyLessonInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutTechnologyLessonInput>;
}

export interface TechnologyLessonListRelationFilter {
  every?: Maybe<TechnologyLessonWhereInput>;
  some?: Maybe<TechnologyLessonWhereInput>;
  none?: Maybe<TechnologyLessonWhereInput>;
}

export interface TechnologyLessonOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface TechnologyLessonUserCreateManyTechnologyLessonInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  status?: Maybe<TechnologyLessonUserStatus>;
  completedAt?: Maybe<Scalars['DateTime']>;
  CreatedBy: Scalars['String'];
}

export interface TechnologyLessonUserCreateManyTechnologyLessonInputEnvelope {
  data?: Maybe<Array<TechnologyLessonUserCreateManyTechnologyLessonInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TechnologyLessonUserCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  status?: Maybe<TechnologyLessonUserStatus>;
  completedAt?: Maybe<Scalars['DateTime']>;
  Lesson: Scalars['String'];
}

export interface TechnologyLessonUserCreateManyUserInputEnvelope {
  data?: Maybe<Array<TechnologyLessonUserCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TechnologyLessonUserCreateNestedManyWithoutTechnologyLessonInput {
  create?: Maybe<Array<TechnologyLessonUserCreateWithoutTechnologyLessonInput>>;
  connectOrCreate?: Maybe<Array<TechnologyLessonUserCreateOrConnectWithoutTechnologyLessonInput>>;
  createMany?: Maybe<TechnologyLessonUserCreateManyTechnologyLessonInputEnvelope>;
  connect?: Maybe<Array<TechnologyLessonUserWhereUniqueInput>>;
}

export interface TechnologyLessonUserCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<TechnologyLessonUserCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<TechnologyLessonUserCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<TechnologyLessonUserCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<TechnologyLessonUserWhereUniqueInput>>;
}

export interface TechnologyLessonUserCreateOrConnectWithoutTechnologyLessonInput {
  where: TechnologyLessonUserWhereUniqueInput;
  create: TechnologyLessonUserCreateWithoutTechnologyLessonInput;
}

export interface TechnologyLessonUserCreateOrConnectWithoutUserInput {
  where: TechnologyLessonUserWhereUniqueInput;
  create: TechnologyLessonUserCreateWithoutUserInput;
}

export interface TechnologyLessonUserCreateWithoutTechnologyLessonInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  status?: Maybe<TechnologyLessonUserStatus>;
  completedAt?: Maybe<Scalars['DateTime']>;
  User: UserCreateNestedOneWithoutTechnologyLessonUsersInput;
}

export interface TechnologyLessonUserCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  status?: Maybe<TechnologyLessonUserStatus>;
  completedAt?: Maybe<Scalars['DateTime']>;
  TechnologyLesson: TechnologyLessonCreateNestedOneWithoutTechnologyLessonUsersInput;
}

export interface TechnologyLessonUserListRelationFilter {
  every?: Maybe<TechnologyLessonUserWhereInput>;
  some?: Maybe<TechnologyLessonUserWhereInput>;
  none?: Maybe<TechnologyLessonUserWhereInput>;
}

export interface TechnologyLessonUserOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export enum TechnologyLessonUserStatus {
  ACCEPTED = 'Accepted',
  COMPLETED = 'Completed'
}

export interface TechnologyLessonUserWhereInput {
  AND?: Maybe<Array<TechnologyLessonUserWhereInput>>;
  OR?: Maybe<Array<TechnologyLessonUserWhereInput>>;
  NOT?: Maybe<Array<TechnologyLessonUserWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  status?: Maybe<EnumTechnologyLessonUserStatusFilter>;
  completedAt?: Maybe<DateTimeNullableFilter>;
  CreatedBy?: Maybe<StringFilter>;
  User?: Maybe<UserWhereInput>;
  Lesson?: Maybe<StringFilter>;
  TechnologyLesson?: Maybe<TechnologyLessonWhereInput>;
}

export interface TechnologyLessonUserWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface TechnologyLessonWhereInput {
  AND?: Maybe<Array<TechnologyLessonWhereInput>>;
  OR?: Maybe<Array<TechnologyLessonWhereInput>>;
  NOT?: Maybe<Array<TechnologyLessonWhereInput>>;
  id?: Maybe<StringFilter>;
  name?: Maybe<StringNullableFilter>;
  components?: Maybe<JsonNullableFilter>;
  contentText?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringFilter>;
  User?: Maybe<UserWhereInput>;
  Technology?: Maybe<StringFilter>;
  Technology_TechnologyToTechnologyLesson?: Maybe<TechnologyWhereInput>;
  Comments?: Maybe<CommentListRelationFilter>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserListRelationFilter>;
}

export interface TechnologyLessonWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface TechnologyListRelationFilter {
  every?: Maybe<TechnologyWhereInput>;
  some?: Maybe<TechnologyWhereInput>;
  none?: Maybe<TechnologyWhereInput>;
}

export interface TechnologyOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface TechnologyOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  name?: Maybe<SortOrder>;
  description?: Maybe<SortOrder>;
  components?: Maybe<SortOrder>;
  contentText?: Maybe<SortOrder>;
  site_url?: Maybe<SortOrder>;
  level1hours?: Maybe<SortOrder>;
  level2hours?: Maybe<SortOrder>;
  level3hours?: Maybe<SortOrder>;
  level4hours?: Maybe<SortOrder>;
  level5hours?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  User?: Maybe<UserOrderByWithRelationInput>;
  TaskTechnologies?: Maybe<TaskTechnologyOrderByRelationAggregateInput>;
  TechnologyLessons?: Maybe<TechnologyLessonOrderByRelationAggregateInput>;
  UserTechnologies?: Maybe<UserTechnologyOrderByRelationAggregateInput>;
  LearnStrategyStages?: Maybe<LearnStrategyStageOrderByRelationAggregateInput>;
}

export interface TechnologyUpdateInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  site_url?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['EditorComponentObject']>;
  level1hours?: Maybe<Scalars['Int']>;
  level2hours?: Maybe<Scalars['Int']>;
  level3hours?: Maybe<Scalars['Int']>;
  level4hours?: Maybe<Scalars['Int']>;
  level5hours?: Maybe<Scalars['Int']>;
}

export interface TechnologyWhereInput {
  AND?: Maybe<Array<TechnologyWhereInput>>;
  OR?: Maybe<Array<TechnologyWhereInput>>;
  NOT?: Maybe<Array<TechnologyWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  name?: Maybe<StringFilter>;
  description?: Maybe<StringNullableFilter>;
  components?: Maybe<JsonNullableFilter>;
  contentText?: Maybe<StringNullableFilter>;
  site_url?: Maybe<StringNullableFilter>;
  level1hours?: Maybe<IntNullableFilter>;
  level2hours?: Maybe<IntNullableFilter>;
  level3hours?: Maybe<IntNullableFilter>;
  level4hours?: Maybe<IntNullableFilter>;
  level5hours?: Maybe<IntNullableFilter>;
  CreatedBy?: Maybe<StringFilter>;
  User?: Maybe<UserWhereInput>;
  TaskTechnologies?: Maybe<TaskTechnologyListRelationFilter>;
  TechnologyLessons?: Maybe<TechnologyLessonListRelationFilter>;
  UserTechnologies?: Maybe<UserTechnologyListRelationFilter>;
  LearnStrategyStages?: Maybe<LearnStrategyStageListRelationFilter>;
}

export interface TechnologyWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
}

export interface TemplateCreateManyProjectProjectToTemplatePrismaProjectInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  externalKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  props: JsonNullValueInput;
  components: JsonNullValueInput;
  vars?: Maybe<NullableJsonNullValueInput>;
  rank?: Maybe<Scalars['Int']>;
  Project?: Maybe<Scalars['String']>;
  Parent?: Maybe<Scalars['String']>;
  CreatedBy: Scalars['String'];
}

export interface TemplateCreateManyProjectProjectToTemplatePrismaProjectInputEnvelope {
  data?: Maybe<Array<TemplateCreateManyProjectProjectToTemplatePrismaProjectInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TemplateCreateManyProjectProjectToTemplateProjectInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  externalKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  props: JsonNullValueInput;
  components: JsonNullValueInput;
  vars?: Maybe<NullableJsonNullValueInput>;
  rank?: Maybe<Scalars['Int']>;
  PrismaProject?: Maybe<Scalars['String']>;
  Parent?: Maybe<Scalars['String']>;
  CreatedBy: Scalars['String'];
}

export interface TemplateCreateManyProjectProjectToTemplateProjectInputEnvelope {
  data?: Maybe<Array<TemplateCreateManyProjectProjectToTemplateProjectInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TemplateCreateManyTemplateInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  externalKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  props: JsonNullValueInput;
  components: JsonNullValueInput;
  vars?: Maybe<NullableJsonNullValueInput>;
  rank?: Maybe<Scalars['Int']>;
  PrismaProject?: Maybe<Scalars['String']>;
  Project?: Maybe<Scalars['String']>;
  CreatedBy: Scalars['String'];
}

export interface TemplateCreateManyTemplateInputEnvelope {
  data?: Maybe<Array<TemplateCreateManyTemplateInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TemplateCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  externalKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  props: JsonNullValueInput;
  components: JsonNullValueInput;
  vars?: Maybe<NullableJsonNullValueInput>;
  rank?: Maybe<Scalars['Int']>;
  PrismaProject?: Maybe<Scalars['String']>;
  Project?: Maybe<Scalars['String']>;
  Parent?: Maybe<Scalars['String']>;
}

export interface TemplateCreateManyUserInputEnvelope {
  data?: Maybe<Array<TemplateCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TemplateCreateNestedManyWithoutProjectProjectToTemplatePrismaProjectInput {
  create?: Maybe<Array<TemplateCreateWithoutProjectProjectToTemplatePrismaProjectInput>>;
  connectOrCreate?: Maybe<Array<TemplateCreateOrConnectWithoutProjectProjectToTemplatePrismaProjectInput>>;
  createMany?: Maybe<TemplateCreateManyProjectProjectToTemplatePrismaProjectInputEnvelope>;
  connect?: Maybe<Array<TemplateWhereUniqueInput>>;
}

export interface TemplateCreateNestedManyWithoutProjectProjectToTemplateProjectInput {
  create?: Maybe<Array<TemplateCreateWithoutProjectProjectToTemplateProjectInput>>;
  connectOrCreate?: Maybe<Array<TemplateCreateOrConnectWithoutProjectProjectToTemplateProjectInput>>;
  createMany?: Maybe<TemplateCreateManyProjectProjectToTemplateProjectInputEnvelope>;
  connect?: Maybe<Array<TemplateWhereUniqueInput>>;
}

export interface TemplateCreateNestedManyWithoutTemplateInput {
  create?: Maybe<Array<TemplateCreateWithoutTemplateInput>>;
  connectOrCreate?: Maybe<Array<TemplateCreateOrConnectWithoutTemplateInput>>;
  createMany?: Maybe<TemplateCreateManyTemplateInputEnvelope>;
  connect?: Maybe<Array<TemplateWhereUniqueInput>>;
}

export interface TemplateCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<TemplateCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<TemplateCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<TemplateCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<TemplateWhereUniqueInput>>;
}

export interface TemplateCreateNestedOneWithoutOtherTemplatesInput {
  create?: Maybe<TemplateCreateWithoutOtherTemplatesInput>;
  connectOrCreate?: Maybe<TemplateCreateOrConnectWithoutOtherTemplatesInput>;
  connect?: Maybe<TemplateWhereUniqueInput>;
}

export interface TemplateCreateOrConnectWithoutOtherTemplatesInput {
  where: TemplateWhereUniqueInput;
  create: TemplateCreateWithoutOtherTemplatesInput;
}

export interface TemplateCreateOrConnectWithoutProjectProjectToTemplatePrismaProjectInput {
  where: TemplateWhereUniqueInput;
  create: TemplateCreateWithoutProjectProjectToTemplatePrismaProjectInput;
}

export interface TemplateCreateOrConnectWithoutProjectProjectToTemplateProjectInput {
  where: TemplateWhereUniqueInput;
  create: TemplateCreateWithoutProjectProjectToTemplateProjectInput;
}

export interface TemplateCreateOrConnectWithoutTemplateInput {
  where: TemplateWhereUniqueInput;
  create: TemplateCreateWithoutTemplateInput;
}

export interface TemplateCreateOrConnectWithoutUserInput {
  where: TemplateWhereUniqueInput;
  create: TemplateCreateWithoutUserInput;
}

export interface TemplateCreateWithoutOtherTemplatesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  externalKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  props: JsonNullValueInput;
  components: JsonNullValueInput;
  vars?: Maybe<NullableJsonNullValueInput>;
  rank?: Maybe<Scalars['Int']>;
  User: UserCreateNestedOneWithoutTemplatesInput;
  Template?: Maybe<TemplateCreateNestedOneWithoutOtherTemplatesInput>;
  Project_ProjectToTemplate_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutTemplatesProjectToTemplatePrismaProjectInput>;
  Project_ProjectToTemplate_Project?: Maybe<ProjectCreateNestedOneWithoutTemplatesProjectToTemplateProjectInput>;
}

export interface TemplateCreateWithoutProjectProjectToTemplatePrismaProjectInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  externalKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  props: JsonNullValueInput;
  components: JsonNullValueInput;
  vars?: Maybe<NullableJsonNullValueInput>;
  rank?: Maybe<Scalars['Int']>;
  User: UserCreateNestedOneWithoutTemplatesInput;
  Template?: Maybe<TemplateCreateNestedOneWithoutOtherTemplatesInput>;
  Project_ProjectToTemplate_Project?: Maybe<ProjectCreateNestedOneWithoutTemplatesProjectToTemplateProjectInput>;
  other_Templates?: Maybe<TemplateCreateNestedManyWithoutTemplateInput>;
}

export interface TemplateCreateWithoutProjectProjectToTemplateProjectInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  externalKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  props: JsonNullValueInput;
  components: JsonNullValueInput;
  vars?: Maybe<NullableJsonNullValueInput>;
  rank?: Maybe<Scalars['Int']>;
  User: UserCreateNestedOneWithoutTemplatesInput;
  Template?: Maybe<TemplateCreateNestedOneWithoutOtherTemplatesInput>;
  Project_ProjectToTemplate_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutTemplatesProjectToTemplatePrismaProjectInput>;
  other_Templates?: Maybe<TemplateCreateNestedManyWithoutTemplateInput>;
}

export interface TemplateCreateWithoutTemplateInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  externalKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  props: JsonNullValueInput;
  components: JsonNullValueInput;
  vars?: Maybe<NullableJsonNullValueInput>;
  rank?: Maybe<Scalars['Int']>;
  User: UserCreateNestedOneWithoutTemplatesInput;
  Project_ProjectToTemplate_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutTemplatesProjectToTemplatePrismaProjectInput>;
  Project_ProjectToTemplate_Project?: Maybe<ProjectCreateNestedOneWithoutTemplatesProjectToTemplateProjectInput>;
  other_Templates?: Maybe<TemplateCreateNestedManyWithoutTemplateInput>;
}

export interface TemplateCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  externalKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  props: JsonNullValueInput;
  components: JsonNullValueInput;
  vars?: Maybe<NullableJsonNullValueInput>;
  rank?: Maybe<Scalars['Int']>;
  Template?: Maybe<TemplateCreateNestedOneWithoutOtherTemplatesInput>;
  Project_ProjectToTemplate_PrismaProject?: Maybe<ProjectCreateNestedOneWithoutTemplatesProjectToTemplatePrismaProjectInput>;
  Project_ProjectToTemplate_Project?: Maybe<ProjectCreateNestedOneWithoutTemplatesProjectToTemplateProjectInput>;
  other_Templates?: Maybe<TemplateCreateNestedManyWithoutTemplateInput>;
}

export interface TemplateListRelationFilter {
  every?: Maybe<TemplateWhereInput>;
  some?: Maybe<TemplateWhereInput>;
  none?: Maybe<TemplateWhereInput>;
}

export interface TemplateOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface TemplateWhereInput {
  AND?: Maybe<Array<TemplateWhereInput>>;
  OR?: Maybe<Array<TemplateWhereInput>>;
  NOT?: Maybe<Array<TemplateWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  externalKey?: Maybe<StringNullableFilter>;
  name?: Maybe<StringNullableFilter>;
  description?: Maybe<StringNullableFilter>;
  component?: Maybe<StringNullableFilter>;
  vars?: Maybe<JsonNullableFilter>;
  rank?: Maybe<IntNullableFilter>;
  PrismaProject?: Maybe<StringNullableFilter>;
  Project?: Maybe<StringNullableFilter>;
  Parent?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringFilter>;
  User?: Maybe<UserWhereInput>;
  Template?: Maybe<TemplateWhereInput>;
  Project_ProjectToTemplate_PrismaProject?: Maybe<ProjectWhereInput>;
  Project_ProjectToTemplate_Project?: Maybe<ProjectWhereInput>;
  other_Templates?: Maybe<TemplateListRelationFilter>;
}

export interface TemplateWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface Timer {
  __typename?: 'Timer';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  stopedAt?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<User>;
  Task?: Maybe<Task>;
}

export interface TimerCreateInput {
  stopedAt?: Maybe<Scalars['DateTime']>;
  Task?: Maybe<TaskCreateOneWithoutTimersInput>;
}

export interface TimerCreateManyTaskTaskToTimerInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  stopedAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<Scalars['String']>;
}

export interface TimerCreateManyTaskTaskToTimerInputEnvelope {
  data?: Maybe<Array<TimerCreateManyTaskTaskToTimerInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TimerCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  stopedAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  Task?: Maybe<Scalars['String']>;
}

export interface TimerCreateManyUserInputEnvelope {
  data?: Maybe<Array<TimerCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TimerCreateNestedManyWithoutTaskTaskToTimerInput {
  create?: Maybe<Array<TimerCreateWithoutTaskTaskToTimerInput>>;
  connectOrCreate?: Maybe<Array<TimerCreateOrConnectWithoutTaskTaskToTimerInput>>;
  createMany?: Maybe<TimerCreateManyTaskTaskToTimerInputEnvelope>;
  connect?: Maybe<Array<TimerWhereUniqueInput>>;
}

export interface TimerCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<TimerCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<TimerCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<TimerCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<TimerWhereUniqueInput>>;
}

export interface TimerCreateOrConnectWithoutTaskTaskToTimerInput {
  where: TimerWhereUniqueInput;
  create: TimerCreateWithoutTaskTaskToTimerInput;
}

export interface TimerCreateOrConnectWithoutUserInput {
  where: TimerWhereUniqueInput;
  create: TimerCreateWithoutUserInput;
}

export interface TimerCreateWithoutTaskTaskToTimerInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  stopedAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  User?: Maybe<UserCreateNestedOneWithoutTimersInput>;
}

export interface TimerCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  stopedAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  Task_TaskToTimer?: Maybe<TaskCreateNestedOneWithoutTimersInput>;
}

export interface TimerListRelationFilter {
  every?: Maybe<TimerWhereInput>;
  some?: Maybe<TimerWhereInput>;
  none?: Maybe<TimerWhereInput>;
}

export interface TimerOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface TimerOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  stopedAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  Task?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  User?: Maybe<UserOrderByWithRelationInput>;
  Task_TaskToTimer?: Maybe<TaskOrderByWithRelationInput>;
}

export interface TimerResponse {
  __typename?: 'TimerResponse';
  success: Scalars['Boolean'];
  message: Scalars['String'];
  errors: Array<RequestError>;
  data?: Maybe<Timer>;
}

export interface TimerUpdateInput {
  stopedAt?: Maybe<Scalars['DateTime']>;
}

export interface TimerUpdateManyDataInput {
  stopedAt?: Maybe<Scalars['DateTime']>;
}

export interface TimerUpdateManyWithWhereNestedInput {
  where: TimerWhereInput;
  data: TimerUpdateManyDataInput;
}

export interface TimerUpdateManyWithoutTaskInput {
  updateMany?: Maybe<Array<TimerUpdateManyWithWhereNestedInput>>;
}

export interface TimerWhereInput {
  AND?: Maybe<Array<TimerWhereInput>>;
  OR?: Maybe<Array<TimerWhereInput>>;
  NOT?: Maybe<Array<TimerWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  stopedAt?: Maybe<DateTimeNullableFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  Task?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  User?: Maybe<UserWhereInput>;
  Task_TaskToTimer?: Maybe<TaskWhereInput>;
}

export interface TimerWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface TokenCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  expiredAt?: Maybe<Scalars['DateTime']>;
}

export interface TokenCreateManyUserInputEnvelope {
  data?: Maybe<Array<TokenCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TokenCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<TokenCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<TokenCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<TokenCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<TokenWhereUniqueInput>>;
}

export interface TokenCreateOrConnectWithoutUserInput {
  where: TokenWhereUniqueInput;
  create: TokenCreateWithoutUserInput;
}

export interface TokenCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  expiredAt?: Maybe<Scalars['DateTime']>;
}

export interface TokenListRelationFilter {
  every?: Maybe<TokenWhereInput>;
  some?: Maybe<TokenWhereInput>;
  none?: Maybe<TokenWhereInput>;
}

export interface TokenOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface TokenWhereInput {
  AND?: Maybe<Array<TokenWhereInput>>;
  OR?: Maybe<Array<TokenWhereInput>>;
  NOT?: Maybe<Array<TokenWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  expiredAt?: Maybe<DateTimeNullableFilter>;
  userId?: Maybe<StringNullableFilter>;
  User?: Maybe<UserWhereInput>;
}

export interface TokenWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface TopicCreateInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['JSON']>;
  blogID?: Maybe<Scalars['ID']>;
  CodeChallenge?: Maybe<CodeChallengeCreateOneWithoutTopicInput>;
  uri?: Maybe<Scalars['String']>;
}

export interface TopicUpdateInput {
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['JSON']>;
  components?: Maybe<Scalars['JSON']>;
}

export interface TournamentCreateManyTournamentGroupInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  CreatedBy: Scalars['String'];
}

export interface TournamentCreateManyTournamentGroupInputEnvelope {
  data?: Maybe<Array<TournamentCreateManyTournamentGroupInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TournamentCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  Group?: Maybe<Scalars['String']>;
}

export interface TournamentCreateManyUserInputEnvelope {
  data?: Maybe<Array<TournamentCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TournamentCreateNestedManyWithoutTournamentGroupInput {
  create?: Maybe<Array<TournamentCreateWithoutTournamentGroupInput>>;
  connectOrCreate?: Maybe<Array<TournamentCreateOrConnectWithoutTournamentGroupInput>>;
  createMany?: Maybe<TournamentCreateManyTournamentGroupInputEnvelope>;
  connect?: Maybe<Array<TournamentWhereUniqueInput>>;
}

export interface TournamentCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<TournamentCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<TournamentCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<TournamentCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<TournamentWhereUniqueInput>>;
}

export interface TournamentCreateNestedOneWithoutTourneysInput {
  create?: Maybe<TournamentCreateWithoutTourneysInput>;
  connectOrCreate?: Maybe<TournamentCreateOrConnectWithoutTourneysInput>;
  connect?: Maybe<TournamentWhereUniqueInput>;
}

export interface TournamentCreateOrConnectWithoutTournamentGroupInput {
  where: TournamentWhereUniqueInput;
  create: TournamentCreateWithoutTournamentGroupInput;
}

export interface TournamentCreateOrConnectWithoutTourneysInput {
  where: TournamentWhereUniqueInput;
  create: TournamentCreateWithoutTourneysInput;
}

export interface TournamentCreateOrConnectWithoutUserInput {
  where: TournamentWhereUniqueInput;
  create: TournamentCreateWithoutUserInput;
}

export interface TournamentCreateWithoutTournamentGroupInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  User: UserCreateNestedOneWithoutTournamentsInput;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutTournamentTournamentToTourneyInput>;
}

export interface TournamentCreateWithoutTourneysInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  User: UserCreateNestedOneWithoutTournamentsInput;
  TournamentGroup?: Maybe<TournamentGroupCreateNestedOneWithoutTournamentsInput>;
}

export interface TournamentCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  TournamentGroup?: Maybe<TournamentGroupCreateNestedOneWithoutTournamentsInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutTournamentTournamentToTourneyInput>;
}

export interface TournamentGroupCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
}

export interface TournamentGroupCreateManyUserInputEnvelope {
  data?: Maybe<Array<TournamentGroupCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TournamentGroupCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<TournamentGroupCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<TournamentGroupCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<TournamentGroupCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<TournamentGroupWhereUniqueInput>>;
}

export interface TournamentGroupCreateNestedOneWithoutTournamentsInput {
  create?: Maybe<TournamentGroupCreateWithoutTournamentsInput>;
  connectOrCreate?: Maybe<TournamentGroupCreateOrConnectWithoutTournamentsInput>;
  connect?: Maybe<TournamentGroupWhereUniqueInput>;
}

export interface TournamentGroupCreateOrConnectWithoutTournamentsInput {
  where: TournamentGroupWhereUniqueInput;
  create: TournamentGroupCreateWithoutTournamentsInput;
}

export interface TournamentGroupCreateOrConnectWithoutUserInput {
  where: TournamentGroupWhereUniqueInput;
  create: TournamentGroupCreateWithoutUserInput;
}

export interface TournamentGroupCreateWithoutTournamentsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  User: UserCreateNestedOneWithoutTournamentGroupsInput;
}

export interface TournamentGroupCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutTournamentGroupInput>;
}

export interface TournamentGroupListRelationFilter {
  every?: Maybe<TournamentGroupWhereInput>;
  some?: Maybe<TournamentGroupWhereInput>;
  none?: Maybe<TournamentGroupWhereInput>;
}

export interface TournamentGroupOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface TournamentGroupWhereInput {
  AND?: Maybe<Array<TournamentGroupWhereInput>>;
  OR?: Maybe<Array<TournamentGroupWhereInput>>;
  NOT?: Maybe<Array<TournamentGroupWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  name?: Maybe<StringNullableFilter>;
  code?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringFilter>;
  User?: Maybe<UserWhereInput>;
  Tournaments?: Maybe<TournamentListRelationFilter>;
}

export interface TournamentGroupWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
}

export interface TournamentListRelationFilter {
  every?: Maybe<TournamentWhereInput>;
  some?: Maybe<TournamentWhereInput>;
  none?: Maybe<TournamentWhereInput>;
}

export interface TournamentOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface TournamentWhereInput {
  AND?: Maybe<Array<TournamentWhereInput>>;
  OR?: Maybe<Array<TournamentWhereInput>>;
  NOT?: Maybe<Array<TournamentWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  name?: Maybe<StringNullableFilter>;
  code?: Maybe<StringNullableFilter>;
  CreatedBy?: Maybe<StringFilter>;
  User?: Maybe<UserWhereInput>;
  Group?: Maybe<StringNullableFilter>;
  TournamentGroup?: Maybe<TournamentGroupWhereInput>;
  Tourneys?: Maybe<TourneyListRelationFilter>;
}

export interface TournamentWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
}

export interface TourneyCreateManyTournamentTournamentToTourneyInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  CreatedBy: Scalars['String'];
}

export interface TourneyCreateManyTournamentTournamentToTourneyInputEnvelope {
  data?: Maybe<Array<TourneyCreateManyTournamentTournamentToTourneyInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TourneyCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  Tournament?: Maybe<Scalars['String']>;
}

export interface TourneyCreateManyUserInputEnvelope {
  data?: Maybe<Array<TourneyCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TourneyCreateNestedManyWithoutTournamentTournamentToTourneyInput {
  create?: Maybe<Array<TourneyCreateWithoutTournamentTournamentToTourneyInput>>;
  connectOrCreate?: Maybe<Array<TourneyCreateOrConnectWithoutTournamentTournamentToTourneyInput>>;
  createMany?: Maybe<TourneyCreateManyTournamentTournamentToTourneyInputEnvelope>;
  connect?: Maybe<Array<TourneyWhereUniqueInput>>;
}

export interface TourneyCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<TourneyCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<TourneyCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<TourneyCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<TourneyWhereUniqueInput>>;
}

export interface TourneyCreateNestedOneWithoutGamesInput {
  create?: Maybe<TourneyCreateWithoutGamesInput>;
  connectOrCreate?: Maybe<TourneyCreateOrConnectWithoutGamesInput>;
  connect?: Maybe<TourneyWhereUniqueInput>;
}

export interface TourneyCreateNestedOneWithoutTourneyPlayersInput {
  create?: Maybe<TourneyCreateWithoutTourneyPlayersInput>;
  connectOrCreate?: Maybe<TourneyCreateOrConnectWithoutTourneyPlayersInput>;
  connect?: Maybe<TourneyWhereUniqueInput>;
}

export interface TourneyCreateOrConnectWithoutGamesInput {
  where: TourneyWhereUniqueInput;
  create: TourneyCreateWithoutGamesInput;
}

export interface TourneyCreateOrConnectWithoutTournamentTournamentToTourneyInput {
  where: TourneyWhereUniqueInput;
  create: TourneyCreateWithoutTournamentTournamentToTourneyInput;
}

export interface TourneyCreateOrConnectWithoutTourneyPlayersInput {
  where: TourneyWhereUniqueInput;
  create: TourneyCreateWithoutTourneyPlayersInput;
}

export interface TourneyCreateOrConnectWithoutUserInput {
  where: TourneyWhereUniqueInput;
  create: TourneyCreateWithoutUserInput;
}

export interface TourneyCreateWithoutGamesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  User: UserCreateNestedOneWithoutTourneysInput;
  Tournament_TournamentToTourney?: Maybe<TournamentCreateNestedOneWithoutTourneysInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutTourneyTourneyToTourneyPlayerInput>;
}

export interface TourneyCreateWithoutTournamentTournamentToTourneyInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  User: UserCreateNestedOneWithoutTourneysInput;
  Games?: Maybe<GameCreateNestedManyWithoutTourneyGameToTourneyInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutTourneyTourneyToTourneyPlayerInput>;
}

export interface TourneyCreateWithoutTourneyPlayersInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  User: UserCreateNestedOneWithoutTourneysInput;
  Tournament_TournamentToTourney?: Maybe<TournamentCreateNestedOneWithoutTourneysInput>;
  Games?: Maybe<GameCreateNestedManyWithoutTourneyGameToTourneyInput>;
}

export interface TourneyCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  Tournament_TournamentToTourney?: Maybe<TournamentCreateNestedOneWithoutTourneysInput>;
  Games?: Maybe<GameCreateNestedManyWithoutTourneyGameToTourneyInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutTourneyTourneyToTourneyPlayerInput>;
}

export interface TourneyListRelationFilter {
  every?: Maybe<TourneyWhereInput>;
  some?: Maybe<TourneyWhereInput>;
  none?: Maybe<TourneyWhereInput>;
}

export interface TourneyOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface TourneyPlayerCreateManyTourneyTourneyToTourneyPlayerInput {
  id?: Maybe<Scalars['String']>;
  User?: Maybe<Scalars['String']>;
}

export interface TourneyPlayerCreateManyTourneyTourneyToTourneyPlayerInputEnvelope {
  data?: Maybe<Array<TourneyPlayerCreateManyTourneyTourneyToTourneyPlayerInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TourneyPlayerCreateManyUserTourneyPlayerToUserInput {
  id?: Maybe<Scalars['String']>;
  Tourney?: Maybe<Scalars['String']>;
}

export interface TourneyPlayerCreateManyUserTourneyPlayerToUserInputEnvelope {
  data?: Maybe<Array<TourneyPlayerCreateManyUserTourneyPlayerToUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface TourneyPlayerCreateNestedManyWithoutTourneyTourneyToTourneyPlayerInput {
  create?: Maybe<Array<TourneyPlayerCreateWithoutTourneyTourneyToTourneyPlayerInput>>;
  connectOrCreate?: Maybe<Array<TourneyPlayerCreateOrConnectWithoutTourneyTourneyToTourneyPlayerInput>>;
  createMany?: Maybe<TourneyPlayerCreateManyTourneyTourneyToTourneyPlayerInputEnvelope>;
  connect?: Maybe<Array<TourneyPlayerWhereUniqueInput>>;
}

export interface TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput {
  create?: Maybe<Array<TourneyPlayerCreateWithoutUserTourneyPlayerToUserInput>>;
  connectOrCreate?: Maybe<Array<TourneyPlayerCreateOrConnectWithoutUserTourneyPlayerToUserInput>>;
  createMany?: Maybe<TourneyPlayerCreateManyUserTourneyPlayerToUserInputEnvelope>;
  connect?: Maybe<Array<TourneyPlayerWhereUniqueInput>>;
}

export interface TourneyPlayerCreateOrConnectWithoutTourneyTourneyToTourneyPlayerInput {
  where: TourneyPlayerWhereUniqueInput;
  create: TourneyPlayerCreateWithoutTourneyTourneyToTourneyPlayerInput;
}

export interface TourneyPlayerCreateOrConnectWithoutUserTourneyPlayerToUserInput {
  where: TourneyPlayerWhereUniqueInput;
  create: TourneyPlayerCreateWithoutUserTourneyPlayerToUserInput;
}

export interface TourneyPlayerCreateWithoutTourneyTourneyToTourneyPlayerInput {
  id?: Maybe<Scalars['String']>;
  User_TourneyPlayerToUser?: Maybe<UserCreateNestedOneWithoutTourneyPlayersInput>;
}

export interface TourneyPlayerCreateWithoutUserTourneyPlayerToUserInput {
  id?: Maybe<Scalars['String']>;
  Tourney_TourneyToTourneyPlayer?: Maybe<TourneyCreateNestedOneWithoutTourneyPlayersInput>;
}

export interface TourneyPlayerListRelationFilter {
  every?: Maybe<TourneyPlayerWhereInput>;
  some?: Maybe<TourneyPlayerWhereInput>;
  none?: Maybe<TourneyPlayerWhereInput>;
}

export interface TourneyPlayerOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface TourneyPlayerWhereInput {
  AND?: Maybe<Array<TourneyPlayerWhereInput>>;
  OR?: Maybe<Array<TourneyPlayerWhereInput>>;
  NOT?: Maybe<Array<TourneyPlayerWhereInput>>;
  id?: Maybe<StringFilter>;
  User?: Maybe<StringNullableFilter>;
  Tourney?: Maybe<StringNullableFilter>;
  Tourney_TourneyToTourneyPlayer?: Maybe<TourneyWhereInput>;
  User_TourneyPlayerToUser?: Maybe<UserWhereInput>;
}

export interface TourneyPlayerWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface TourneyWhereInput {
  AND?: Maybe<Array<TourneyWhereInput>>;
  OR?: Maybe<Array<TourneyWhereInput>>;
  NOT?: Maybe<Array<TourneyWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  name?: Maybe<StringNullableFilter>;
  code?: Maybe<StringNullableFilter>;
  date?: Maybe<DateTimeNullableFilter>;
  date_till?: Maybe<DateTimeNullableFilter>;
  CreatedBy?: Maybe<StringFilter>;
  User?: Maybe<UserWhereInput>;
  Tournament?: Maybe<StringNullableFilter>;
  Tournament_TournamentToTourney?: Maybe<TournamentWhereInput>;
  Games?: Maybe<GameListRelationFilter>;
  TourneyPlayers?: Maybe<TourneyPlayerListRelationFilter>;
}

export interface TourneyWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
}


/** Пользователь */
export interface User {
  __typename?: 'User';
  id: Scalars['String'];
  /** Когда создан */
  createdAt: Scalars['DateTime'];
  /** Когда обновлен */
  updatedAt: Scalars['DateTime'];
  email?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  sudo?: Maybe<Scalars['Boolean']>;
  /** Показывать емейл другим пользователям */
  showEmail?: Maybe<Scalars['Boolean']>;
  /** Показывать ФИО другим пользователям */
  showFullname: Scalars['Boolean'];
  /** Avatar */
  image?: Maybe<Scalars['String']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  /** Активирован ли пользователь */
  active?: Maybe<Scalars['Boolean']>;
  /** Заблокирован ли пользователь */
  blocked: Scalars['Boolean'];
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hasEmail?: Maybe<Scalars['Boolean']>;
  hasPhone?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  /** Готов быть ментором */
  isMentor?: Maybe<Scalars['Boolean']>;
  about?: Maybe<Scalars['EditorComponentObject']>;
  /** Аккаунт в телеграм */
  telegram?: Maybe<Scalars['String']>;
  technologyLevel?: Maybe<Scalars['UserTechnologyLevel']>;
  CodeChallengeCompletions?: Maybe<Array<CodeChallengeCompletion>>;
  EthAccounts?: Maybe<Array<EthAccount>>;
  Timers?: Maybe<Array<Timer>>;
  NotificationTypes?: Maybe<Array<NotificationType>>;
  UserTechnologies?: Maybe<Array<UserTechnology>>;
  /** Проекты, созданные пользователем */
  ProjectsCreated?: Maybe<Array<Project>>;
  /** Проекты, в которых участвует пользователь */
  Projects?: Maybe<Array<ProjectMember>>;
  /** Список менторов пользователя */
  MentorMenteeMentors?: Maybe<Array<MentorMentee>>;
  /** Список менти пользователя */
  MentorMenteeMentees?: Maybe<Array<MentorMentee>>;
}


/** Пользователь */
export type UserTimersArgs = {
  first?: Maybe<Scalars['Int']>;
  where?: Maybe<TimerWhereInput>;
};


/** Пользователь */
export type UserProjectsCreatedArgs = {
  take?: Maybe<Scalars['Int']>;
  where?: Maybe<ProjectWhereInput>;
};

export interface UserCreateManyEthAccountEthAccountToUserEthAccountAuthedInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
}

export interface UserCreateManyEthAccountEthAccountToUserEthAccountAuthedInputEnvelope {
  data?: Maybe<Array<UserCreateManyEthAccountEthAccountToUserEthAccountAuthedInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface UserCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  EthAccountAuthed?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
}

export interface UserCreateManyUserInputEnvelope {
  data?: Maybe<Array<UserCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface UserCreateNestedManyWithoutChatRoomsChatRoomsMembersInput {
  create?: Maybe<Array<UserCreateWithoutChatRoomsChatRoomsMembersInput>>;
  connectOrCreate?: Maybe<Array<UserCreateOrConnectWithoutChatRoomsChatRoomsMembersInput>>;
  connect?: Maybe<Array<UserWhereUniqueInput>>;
}

export interface UserCreateNestedManyWithoutEthAccountEthAccountToUserEthAccountAuthedInput {
  create?: Maybe<Array<UserCreateWithoutEthAccountEthAccountToUserEthAccountAuthedInput>>;
  connectOrCreate?: Maybe<Array<UserCreateOrConnectWithoutEthAccountEthAccountToUserEthAccountAuthedInput>>;
  createMany?: Maybe<UserCreateManyEthAccountEthAccountToUserEthAccountAuthedInputEnvelope>;
  connect?: Maybe<Array<UserWhereUniqueInput>>;
}

export interface UserCreateNestedManyWithoutGamesGameUsersInput {
  create?: Maybe<Array<UserCreateWithoutGamesGameUsersInput>>;
  connectOrCreate?: Maybe<Array<UserCreateOrConnectWithoutGamesGameUsersInput>>;
  connect?: Maybe<Array<UserWhereUniqueInput>>;
}

export interface UserCreateNestedManyWithoutNotificationTypesUserNotificationTypesInput {
  create?: Maybe<Array<UserCreateWithoutNotificationTypesUserNotificationTypesInput>>;
  connectOrCreate?: Maybe<Array<UserCreateOrConnectWithoutNotificationTypesUserNotificationTypesInput>>;
  connect?: Maybe<Array<UserWhereUniqueInput>>;
}

export interface UserCreateNestedManyWithoutPositionsPositionUsersInput {
  create?: Maybe<Array<UserCreateWithoutPositionsPositionUsersInput>>;
  connectOrCreate?: Maybe<Array<UserCreateOrConnectWithoutPositionsPositionUsersInput>>;
  connect?: Maybe<Array<UserWhereUniqueInput>>;
}

export interface UserCreateNestedManyWithoutProjectsPrismaProjectUsersInput {
  create?: Maybe<Array<UserCreateWithoutProjectsPrismaProjectUsersInput>>;
  connectOrCreate?: Maybe<Array<UserCreateOrConnectWithoutProjectsPrismaProjectUsersInput>>;
  connect?: Maybe<Array<UserWhereUniqueInput>>;
}

export interface UserCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<UserCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<UserCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<UserCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<UserWhereUniqueInput>>;
}

export interface UserCreateNestedOneWithoutCallRequestsCallRequestCalledToUserInput {
  create?: Maybe<UserCreateWithoutCallRequestsCallRequestCalledToUserInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutCallRequestsCallRequestCalledToUserInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutCallRequestsCallRequestCallerToUserInput {
  create?: Maybe<UserCreateWithoutCallRequestsCallRequestCallerToUserInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutCallRequestsCallRequestCallerToUserInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutChatMessagesInput {
  create?: Maybe<UserCreateWithoutChatMessagesInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutChatMessagesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutChatMessagesReadedInput {
  create?: Maybe<UserCreateWithoutChatMessagesReadedInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutChatMessagesReadedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutChatRoomInvitationsChatRoomInvitationCreatedByToUserInput {
  create?: Maybe<UserCreateWithoutChatRoomInvitationsChatRoomInvitationCreatedByToUserInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutChatRoomInvitationsChatRoomInvitationCreatedByToUserInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutChatRoomInvitationsChatRoomInvitationUserToUserInput {
  create?: Maybe<UserCreateWithoutChatRoomInvitationsChatRoomInvitationUserToUserInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutChatRoomInvitationsChatRoomInvitationUserToUserInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutChatRoomsChatRoomToUserInput {
  create?: Maybe<UserCreateWithoutChatRoomsChatRoomToUserInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutChatRoomsChatRoomToUserInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutCodeChallengeBlocksInput {
  create?: Maybe<UserCreateWithoutCodeChallengeBlocksInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutCodeChallengeBlocksInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutCodeChallengeCompletionsInput {
  create?: Maybe<UserCreateWithoutCodeChallengeCompletionsInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutCodeChallengeCompletionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutCodeChallengesInput {
  create?: Maybe<UserCreateWithoutCodeChallengesInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutCodeChallengesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutDonatesInput {
  create?: Maybe<UserCreateWithoutDonatesInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutDonatesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutEthAccountsEthAccountCreatedByToUserInput {
  create?: Maybe<UserCreateWithoutEthAccountsEthAccountCreatedByToUserInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutEthAccountsEthAccountCreatedByToUserInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutEthContractSourcesInput {
  create?: Maybe<UserCreateWithoutEthContractSourcesInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutEthContractSourcesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutFilesInput {
  create?: Maybe<UserCreateWithoutFilesInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutFilesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutGalleriesInput {
  create?: Maybe<UserCreateWithoutGalleriesInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutGalleriesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutGameResultsGameResultCreatedByToUserInput {
  create?: Maybe<UserCreateWithoutGameResultsGameResultCreatedByToUserInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutGameResultsGameResultCreatedByToUserInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutGameResultsGameResultUserToUserInput {
  create?: Maybe<UserCreateWithoutGameResultsGameResultUserToUserInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutGameResultsGameResultUserToUserInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutGamesGameToUserInput {
  create?: Maybe<UserCreateWithoutGamesGameToUserInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutGamesGameToUserInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutLearnStrategiesInput {
  create?: Maybe<UserCreateWithoutLearnStrategiesInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutLearnStrategiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutMentorMenteeMenteesInput {
  create?: Maybe<UserCreateWithoutMentorMenteeMenteesInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutMentorMenteeMenteesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutMentorMenteeMentorsInput {
  create?: Maybe<UserCreateWithoutMentorMenteeMentorsInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutMentorMenteeMentorsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutNoticesNoticeCreatedByToUserInput {
  create?: Maybe<UserCreateWithoutNoticesNoticeCreatedByToUserInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutNoticesNoticeCreatedByToUserInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutNoticesNoticeUserToUserInput {
  create?: Maybe<UserCreateWithoutNoticesNoticeUserToUserInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutNoticesNoticeUserToUserInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutNotificationTypesNotificationTypeToUserInput {
  create?: Maybe<UserCreateWithoutNotificationTypesNotificationTypeToUserInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutNotificationTypesNotificationTypeToUserInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutOtherUsersInput {
  create?: Maybe<UserCreateWithoutOtherUsersInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutOtherUsersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutPlayersInput {
  create?: Maybe<UserCreateWithoutPlayersInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutPlayersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutPositionsPositionToUserInput {
  create?: Maybe<UserCreateWithoutPositionsPositionToUserInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutPositionsPositionToUserInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutProjectMembersProjectMemberCreatedByToUserInput {
  create?: Maybe<UserCreateWithoutProjectMembersProjectMemberCreatedByToUserInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutProjectMembersProjectMemberCreatedByToUserInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutProjectMembersProjectMemberUserToUserInput {
  create?: Maybe<UserCreateWithoutProjectMembersProjectMemberUserToUserInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutProjectMembersProjectMemberUserToUserInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutProjectTasksInput {
  create?: Maybe<UserCreateWithoutProjectTasksInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutProjectTasksInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutProjectsProjectToUserInput {
  create?: Maybe<UserCreateWithoutProjectsProjectToUserInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutProjectsProjectToUserInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutResourceTagsInput {
  create?: Maybe<UserCreateWithoutResourceTagsInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutResourceTagsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutResourcesInput {
  create?: Maybe<UserCreateWithoutResourcesInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutResourcesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutRoutesInput {
  create?: Maybe<UserCreateWithoutRoutesInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutRoutesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutServiceCategoriesInput {
  create?: Maybe<UserCreateWithoutServiceCategoriesInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutServiceCategoriesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutServicesInput {
  create?: Maybe<UserCreateWithoutServicesInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutServicesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutSmsMessagesInput {
  create?: Maybe<UserCreateWithoutSmsMessagesInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutSmsMessagesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutSmsProvidersInput {
  create?: Maybe<UserCreateWithoutSmsProvidersInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutSmsProvidersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutTagsInput {
  create?: Maybe<UserCreateWithoutTagsInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutTagsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutTaskMembersTaskMemberCreatedByToUserInput {
  create?: Maybe<UserCreateWithoutTaskMembersTaskMemberCreatedByToUserInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutTaskMembersTaskMemberCreatedByToUserInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutTaskMembersTaskMemberUserToUserInput {
  create?: Maybe<UserCreateWithoutTaskMembersTaskMemberUserToUserInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutTaskMembersTaskMemberUserToUserInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutTaskReactionsInput {
  create?: Maybe<UserCreateWithoutTaskReactionsInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutTaskReactionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutTaskTechnologiesInput {
  create?: Maybe<UserCreateWithoutTaskTechnologiesInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutTaskTechnologiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutTasksInput {
  create?: Maybe<UserCreateWithoutTasksInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutTasksInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutTeamMembersTeamMemberCreatedByToUserInput {
  create?: Maybe<UserCreateWithoutTeamMembersTeamMemberCreatedByToUserInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutTeamMembersTeamMemberCreatedByToUserInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutTeamMembersTeamMemberUserToUserInput {
  create?: Maybe<UserCreateWithoutTeamMembersTeamMemberUserToUserInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutTeamMembersTeamMemberUserToUserInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutTeamsInput {
  create?: Maybe<UserCreateWithoutTeamsInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutTeamsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutTechnologiesInput {
  create?: Maybe<UserCreateWithoutTechnologiesInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutTechnologiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutTechnologyLessonUsersInput {
  create?: Maybe<UserCreateWithoutTechnologyLessonUsersInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutTechnologyLessonUsersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutTechnologyLessonsInput {
  create?: Maybe<UserCreateWithoutTechnologyLessonsInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutTechnologyLessonsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutTemplatesInput {
  create?: Maybe<UserCreateWithoutTemplatesInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutTemplatesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutTimersInput {
  create?: Maybe<UserCreateWithoutTimersInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutTimersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutTournamentGroupsInput {
  create?: Maybe<UserCreateWithoutTournamentGroupsInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutTournamentGroupsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutTournamentsInput {
  create?: Maybe<UserCreateWithoutTournamentsInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutTournamentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutTourneyPlayersInput {
  create?: Maybe<UserCreateWithoutTourneyPlayersInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutTourneyPlayersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutTourneysInput {
  create?: Maybe<UserCreateWithoutTourneysInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutTourneysInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutUserLearnStrategiesInput {
  create?: Maybe<UserCreateWithoutUserLearnStrategiesInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutUserLearnStrategiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutUserTechnologiesInput {
  create?: Maybe<UserCreateWithoutUserTechnologiesInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutUserTechnologiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutVotesInput {
  create?: Maybe<UserCreateWithoutVotesInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutVotesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateNestedOneWithoutWorldsInput {
  create?: Maybe<UserCreateWithoutWorldsInput>;
  connectOrCreate?: Maybe<UserCreateOrConnectWithoutWorldsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateOneInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateOrConnectWithoutCallRequestsCallRequestCalledToUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutCallRequestsCallRequestCalledToUserInput;
}

export interface UserCreateOrConnectWithoutCallRequestsCallRequestCallerToUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutCallRequestsCallRequestCallerToUserInput;
}

export interface UserCreateOrConnectWithoutChatMessagesInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutChatMessagesInput;
}

export interface UserCreateOrConnectWithoutChatMessagesReadedInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutChatMessagesReadedInput;
}

export interface UserCreateOrConnectWithoutChatRoomInvitationsChatRoomInvitationCreatedByToUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutChatRoomInvitationsChatRoomInvitationCreatedByToUserInput;
}

export interface UserCreateOrConnectWithoutChatRoomInvitationsChatRoomInvitationUserToUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutChatRoomInvitationsChatRoomInvitationUserToUserInput;
}

export interface UserCreateOrConnectWithoutChatRoomsChatRoomToUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutChatRoomsChatRoomToUserInput;
}

export interface UserCreateOrConnectWithoutChatRoomsChatRoomsMembersInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutChatRoomsChatRoomsMembersInput;
}

export interface UserCreateOrConnectWithoutCodeChallengeBlocksInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutCodeChallengeBlocksInput;
}

export interface UserCreateOrConnectWithoutCodeChallengeCompletionsInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutCodeChallengeCompletionsInput;
}

export interface UserCreateOrConnectWithoutCodeChallengesInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutCodeChallengesInput;
}

export interface UserCreateOrConnectWithoutCommentsInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutCommentsInput;
}

export interface UserCreateOrConnectWithoutDonatesInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutDonatesInput;
}

export interface UserCreateOrConnectWithoutEthAccountEthAccountToUserEthAccountAuthedInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutEthAccountEthAccountToUserEthAccountAuthedInput;
}

export interface UserCreateOrConnectWithoutEthAccountsEthAccountCreatedByToUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutEthAccountsEthAccountCreatedByToUserInput;
}

export interface UserCreateOrConnectWithoutEthContractSourcesInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutEthContractSourcesInput;
}

export interface UserCreateOrConnectWithoutFilesInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutFilesInput;
}

export interface UserCreateOrConnectWithoutGalleriesInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutGalleriesInput;
}

export interface UserCreateOrConnectWithoutGameResultsGameResultCreatedByToUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutGameResultsGameResultCreatedByToUserInput;
}

export interface UserCreateOrConnectWithoutGameResultsGameResultUserToUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutGameResultsGameResultUserToUserInput;
}

export interface UserCreateOrConnectWithoutGamesGameToUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutGamesGameToUserInput;
}

export interface UserCreateOrConnectWithoutGamesGameUsersInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutGamesGameUsersInput;
}

export interface UserCreateOrConnectWithoutLearnStrategiesInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutLearnStrategiesInput;
}

export interface UserCreateOrConnectWithoutMentorMenteeMenteesInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutMentorMenteeMenteesInput;
}

export interface UserCreateOrConnectWithoutMentorMenteeMentorsInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutMentorMenteeMentorsInput;
}

export interface UserCreateOrConnectWithoutNoticesNoticeCreatedByToUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutNoticesNoticeCreatedByToUserInput;
}

export interface UserCreateOrConnectWithoutNoticesNoticeUserToUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutNoticesNoticeUserToUserInput;
}

export interface UserCreateOrConnectWithoutNotificationTypesNotificationTypeToUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutNotificationTypesNotificationTypeToUserInput;
}

export interface UserCreateOrConnectWithoutNotificationTypesUserNotificationTypesInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutNotificationTypesUserNotificationTypesInput;
}

export interface UserCreateOrConnectWithoutOtherUsersInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutOtherUsersInput;
}

export interface UserCreateOrConnectWithoutPlayersInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutPlayersInput;
}

export interface UserCreateOrConnectWithoutPositionsPositionToUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutPositionsPositionToUserInput;
}

export interface UserCreateOrConnectWithoutPositionsPositionUsersInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutPositionsPositionUsersInput;
}

export interface UserCreateOrConnectWithoutProjectMembersProjectMemberCreatedByToUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutProjectMembersProjectMemberCreatedByToUserInput;
}

export interface UserCreateOrConnectWithoutProjectMembersProjectMemberUserToUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutProjectMembersProjectMemberUserToUserInput;
}

export interface UserCreateOrConnectWithoutProjectTasksInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutProjectTasksInput;
}

export interface UserCreateOrConnectWithoutProjectsPrismaProjectUsersInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutProjectsPrismaProjectUsersInput;
}

export interface UserCreateOrConnectWithoutProjectsProjectToUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutProjectsProjectToUserInput;
}

export interface UserCreateOrConnectWithoutResourceTagsInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutResourceTagsInput;
}

export interface UserCreateOrConnectWithoutResourcesInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutResourcesInput;
}

export interface UserCreateOrConnectWithoutRoutesInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutRoutesInput;
}

export interface UserCreateOrConnectWithoutServiceCategoriesInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutServiceCategoriesInput;
}

export interface UserCreateOrConnectWithoutServicesInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutServicesInput;
}

export interface UserCreateOrConnectWithoutSmsMessagesInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutSmsMessagesInput;
}

export interface UserCreateOrConnectWithoutSmsProvidersInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutSmsProvidersInput;
}

export interface UserCreateOrConnectWithoutTagsInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutTagsInput;
}

export interface UserCreateOrConnectWithoutTaskMembersTaskMemberCreatedByToUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutTaskMembersTaskMemberCreatedByToUserInput;
}

export interface UserCreateOrConnectWithoutTaskMembersTaskMemberUserToUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutTaskMembersTaskMemberUserToUserInput;
}

export interface UserCreateOrConnectWithoutTaskReactionsInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutTaskReactionsInput;
}

export interface UserCreateOrConnectWithoutTaskTechnologiesInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutTaskTechnologiesInput;
}

export interface UserCreateOrConnectWithoutTasksInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutTasksInput;
}

export interface UserCreateOrConnectWithoutTeamMembersTeamMemberCreatedByToUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutTeamMembersTeamMemberCreatedByToUserInput;
}

export interface UserCreateOrConnectWithoutTeamMembersTeamMemberUserToUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutTeamMembersTeamMemberUserToUserInput;
}

export interface UserCreateOrConnectWithoutTeamsInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutTeamsInput;
}

export interface UserCreateOrConnectWithoutTechnologiesInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutTechnologiesInput;
}

export interface UserCreateOrConnectWithoutTechnologyLessonUsersInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutTechnologyLessonUsersInput;
}

export interface UserCreateOrConnectWithoutTechnologyLessonsInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutTechnologyLessonsInput;
}

export interface UserCreateOrConnectWithoutTemplatesInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutTemplatesInput;
}

export interface UserCreateOrConnectWithoutTimersInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutTimersInput;
}

export interface UserCreateOrConnectWithoutTournamentGroupsInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutTournamentGroupsInput;
}

export interface UserCreateOrConnectWithoutTournamentsInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutTournamentsInput;
}

export interface UserCreateOrConnectWithoutTourneyPlayersInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutTourneyPlayersInput;
}

export interface UserCreateOrConnectWithoutTourneysInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutTourneysInput;
}

export interface UserCreateOrConnectWithoutUserInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutUserInput;
}

export interface UserCreateOrConnectWithoutUserLearnStrategiesInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutUserLearnStrategiesInput;
}

export interface UserCreateOrConnectWithoutUserTechnologiesInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutUserTechnologiesInput;
}

export interface UserCreateOrConnectWithoutVotesInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutVotesInput;
}

export interface UserCreateOrConnectWithoutWorldsInput {
  where: UserWhereUniqueInput;
  create: UserCreateWithoutWorldsInput;
}

export interface UserCreateWithoutCallRequestsCallRequestCalledToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutCallRequestsCallRequestCallerToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutChatMessagesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutChatMessagesReadedInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutChatRoomInvitationsChatRoomInvitationCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutChatRoomInvitationsChatRoomInvitationUserToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutChatRoomsChatRoomToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutChatRoomsChatRoomsMembersInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutCodeChallengeBlocksInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutCodeChallengeCompletionsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutCodeChallengesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutCommentsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutDonatesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
}

export interface UserCreateWithoutEthAccountEthAccountToUserEthAccountAuthedInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutEthAccountsEthAccountCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutEthContractSourcesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutFilesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutGalleriesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutGameResultsGameResultCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutGameResultsGameResultUserToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutGamesGameToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutGamesGameUsersInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutLearnStrategiesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutMentorMenteeMenteesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutMentorMenteeMentorsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutNoticesNoticeCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutNoticesNoticeUserToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutNotificationTypesNotificationTypeToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutNotificationTypesUserNotificationTypesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutOtherUsersInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutPlayersInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutPositionsPositionToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutPositionsPositionUsersInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutProjectMembersProjectMemberCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutProjectMembersProjectMemberUserToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutProjectTasksInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutProjectsPrismaProjectUsersInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutProjectsProjectToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutResourceTagsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutResourcesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutRoutesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutServiceCategoriesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutServicesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutSmsMessagesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutSmsProvidersInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutTagsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutTaskMembersTaskMemberCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutTaskMembersTaskMemberUserToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutTaskReactionsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutTaskTechnologiesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutTasksInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutTeamMembersTeamMemberCreatedByToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutTeamMembersTeamMemberUserToUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutTeamsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutTechnologiesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutTechnologyLessonUsersInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutTechnologyLessonsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutTemplatesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutTimersInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutTournamentGroupsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutTournamentsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutTourneyPlayersInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutTourneysInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutUserLearnStrategiesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutUserTechnologiesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutVotesInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Worlds?: Maybe<WorldCreateNestedManyWithoutUserInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserCreateWithoutWorldsInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  showFullname?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  blocked?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  isMentor?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['Int']>;
  User?: Maybe<UserCreateNestedOneWithoutOtherUsersInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountCreateNestedOneWithoutUserEthAccountToUserEthAccountAuthedInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCalledToUserInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestCreateNestedManyWithoutUserCallRequestCallerToUserInput>;
  Careers?: Maybe<CareerCreateNestedManyWithoutUserInput>;
  ChatMessages?: Maybe<ChatMessageCreateNestedManyWithoutUserInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedCreateNestedManyWithoutUserChatMessageReadedToUserInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationCreatedByToUserInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationCreateNestedManyWithoutUserChatRoomInvitationUserToUserInput>;
  CodeChallenges?: Maybe<CodeChallengeCreateNestedManyWithoutUserInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockCreateNestedManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateNestedManyWithoutUserInput>;
  Comments?: Maybe<CommentCreateNestedManyWithoutUserInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountCreateNestedManyWithoutUserEthAccountCreatedByToUserInput>;
  EthContractSources?: Maybe<EthContractSourceCreateNestedManyWithoutUserInput>;
  Files?: Maybe<FileCreateNestedManyWithoutUserInput>;
  Galleries?: Maybe<GalleryCreateNestedManyWithoutUserInput>;
  Games_GameToUser?: Maybe<GameCreateNestedManyWithoutUserGameToUserInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultCreatedByToUserInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultCreateNestedManyWithoutUserGameResultUserToUserInput>;
  Imports?: Maybe<ImportCreateNestedManyWithoutUserInput>;
  Letters?: Maybe<LetterCreateNestedManyWithoutUserLetterToUserInput>;
  LogedIns?: Maybe<LogedInCreateNestedManyWithoutUserLogedInToUserInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeCreatedByToUserInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeCreateNestedManyWithoutUserNoticeUserToUserInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeCreateNestedManyWithoutUserNotificationTypeToUserInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutUserInput>;
  Positions_PositionToUser?: Maybe<PositionCreateNestedManyWithoutUserPositionToUserInput>;
  Projects_ProjectToUser?: Maybe<ProjectCreateNestedManyWithoutUserProjectToUserInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberCreatedByToUserInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberCreateNestedManyWithoutUserProjectMemberUserToUserInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateNestedManyWithoutUserInput>;
  ResetPasswords?: Maybe<ResetPasswordCreateNestedManyWithoutUserResetPasswordToUserInput>;
  Resources?: Maybe<ResourceCreateNestedManyWithoutUserInput>;
  ResourceTags?: Maybe<ResourceTagCreateNestedManyWithoutUserInput>;
  Routes?: Maybe<RouteCreateNestedManyWithoutUserInput>;
  Services?: Maybe<ServiceCreateNestedManyWithoutUserInput>;
  ServiceCategories?: Maybe<ServiceCategoryCreateNestedManyWithoutUserInput>;
  Settings?: Maybe<SettingsCreateNestedManyWithoutUserSettingsToUserInput>;
  SmsMessages?: Maybe<SmsMessageCreateNestedManyWithoutUserInput>;
  SmsProviders?: Maybe<SmsProviderCreateNestedManyWithoutUserInput>;
  Tags?: Maybe<TagCreateNestedManyWithoutUserInput>;
  Tasks?: Maybe<TaskCreateNestedManyWithoutUserInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberCreatedByToUserInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberCreateNestedManyWithoutUserTaskMemberUserToUserInput>;
  TaskReactions?: Maybe<TaskReactionCreateNestedManyWithoutUserInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateNestedManyWithoutUserInput>;
  Teams?: Maybe<TeamCreateNestedManyWithoutUserInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberCreatedByToUserInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberCreateNestedManyWithoutUserTeamMemberUserToUserInput>;
  Technologies?: Maybe<TechnologyCreateNestedManyWithoutUserInput>;
  TechnologyLessons?: Maybe<TechnologyLessonCreateNestedManyWithoutUserInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserCreateNestedManyWithoutUserInput>;
  Templates?: Maybe<TemplateCreateNestedManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateNestedManyWithoutUserInput>;
  Tournaments?: Maybe<TournamentCreateNestedManyWithoutUserInput>;
  TournamentGroups?: Maybe<TournamentGroupCreateNestedManyWithoutUserInput>;
  Tourneys?: Maybe<TourneyCreateNestedManyWithoutUserInput>;
  TourneyPlayers?: Maybe<TourneyPlayerCreateNestedManyWithoutUserTourneyPlayerToUserInput>;
  other_Users?: Maybe<UserCreateNestedManyWithoutUserInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateNestedManyWithoutUserInput>;
  Votes?: Maybe<VoteCreateNestedManyWithoutUserUserToVoteInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomCreateNestedManyWithoutUserChatRoomsMembersInput>;
  Games_GameUsers?: Maybe<GameCreateNestedManyWithoutUserGameUsersInput>;
  Positions_PositionUsers?: Maybe<PositionCreateNestedManyWithoutUserPositionUsersInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectCreateNestedManyWithoutUserPrismaProjectUsersInput>;
  UserGroups?: Maybe<UserGroupCreateNestedManyWithoutUsersInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeCreateNestedManyWithoutUserUserNotificationTypesInput>;
  Tokens?: Maybe<TokenCreateNestedManyWithoutUserInput>;
  LearnStrategies?: Maybe<LearnStrategyCreateNestedManyWithoutCreatedByInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyCreateNestedManyWithoutCreatedByInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeCreateNestedManyWithoutMentorInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeCreateNestedManyWithoutMenteeInput>;
  about?: Maybe<NullableJsonNullValueInput>;
  telegram?: Maybe<Scalars['String']>;
  Donates?: Maybe<DonateCreateNestedManyWithoutDonatorInput>;
}

export interface UserGroupCreateNestedManyWithoutUsersInput {
  create?: Maybe<Array<UserGroupCreateWithoutUsersInput>>;
  connectOrCreate?: Maybe<Array<UserGroupCreateOrConnectWithoutUsersInput>>;
  connect?: Maybe<Array<UserGroupWhereUniqueInput>>;
}

export interface UserGroupCreateOrConnectWithoutUsersInput {
  where: UserGroupWhereUniqueInput;
  create: UserGroupCreateWithoutUsersInput;
}

export interface UserGroupCreateWithoutUsersInput {
  id?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
}

export interface UserGroupListRelationFilter {
  every?: Maybe<UserGroupWhereInput>;
  some?: Maybe<UserGroupWhereInput>;
  none?: Maybe<UserGroupWhereInput>;
}

export interface UserGroupOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface UserGroupWhereInput {
  AND?: Maybe<Array<UserGroupWhereInput>>;
  OR?: Maybe<Array<UserGroupWhereInput>>;
  NOT?: Maybe<Array<UserGroupWhereInput>>;
  id?: Maybe<StringFilter>;
  name?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  Users?: Maybe<UserListRelationFilter>;
}

export interface UserGroupWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface UserLearnStrategy {
  __typename?: 'UserLearnStrategy';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  createdById?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<User>;
  learnStrategyId?: Maybe<Scalars['String']>;
  LearnStrategy?: Maybe<LearnStrategy>;
}

export interface UserLearnStrategyCreateInput {
  LearnStrategy: LearnStrategyWhereUniqueInput;
}

export interface UserLearnStrategyCreateManyCreatedByInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  learnStrategyId: Scalars['String'];
}

export interface UserLearnStrategyCreateManyCreatedByInputEnvelope {
  data?: Maybe<Array<UserLearnStrategyCreateManyCreatedByInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface UserLearnStrategyCreateManyLearnStrategyInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  createdById: Scalars['String'];
}

export interface UserLearnStrategyCreateManyLearnStrategyInputEnvelope {
  data?: Maybe<Array<UserLearnStrategyCreateManyLearnStrategyInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface UserLearnStrategyCreateNestedManyWithoutCreatedByInput {
  create?: Maybe<Array<UserLearnStrategyCreateWithoutCreatedByInput>>;
  connectOrCreate?: Maybe<Array<UserLearnStrategyCreateOrConnectWithoutCreatedByInput>>;
  createMany?: Maybe<UserLearnStrategyCreateManyCreatedByInputEnvelope>;
  connect?: Maybe<Array<UserLearnStrategyWhereUniqueInput>>;
}

export interface UserLearnStrategyCreateNestedManyWithoutLearnStrategyInput {
  create?: Maybe<Array<UserLearnStrategyCreateWithoutLearnStrategyInput>>;
  connectOrCreate?: Maybe<Array<UserLearnStrategyCreateOrConnectWithoutLearnStrategyInput>>;
  createMany?: Maybe<UserLearnStrategyCreateManyLearnStrategyInputEnvelope>;
  connect?: Maybe<Array<UserLearnStrategyWhereUniqueInput>>;
}

export interface UserLearnStrategyCreateOrConnectWithoutCreatedByInput {
  where: UserLearnStrategyWhereUniqueInput;
  create: UserLearnStrategyCreateWithoutCreatedByInput;
}

export interface UserLearnStrategyCreateOrConnectWithoutLearnStrategyInput {
  where: UserLearnStrategyWhereUniqueInput;
  create: UserLearnStrategyCreateWithoutLearnStrategyInput;
}

export interface UserLearnStrategyCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  LearnStrategy: LearnStrategyCreateNestedOneWithoutUserLearnStrategiesInput;
}

export interface UserLearnStrategyCreateWithoutLearnStrategyInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  CreatedBy: UserCreateNestedOneWithoutUserLearnStrategiesInput;
}

export interface UserLearnStrategyCreatedByIdLearnStrategyIdCompoundUniqueInput {
  createdById: Scalars['String'];
  learnStrategyId: Scalars['String'];
}

export interface UserLearnStrategyListRelationFilter {
  every?: Maybe<UserLearnStrategyWhereInput>;
  some?: Maybe<UserLearnStrategyWhereInput>;
  none?: Maybe<UserLearnStrategyWhereInput>;
}

export interface UserLearnStrategyOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface UserLearnStrategyOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  createdById?: Maybe<SortOrder>;
  CreatedBy?: Maybe<UserOrderByWithRelationInput>;
  learnStrategyId?: Maybe<SortOrder>;
  LearnStrategy?: Maybe<LearnStrategyOrderByWithRelationInput>;
}

export interface UserLearnStrategyWhereInput {
  AND?: Maybe<Array<UserLearnStrategyWhereInput>>;
  OR?: Maybe<Array<UserLearnStrategyWhereInput>>;
  NOT?: Maybe<Array<UserLearnStrategyWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  createdById?: Maybe<StringFilter>;
  CreatedBy?: Maybe<UserWhereInput>;
  learnStrategyId?: Maybe<StringFilter>;
  LearnStrategy?: Maybe<LearnStrategyWhereInput>;
}

export interface UserLearnStrategyWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  createdById_learnStrategyId?: Maybe<UserLearnStrategyCreatedByIdLearnStrategyIdCompoundUniqueInput>;
}

export interface UserListRelationFilter {
  every?: Maybe<UserWhereInput>;
  some?: Maybe<UserWhereInput>;
  none?: Maybe<UserWhereInput>;
}

export interface UserOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface UserOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  username?: Maybe<SortOrder>;
  email?: Maybe<SortOrder>;
  phone?: Maybe<SortOrder>;
  showEmail?: Maybe<SortOrder>;
  showPhone?: Maybe<SortOrder>;
  showFullname?: Maybe<SortOrder>;
  password?: Maybe<SortOrder>;
  fullname?: Maybe<SortOrder>;
  image?: Maybe<SortOrder>;
  address?: Maybe<SortOrder>;
  active?: Maybe<SortOrder>;
  blocked?: Maybe<SortOrder>;
  activated?: Maybe<SortOrder>;
  deleted?: Maybe<SortOrder>;
  hidden?: Maybe<SortOrder>;
  sudo?: Maybe<SortOrder>;
  marketplaceToken?: Maybe<SortOrder>;
  oldID?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  EthAccountAuthed?: Maybe<SortOrder>;
  acceptChatMessageAnonymous?: Maybe<SortOrder>;
  acceptNewChatRoomAnonymous?: Maybe<SortOrder>;
  acceptNewChatRoom?: Maybe<SortOrder>;
  isMentor?: Maybe<SortOrder>;
  technologyLevel?: Maybe<SortOrder>;
  User?: Maybe<UserOrderByWithRelationInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountOrderByWithRelationInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestOrderByRelationAggregateInput>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestOrderByRelationAggregateInput>;
  Careers?: Maybe<CareerOrderByRelationAggregateInput>;
  ChatMessages?: Maybe<ChatMessageOrderByRelationAggregateInput>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedOrderByRelationAggregateInput>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomOrderByRelationAggregateInput>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationOrderByRelationAggregateInput>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationOrderByRelationAggregateInput>;
  CodeChallenges?: Maybe<CodeChallengeOrderByRelationAggregateInput>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockOrderByRelationAggregateInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionOrderByRelationAggregateInput>;
  Comments?: Maybe<CommentOrderByRelationAggregateInput>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountOrderByRelationAggregateInput>;
  EthContractSources?: Maybe<EthContractSourceOrderByRelationAggregateInput>;
  Files?: Maybe<FileOrderByRelationAggregateInput>;
  Galleries?: Maybe<GalleryOrderByRelationAggregateInput>;
  Games_GameToUser?: Maybe<GameOrderByRelationAggregateInput>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultOrderByRelationAggregateInput>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultOrderByRelationAggregateInput>;
  Imports?: Maybe<ImportOrderByRelationAggregateInput>;
  Letters?: Maybe<LetterOrderByRelationAggregateInput>;
  LogedIns?: Maybe<LogedInOrderByRelationAggregateInput>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeOrderByRelationAggregateInput>;
  Notices_Notice_UserToUser?: Maybe<NoticeOrderByRelationAggregateInput>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeOrderByRelationAggregateInput>;
  Players?: Maybe<PlayerOrderByRelationAggregateInput>;
  Positions_PositionToUser?: Maybe<PositionOrderByRelationAggregateInput>;
  Projects_ProjectToUser?: Maybe<ProjectOrderByRelationAggregateInput>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberOrderByRelationAggregateInput>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberOrderByRelationAggregateInput>;
  ProjectTasks?: Maybe<ProjectTaskOrderByRelationAggregateInput>;
  ResetPasswords?: Maybe<ResetPasswordOrderByRelationAggregateInput>;
  Resources?: Maybe<ResourceOrderByRelationAggregateInput>;
  ResourceTags?: Maybe<ResourceTagOrderByRelationAggregateInput>;
  Routes?: Maybe<RouteOrderByRelationAggregateInput>;
  Services?: Maybe<ServiceOrderByRelationAggregateInput>;
  ServiceCategories?: Maybe<ServiceCategoryOrderByRelationAggregateInput>;
  Settings?: Maybe<SettingsOrderByRelationAggregateInput>;
  SmsMessages?: Maybe<SmsMessageOrderByRelationAggregateInput>;
  SmsProviders?: Maybe<SmsProviderOrderByRelationAggregateInput>;
  Tags?: Maybe<TagOrderByRelationAggregateInput>;
  Tasks?: Maybe<TaskOrderByRelationAggregateInput>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberOrderByRelationAggregateInput>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberOrderByRelationAggregateInput>;
  TaskReactions?: Maybe<TaskReactionOrderByRelationAggregateInput>;
  TaskTechnologies?: Maybe<TaskTechnologyOrderByRelationAggregateInput>;
  Teams?: Maybe<TeamOrderByRelationAggregateInput>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberOrderByRelationAggregateInput>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberOrderByRelationAggregateInput>;
  Technologies?: Maybe<TechnologyOrderByRelationAggregateInput>;
  TechnologyLessons?: Maybe<TechnologyLessonOrderByRelationAggregateInput>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserOrderByRelationAggregateInput>;
  Templates?: Maybe<TemplateOrderByRelationAggregateInput>;
  Timers?: Maybe<TimerOrderByRelationAggregateInput>;
  Tournaments?: Maybe<TournamentOrderByRelationAggregateInput>;
  TournamentGroups?: Maybe<TournamentGroupOrderByRelationAggregateInput>;
  Tourneys?: Maybe<TourneyOrderByRelationAggregateInput>;
  TourneyPlayers?: Maybe<TourneyPlayerOrderByRelationAggregateInput>;
  other_Users?: Maybe<UserOrderByRelationAggregateInput>;
  UserTechnologies?: Maybe<UserTechnologyOrderByRelationAggregateInput>;
  Votes?: Maybe<VoteOrderByRelationAggregateInput>;
  Worlds?: Maybe<WorldOrderByRelationAggregateInput>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomOrderByRelationAggregateInput>;
  Games_GameUsers?: Maybe<GameOrderByRelationAggregateInput>;
  Positions_PositionUsers?: Maybe<PositionOrderByRelationAggregateInput>;
  Projects_PrismaProjectUsers?: Maybe<ProjectOrderByRelationAggregateInput>;
  UserGroups?: Maybe<UserGroupOrderByRelationAggregateInput>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeOrderByRelationAggregateInput>;
  Tokens?: Maybe<TokenOrderByRelationAggregateInput>;
  LearnStrategies?: Maybe<LearnStrategyOrderByRelationAggregateInput>;
  UserLearnStrategies?: Maybe<UserLearnStrategyOrderByRelationAggregateInput>;
  MentorMenteeMentors?: Maybe<MentorMenteeOrderByRelationAggregateInput>;
  MentorMenteeMentees?: Maybe<MentorMenteeOrderByRelationAggregateInput>;
  about?: Maybe<SortOrder>;
  telegram?: Maybe<SortOrder>;
  Donates?: Maybe<DonateOrderByRelationAggregateInput>;
}

export interface UserResponse {
  __typename?: 'UserResponse';
  success: Scalars['Boolean'];
  message: Scalars['String'];
  errors: Array<RequestError>;
  data?: Maybe<User>;
}

export interface UserSigninDataInput {
  password?: Maybe<Scalars['String']>;
}

export interface UserSignupDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  /** Показывать емейл другим пользователям */
  showEmail?: Scalars['Boolean'];
  /** Показывать ФИО другим пользователям */
  showFullname?: Scalars['Boolean'];
}

export interface UserTechnology {
  __typename?: 'UserTechnology';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  components?: Maybe<Scalars['JSON']>;
  date_from?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  status?: Maybe<UserTechnologyStatus>;
  hiring_status?: Maybe<UserTechnologyHiringStatus>;
  level?: Maybe<Scalars['UserTechnologyLevel']>;
  /** Готов быть ментором */
  isMentor?: Maybe<Scalars['Boolean']>;
  CreatedBy?: Maybe<User>;
  technologyId: Scalars['String'];
  Technology?: Maybe<Technology>;
}

export interface UserTechnologyCreateInput {
  Technology: TechnologyCreateOneWithoutUserTechnologiesInput;
}

export interface UserTechnologyCreateManyTechnologyTechnologyToUserTechnologyInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  date_from?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  status?: Maybe<UserTechnologyStatus>;
  hiring_status?: Maybe<UserTechnologyHiringStatus>;
  isMentor?: Maybe<Scalars['Boolean']>;
  CreatedBy: Scalars['String'];
  level?: Maybe<Scalars['Int']>;
}

export interface UserTechnologyCreateManyTechnologyTechnologyToUserTechnologyInputEnvelope {
  data?: Maybe<Array<UserTechnologyCreateManyTechnologyTechnologyToUserTechnologyInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface UserTechnologyCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  date_from?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  status?: Maybe<UserTechnologyStatus>;
  hiring_status?: Maybe<UserTechnologyHiringStatus>;
  isMentor?: Maybe<Scalars['Boolean']>;
  Technology: Scalars['String'];
  level?: Maybe<Scalars['Int']>;
}

export interface UserTechnologyCreateManyUserInputEnvelope {
  data?: Maybe<Array<UserTechnologyCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface UserTechnologyCreateNestedManyWithoutTechnologyTechnologyToUserTechnologyInput {
  create?: Maybe<Array<UserTechnologyCreateWithoutTechnologyTechnologyToUserTechnologyInput>>;
  connectOrCreate?: Maybe<Array<UserTechnologyCreateOrConnectWithoutTechnologyTechnologyToUserTechnologyInput>>;
  createMany?: Maybe<UserTechnologyCreateManyTechnologyTechnologyToUserTechnologyInputEnvelope>;
  connect?: Maybe<Array<UserTechnologyWhereUniqueInput>>;
}

export interface UserTechnologyCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<UserTechnologyCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<UserTechnologyCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<UserTechnologyCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<UserTechnologyWhereUniqueInput>>;
}

export interface UserTechnologyCreateOrConnectWithoutTechnologyTechnologyToUserTechnologyInput {
  where: UserTechnologyWhereUniqueInput;
  create: UserTechnologyCreateWithoutTechnologyTechnologyToUserTechnologyInput;
}

export interface UserTechnologyCreateOrConnectWithoutUserInput {
  where: UserTechnologyWhereUniqueInput;
  create: UserTechnologyCreateWithoutUserInput;
}

export interface UserTechnologyCreateWithoutTechnologyTechnologyToUserTechnologyInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  date_from?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  status?: Maybe<UserTechnologyStatus>;
  hiring_status?: Maybe<UserTechnologyHiringStatus>;
  isMentor?: Maybe<Scalars['Boolean']>;
  User: UserCreateNestedOneWithoutUserTechnologiesInput;
  level?: Maybe<Scalars['Int']>;
}

export interface UserTechnologyCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  components?: Maybe<NullableJsonNullValueInput>;
  date_from?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  status?: Maybe<UserTechnologyStatus>;
  hiring_status?: Maybe<UserTechnologyHiringStatus>;
  isMentor?: Maybe<Scalars['Boolean']>;
  Technology_TechnologyToUserTechnology: TechnologyCreateNestedOneWithoutUserTechnologiesInput;
  level?: Maybe<Scalars['Int']>;
}

export interface UserTechnologyCreatedByTechnologyCompoundUniqueInput {
  CreatedBy: Scalars['String'];
  Technology: Scalars['String'];
}

/** Готов ли принимать заказы с таким технологиями */
export enum UserTechnologyHiringStatus {
  /** Очень интересно */
  ACTIVE = 'Active',
  /** Малоинтересно */
  NEUTRAL = 'Neutral',
  /** Отрицательно */
  NEGATIVE = 'Negative'
}


export interface UserTechnologyListRelationFilter {
  every?: Maybe<UserTechnologyWhereInput>;
  some?: Maybe<UserTechnologyWhereInput>;
  none?: Maybe<UserTechnologyWhereInput>;
}

export interface UserTechnologyOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface UserTechnologyOrderByWithRelationInput {
  id?: Maybe<SortOrder>;
  createdAt?: Maybe<SortOrder>;
  updatedAt?: Maybe<SortOrder>;
  components?: Maybe<SortOrder>;
  date_from?: Maybe<SortOrder>;
  date_till?: Maybe<SortOrder>;
  status?: Maybe<SortOrder>;
  hiring_status?: Maybe<SortOrder>;
  isMentor?: Maybe<SortOrder>;
  CreatedBy?: Maybe<SortOrder>;
  User?: Maybe<UserOrderByWithRelationInput>;
  Technology?: Maybe<SortOrder>;
  Technology_TechnologyToUserTechnology?: Maybe<TechnologyOrderByWithRelationInput>;
  level?: Maybe<SortOrder>;
}

export interface UserTechnologyResponse {
  __typename?: 'UserTechnologyResponse';
  success: Scalars['Boolean'];
  message: Scalars['String'];
  errors: Array<RequestError>;
  data?: Maybe<UserTechnology>;
}

export enum UserTechnologyStatus {
  /** Планирую изучать */
  PLANTOSTUDY = 'PlanToStudy',
  /** Отказался изучать */
  REFUSEDTOSTUDY = 'RefusedToStudy',
  /** Изучаю */
  STUDY = 'Study',
  /** Иногда использую */
  RARELYUSE = 'RarelyUse',
  /** Активно использую */
  ACTIVEUSE = 'ActiveUse',
  /** Больше не использую */
  NOLONGERUSE = 'NoLongerUse'
}

export interface UserTechnologyUpdateInput {
  components?: Maybe<Scalars['UserTechnologyLevel']>;
  date_from?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  status?: Maybe<UserTechnologyStatus>;
  hiring_status?: Maybe<UserTechnologyHiringStatus>;
  level?: Maybe<Scalars['UserTechnologyLevel']>;
  /** Готов быть ментором */
  isMentor?: Maybe<Scalars['Boolean']>;
}

export interface UserTechnologyWhereInput {
  AND?: Maybe<Array<UserTechnologyWhereInput>>;
  OR?: Maybe<Array<UserTechnologyWhereInput>>;
  NOT?: Maybe<Array<UserTechnologyWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  components?: Maybe<JsonNullableFilter>;
  date_from?: Maybe<DateTimeNullableFilter>;
  date_till?: Maybe<DateTimeNullableFilter>;
  status?: Maybe<EnumUserTechnologyStatusNullableFilter>;
  hiring_status?: Maybe<EnumUserTechnologyHiringStatusNullableFilter>;
  isMentor?: Maybe<BoolFilter>;
  CreatedBy?: Maybe<StringFilter>;
  User?: Maybe<UserWhereInput>;
  Technology?: Maybe<StringFilter>;
  Technology_TechnologyToUserTechnology?: Maybe<TechnologyWhereInput>;
  level?: Maybe<IntNullableFilter>;
}

export interface UserTechnologyWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  CreatedBy_Technology?: Maybe<UserTechnologyCreatedByTechnologyCompoundUniqueInput>;
}

export interface UserUpdateInput {
  email?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  technologyLevel?: Maybe<Scalars['UserTechnologyLevel']>;
  /** Готов быть ментором */
  isMentor?: Maybe<Scalars['Boolean']>;
  NotificationTypes?: Maybe<NotificationTypeUserNotificationTypesUpdateInput>;
  about?: Maybe<Scalars['EditorComponentObject']>;
  telegram?: Maybe<Scalars['String']>;
}

export interface UserWhereInput {
  AND?: Maybe<Array<UserWhereInput>>;
  OR?: Maybe<Array<UserWhereInput>>;
  NOT?: Maybe<Array<UserWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  username?: Maybe<StringNullableFilter>;
  email?: Maybe<StringNullableFilter>;
  phone?: Maybe<StringNullableFilter>;
  showEmail?: Maybe<BoolFilter>;
  showPhone?: Maybe<BoolFilter>;
  showFullname?: Maybe<BoolFilter>;
  password?: Maybe<StringNullableFilter>;
  fullname?: Maybe<StringNullableFilter>;
  image?: Maybe<StringNullableFilter>;
  address?: Maybe<StringNullableFilter>;
  active?: Maybe<BoolNullableFilter>;
  blocked?: Maybe<BoolFilter>;
  activated?: Maybe<BoolNullableFilter>;
  deleted?: Maybe<BoolNullableFilter>;
  hidden?: Maybe<BoolNullableFilter>;
  sudo?: Maybe<BoolNullableFilter>;
  marketplaceToken?: Maybe<StringNullableFilter>;
  oldID?: Maybe<IntNullableFilter>;
  CreatedBy?: Maybe<StringNullableFilter>;
  EthAccountAuthed?: Maybe<StringNullableFilter>;
  acceptChatMessageAnonymous?: Maybe<BoolNullableFilter>;
  acceptNewChatRoomAnonymous?: Maybe<BoolNullableFilter>;
  acceptNewChatRoom?: Maybe<BoolNullableFilter>;
  isMentor?: Maybe<BoolFilter>;
  technologyLevel?: Maybe<IntNullableFilter>;
  User?: Maybe<UserWhereInput>;
  EthAccount_EthAccountToUser_EthAccountAuthed?: Maybe<EthAccountWhereInput>;
  CallRequests_CallRequest_CalledToUser?: Maybe<CallRequestListRelationFilter>;
  CallRequests_CallRequest_CallerToUser?: Maybe<CallRequestListRelationFilter>;
  Careers?: Maybe<CareerListRelationFilter>;
  ChatMessages?: Maybe<ChatMessageListRelationFilter>;
  ChatMessagesReaded?: Maybe<ChatMessageReadedListRelationFilter>;
  ChatRooms_ChatRoomToUser?: Maybe<ChatRoomListRelationFilter>;
  ChatRoomInvitations_ChatRoomInvitation_CreatedByToUser?: Maybe<ChatRoomInvitationListRelationFilter>;
  ChatRoomInvitations_ChatRoomInvitation_UserToUser?: Maybe<ChatRoomInvitationListRelationFilter>;
  CodeChallenges?: Maybe<CodeChallengeListRelationFilter>;
  CodeChallengeBlocks?: Maybe<CodeChallengeBlockListRelationFilter>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionListRelationFilter>;
  Comments?: Maybe<CommentListRelationFilter>;
  EthAccounts_EthAccount_CreatedByToUser?: Maybe<EthAccountListRelationFilter>;
  EthContractSources?: Maybe<EthContractSourceListRelationFilter>;
  Files?: Maybe<FileListRelationFilter>;
  Galleries?: Maybe<GalleryListRelationFilter>;
  Games_GameToUser?: Maybe<GameListRelationFilter>;
  GameResults_GameResult_CreatedByToUser?: Maybe<GameResultListRelationFilter>;
  GameResults_GameResult_UserToUser?: Maybe<GameResultListRelationFilter>;
  Imports?: Maybe<ImportListRelationFilter>;
  Letters?: Maybe<LetterListRelationFilter>;
  LogedIns?: Maybe<LogedInListRelationFilter>;
  Notices_Notice_CreatedByToUser?: Maybe<NoticeListRelationFilter>;
  Notices_Notice_UserToUser?: Maybe<NoticeListRelationFilter>;
  NotificationTypes_NotificationTypeToUser?: Maybe<NotificationTypeListRelationFilter>;
  Players?: Maybe<PlayerListRelationFilter>;
  Positions_PositionToUser?: Maybe<PositionListRelationFilter>;
  Projects_ProjectToUser?: Maybe<ProjectListRelationFilter>;
  ProjectMembers_ProjectMember_CreatedByToUser?: Maybe<ProjectMemberListRelationFilter>;
  ProjectMembers_ProjectMember_UserToUser?: Maybe<ProjectMemberListRelationFilter>;
  ProjectTasks?: Maybe<ProjectTaskListRelationFilter>;
  ResetPasswords?: Maybe<ResetPasswordListRelationFilter>;
  Resources?: Maybe<ResourceListRelationFilter>;
  ResourceTags?: Maybe<ResourceTagListRelationFilter>;
  Routes?: Maybe<RouteListRelationFilter>;
  Services?: Maybe<ServiceListRelationFilter>;
  ServiceCategories?: Maybe<ServiceCategoryListRelationFilter>;
  Settings?: Maybe<SettingsListRelationFilter>;
  SmsMessages?: Maybe<SmsMessageListRelationFilter>;
  SmsProviders?: Maybe<SmsProviderListRelationFilter>;
  Tags?: Maybe<TagListRelationFilter>;
  Tasks?: Maybe<TaskListRelationFilter>;
  TaskMembers_TaskMember_CreatedByToUser?: Maybe<TaskMemberListRelationFilter>;
  TaskMembers_TaskMember_UserToUser?: Maybe<TaskMemberListRelationFilter>;
  TaskReactions?: Maybe<TaskReactionListRelationFilter>;
  TaskTechnologies?: Maybe<TaskTechnologyListRelationFilter>;
  Teams?: Maybe<TeamListRelationFilter>;
  TeamMembers_TeamMember_CreatedByToUser?: Maybe<TeamMemberListRelationFilter>;
  TeamMembers_TeamMember_UserToUser?: Maybe<TeamMemberListRelationFilter>;
  Technologies?: Maybe<TechnologyListRelationFilter>;
  TechnologyLessons?: Maybe<TechnologyLessonListRelationFilter>;
  TechnologyLessonUsers?: Maybe<TechnologyLessonUserListRelationFilter>;
  Templates?: Maybe<TemplateListRelationFilter>;
  Timers?: Maybe<TimerListRelationFilter>;
  Tournaments?: Maybe<TournamentListRelationFilter>;
  TournamentGroups?: Maybe<TournamentGroupListRelationFilter>;
  Tourneys?: Maybe<TourneyListRelationFilter>;
  TourneyPlayers?: Maybe<TourneyPlayerListRelationFilter>;
  other_Users?: Maybe<UserListRelationFilter>;
  UserTechnologies?: Maybe<UserTechnologyListRelationFilter>;
  Votes?: Maybe<VoteListRelationFilter>;
  Worlds?: Maybe<WorldListRelationFilter>;
  ChatRooms_ChatRoomsMembers?: Maybe<ChatRoomListRelationFilter>;
  Games_GameUsers?: Maybe<GameListRelationFilter>;
  Positions_PositionUsers?: Maybe<PositionListRelationFilter>;
  Projects_PrismaProjectUsers?: Maybe<ProjectListRelationFilter>;
  UserGroups?: Maybe<UserGroupListRelationFilter>;
  NotificationTypes_UserNotificationTypes?: Maybe<NotificationTypeListRelationFilter>;
  Tokens?: Maybe<TokenListRelationFilter>;
  LearnStrategies?: Maybe<LearnStrategyListRelationFilter>;
  UserLearnStrategies?: Maybe<UserLearnStrategyListRelationFilter>;
  MentorMenteeMentors?: Maybe<MentorMenteeListRelationFilter>;
  MentorMenteeMentees?: Maybe<MentorMenteeListRelationFilter>;
  about?: Maybe<JsonNullableFilter>;
  telegram?: Maybe<StringNullableFilter>;
  Donates?: Maybe<DonateListRelationFilter>;
}

export interface UserWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
}

export interface VoteCreateManyResourceResourceToVoteInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  value: Scalars['Decimal'];
  User: Scalars['String'];
}

export interface VoteCreateManyResourceResourceToVoteInputEnvelope {
  data?: Maybe<Array<VoteCreateManyResourceResourceToVoteInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface VoteCreateManyUserUserToVoteInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  value: Scalars['Decimal'];
  Resource?: Maybe<Scalars['String']>;
}

export interface VoteCreateManyUserUserToVoteInputEnvelope {
  data?: Maybe<Array<VoteCreateManyUserUserToVoteInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface VoteCreateNestedManyWithoutResourceResourceToVoteInput {
  create?: Maybe<Array<VoteCreateWithoutResourceResourceToVoteInput>>;
  connectOrCreate?: Maybe<Array<VoteCreateOrConnectWithoutResourceResourceToVoteInput>>;
  createMany?: Maybe<VoteCreateManyResourceResourceToVoteInputEnvelope>;
  connect?: Maybe<Array<VoteWhereUniqueInput>>;
}

export interface VoteCreateNestedManyWithoutUserUserToVoteInput {
  create?: Maybe<Array<VoteCreateWithoutUserUserToVoteInput>>;
  connectOrCreate?: Maybe<Array<VoteCreateOrConnectWithoutUserUserToVoteInput>>;
  createMany?: Maybe<VoteCreateManyUserUserToVoteInputEnvelope>;
  connect?: Maybe<Array<VoteWhereUniqueInput>>;
}

export interface VoteCreateOrConnectWithoutResourceResourceToVoteInput {
  where: VoteWhereUniqueInput;
  create: VoteCreateWithoutResourceResourceToVoteInput;
}

export interface VoteCreateOrConnectWithoutUserUserToVoteInput {
  where: VoteWhereUniqueInput;
  create: VoteCreateWithoutUserUserToVoteInput;
}

export interface VoteCreateWithoutResourceResourceToVoteInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  value: Scalars['Decimal'];
  User_UserToVote: UserCreateNestedOneWithoutVotesInput;
}

export interface VoteCreateWithoutUserUserToVoteInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  value: Scalars['Decimal'];
  Resource_ResourceToVote?: Maybe<ResourceCreateNestedOneWithoutVotesInput>;
}

export interface VoteListRelationFilter {
  every?: Maybe<VoteWhereInput>;
  some?: Maybe<VoteWhereInput>;
  none?: Maybe<VoteWhereInput>;
}

export interface VoteOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export interface VoteWhereInput {
  AND?: Maybe<Array<VoteWhereInput>>;
  OR?: Maybe<Array<VoteWhereInput>>;
  NOT?: Maybe<Array<VoteWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  value?: Maybe<DecimalFilter>;
  Resource?: Maybe<StringNullableFilter>;
  User?: Maybe<StringFilter>;
  User_UserToVote?: Maybe<UserWhereInput>;
  Resource_ResourceToVote?: Maybe<ResourceWhereInput>;
}

export interface VoteWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}

export interface WorldCreateManyUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  seed: Scalars['String'];
  type: WorldType;
  time: Scalars['Decimal'];
  timeChanger?: Maybe<Scalars['Decimal']>;
  days: Scalars['Int'];
  lastPlayed: Scalars['DateTime'];
}

export interface WorldCreateManyUserInputEnvelope {
  data?: Maybe<Array<WorldCreateManyUserInput>>;
  skipDuplicates?: Maybe<Scalars['Boolean']>;
}

export interface WorldCreateNestedManyWithoutUserInput {
  create?: Maybe<Array<WorldCreateWithoutUserInput>>;
  connectOrCreate?: Maybe<Array<WorldCreateOrConnectWithoutUserInput>>;
  createMany?: Maybe<WorldCreateManyUserInputEnvelope>;
  connect?: Maybe<Array<WorldWhereUniqueInput>>;
}

export interface WorldCreateNestedOneWithoutPlayersInput {
  create?: Maybe<WorldCreateWithoutPlayersInput>;
  connectOrCreate?: Maybe<WorldCreateOrConnectWithoutPlayersInput>;
  connect?: Maybe<WorldWhereUniqueInput>;
}

export interface WorldCreateOrConnectWithoutPlayersInput {
  where: WorldWhereUniqueInput;
  create: WorldCreateWithoutPlayersInput;
}

export interface WorldCreateOrConnectWithoutUserInput {
  where: WorldWhereUniqueInput;
  create: WorldCreateWithoutUserInput;
}

export interface WorldCreateWithoutPlayersInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  seed: Scalars['String'];
  type: WorldType;
  time: Scalars['Decimal'];
  timeChanger?: Maybe<Scalars['Decimal']>;
  days: Scalars['Int'];
  lastPlayed: Scalars['DateTime'];
  User: UserCreateNestedOneWithoutWorldsInput;
  Blocks?: Maybe<BlockCreateNestedManyWithoutWorldInput>;
  Messages?: Maybe<MessageCreateNestedManyWithoutWorldInput>;
}

export interface WorldCreateWithoutUserInput {
  id?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  name: Scalars['String'];
  seed: Scalars['String'];
  type: WorldType;
  time: Scalars['Decimal'];
  timeChanger?: Maybe<Scalars['Decimal']>;
  days: Scalars['Int'];
  lastPlayed: Scalars['DateTime'];
  Blocks?: Maybe<BlockCreateNestedManyWithoutWorldInput>;
  Messages?: Maybe<MessageCreateNestedManyWithoutWorldInput>;
  Players?: Maybe<PlayerCreateNestedManyWithoutWorldInput>;
}

export interface WorldListRelationFilter {
  every?: Maybe<WorldWhereInput>;
  some?: Maybe<WorldWhereInput>;
  none?: Maybe<WorldWhereInput>;
}

export interface WorldOrderByRelationAggregateInput {
  _count?: Maybe<SortOrder>;
}

export enum WorldType {
  DEFAULT = 'DEFAULT',
  SUPERFLAT = 'SUPERFLAT'
}

export interface WorldWhereInput {
  AND?: Maybe<Array<WorldWhereInput>>;
  OR?: Maybe<Array<WorldWhereInput>>;
  NOT?: Maybe<Array<WorldWhereInput>>;
  id?: Maybe<StringFilter>;
  createdAt?: Maybe<DateTimeFilter>;
  updatedAt?: Maybe<DateTimeFilter>;
  name?: Maybe<StringFilter>;
  seed?: Maybe<StringFilter>;
  type?: Maybe<EnumWorldTypeFilter>;
  time?: Maybe<DecimalFilter>;
  timeChanger?: Maybe<DecimalNullableFilter>;
  days?: Maybe<IntFilter>;
  lastPlayed?: Maybe<DateTimeFilter>;
  CreatedBy?: Maybe<StringFilter>;
  User?: Maybe<UserWhereInput>;
  Blocks?: Maybe<BlockListRelationFilter>;
  Messages?: Maybe<MessageListRelationFilter>;
  Players?: Maybe<PlayerListRelationFilter>;
}

export interface WorldWhereUniqueInput {
  id?: Maybe<Scalars['String']>;
}
